{"title":"ctf笔记之wake_php","uid":"1a613abcdf9c626b905ba0d768be1622","slug":"ctf之wake_php","date":"2023-01-12T02:23:01.428Z","updated":"2022-12-21T13:49:46.809Z","comments":true,"path":"api/articles/ctf之wake_php.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-5wm9o7_1920x1080.png","content":"<p><strong>源码：</strong></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\nhighlight_file(__FILE__);\n    include(&quot;password.php&quot;);\n    if(isset($_POST[&#39;password&#39;]))\n    &#123;\n        if(strcmp($_POST[&#39;password&#39;],$password) &#x3D;&#x3D; 0)\n        &#123;\n            $a &#x3D; $_REQUEST[&#39;a&#39;];\n            if(is_numeric($a))&#123;\n                die(&quot;Oh No&quot;);\n            &#125;\n            switch($a)&#123;\n                case 0:\n                    echo &quot;NONONO&quot;;\n                    break;\n                case 1:\n                    echo &quot;You are hacker&quot;;\n                    break;\n                case 2:\n                    echo file_get_contents(&quot;&#x2F;flag&quot;);\n                    break;\n                default:\n                    echo &quot;123&quot;;\n            &#125;\n        &#125;\n        else\n        &#123;\n            die(&quot;what&#39;s a shame&quot;);\n        &#125;\n    &#125;\n?&gt;</code></pre>\n\n\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>​\t首先分析源码得知:</p>\n<ul>\n<li>我们要从password.php页面中得到password和a的值</li>\n<li>把通过post传参过来的password值和$password变量做比较,让strcmp函数的值&#x3D;0,进入下一步</li>\n<li>要让is_numeric($a)判为false</li>\n<li>要让case判断$a为2</li>\n</ul>\n<p>思路分析完了,来看看具体的实现</p>\n<h2 id=\"Strcmp-函数漏洞\"><a href=\"#Strcmp-函数漏洞\" class=\"headerlink\" title=\"Strcmp()函数漏洞\"></a>Strcmp()函数漏洞</h2><p><strong>这个漏洞要php5.3之前的版本才有</strong></p>\n<h3 id=\"strcmp漏洞\"><a href=\"#strcmp漏洞\" class=\"headerlink\" title=\"strcmp漏洞\"></a>strcmp漏洞</h3><p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora20191126111242643.png\" alt=\"img\"></p>\n<p>首先来看一下函数</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">int strcmp ( string $str1 , string $str2 )</code></pre>\n\n\n\n<p>这个函数是用于<strong>比较字符串</strong>的函数</p>\n<p>nt strcmp ( string $str1 , string $str2 )<br>参数 str1第一个字符串。str2第二个字符串。<br>如果 str1 小于 str2 返回 &lt; 0；<br>如果 str1 大于 str2 返回 &gt; 0；<br>如果两者相等，返回 0。</p>\n<p>例子1:</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\necho strcmp(&quot;Hello world!&quot;,&quot;Hello world!&quot;); &#x2F;&#x2F; 两字符串相等  &#x2F;&#x2F;0\necho strcmp(&quot;Hello world!&quot;,&quot;Hello&quot;); &#x2F;&#x2F; string1 大于 string2  &#x2F;&#x2F;7\necho strcmp(&quot;Hello world!&quot;,&quot;Hello world! Hello!&quot;); &#x2F;&#x2F; string1 小于 string2  &#x2F;&#x2F;-7\n?&gt;</code></pre>\n\n\n\n<p>例子2:</p>\n<p>证明这个函数区分大小写</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\necho strcmp(&quot;Hello&quot;,&quot;Hello&quot;); &#x2F;&#x2F;0\necho &quot;&lt;br&gt;&quot;;\necho strcmp(&quot;Hello&quot;,&quot;hELLo&quot;); &#x2F;&#x2F;-1\n?&gt;</code></pre>\n\n\n\n<p>​\t可以看出这个函数传入的期望类型是字符串类型的数据，但是如果我们传入非字符串类型的数据的时候，这个函数将会有怎么样的行为呢？<strong>实际上，当这个函数接受到了不符合的类型，这个函数将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，将return 0 !!!! 也就是虽然报了错，但却判定其相等了。</strong>这对于使用这个函数来做选择语句中的判断的代码来说简直是一个致命的漏洞，当然，php官方在后面的版本中修复了这个漏洞，使得报错的时候函数不返回任何值。但是我们仍然可以使用这个漏洞对使用老版本php的网站进行渗透测试。</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">if(strcmp($_POST[&#39;password&#39;],$password) &#x3D;&#x3D; 0)</code></pre>\n\n\n\n<p>对于这段代码，我们能用什么办法绕过验证呢， 只要我们$_POST[‘password’]是一个数组或者一个object即可，但是上一个问题的时候说到过，只能上传字符串类型，那我们又该如何做呢</p>\n<p>其实php为了可以上传一个数组，会把结尾带一对中括号的变量，例如 xxx[]的name（就是$_POST中的key)</p>\n<p>要想这条语句判为真,我们需要在password.php页面构造password为一个数组数组传值为1，而strcmp要求我们传入字符串 strcmp函数判断不是字符串会报错，但是会return0 所以我们的目的达到了</p>\n<p>因为初学,一开始以为数组要这样构建,怎么都拿不到flag..</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221120015123658.png\" alt=\"image-20221120015123658\"></p>\n<p>经过询问朋友得知正确构造方式</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221120124639199.png\" alt=\"image-20221120124639199\"></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora%Z2Z%7BIVJ[XC~@Y%60VHU%60M11I.png\" alt=\"img\"></p>\n<p>最后终于成功</p>\n<p><strong>但是还是遇到了几个不解的地方,后来都解决了,这里写出来方便自己以后回忆</strong></p>\n<h2 id=\"php中is-numeric函数的绕过\"><a href=\"#php中is-numeric函数的绕过\" class=\"headerlink\" title=\"php中is_numeric函数的绕过\"></a>php中is_numeric函数的绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">$a &#x3D; $_REQUEST[&#39;a&#39;];\n            if(is_numeric($a))&#123;\n                die(&quot;Oh No&quot;);\n            &#125;\n            switch($a)&#123;\n                case 0:\n                    echo &quot;NONONO&quot;;\n                    break;\n                case 1:\n                    echo &quot;You are hacker&quot;;\n                    break;\n                case 2:\n                    echo file_get_contents(&quot;&#x2F;flag&quot;);\n                    break;\n                default:\n                    echo &quot;123&quot;;\n            &#125;</code></pre>\n\n\n\n<p>看到这段代码我思考了很久(因为php基础不好),这里需要让 if(is_numeric($a))这个函数判false才能继续执行,而 is_numeric() 函数会判断如果是数字和数字字符串则返回 TRUE，否则返回 FALSE,所以这里出现了一个矛盾点**,$a不能等于2,不然无法执行,但是下面的条件语句又需要case $a为case 2**,基础不好的我陷入混乱</p>\n<p>查找资料的过程中发现了is_numeric()这个函数的绕过;</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">$j &#x3D; $_POST[j];\nis_numeric($j)?die(&quot;&lt;br&#x2F;&gt;not is numeric &lt;br&#x2F;&gt;fail 10&quot;):NULL; \nif($j &gt; 1314)&#123;\necho &quot;&lt;br&#x2F;&gt;pass 10&quot;;&#125;</code></pre>\n\n\n\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>利用数组+十六进制来进行绕过</p>\n<pre class=\"line-numbers language-p'h\" data-language=\"p'h\"><code class=\"language-p'h\">j[]&#x3D;58B</code></pre>\n\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>is_ numeric() 判断变量是否为数字或数字字符串,不仅检查10进制，16进制是可以。<br>is_ numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值,而%20空格字符只能放在数值后。所以,查看函数发现该函数对对于第-个空格字符会跳过空格字符判断,接着后面的判断!</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">j&#x3D;1315%20\nj&#x3D;1315%00</code></pre>\n\n<h4 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><p>php中当一个其他数据类型和数值类型的数据比较大小时，会先将其他数据类型转换成数值类型，这里输入类似9999a数据也可绕过</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">j&#x3D;9999a</code></pre>\n\n\n\n<h2 id=\"case语法特性\"><a href=\"#case语法特性\" class=\"headerlink\" title=\"case语法特性\"></a>case语法特性</h2><p>讲到这里就还有最后一个问题了</p>\n<p>为什么$a&#x3D;2a但是在switch中case 2是true?</p>\n<p>在使用 switch 语句时应该注意以下几点：</p>\n<ul>\n<li>和 if 语句不同的是，switch 语句后面表达式的数据类型只能是整型或字符串，不能是 bool 型。通常这个表达式是一个变量名称，虽然 <a href=\"http://c.biancheng.net/php/\">PHP</a> 是弱类型语言，在 switch 后面表达式的变量可以是任意类型数据，<strong>但为了保证匹配执行的准确性，最好只使用整型或字符串中的一种类型。</strong></li>\n<li>和 if 语句不同的是，switch 语句后面的花括号是必须有的。</li>\n<li>case 语句的个数没有规定，可以无限增加。但 case 标签和 case 标签后面的值之间应该有一个空格，值后面必须有一个冒号，这是语法的一部分。</li>\n<li>switch 匹配完成以后，将依次逐条执行匹配的分支模块中的语句，直到 switch 结构结束或者遇到了 break 语句才停止执行。所以，如果一个分支语句的后面没有写上 break 语句，程序将会继续执行下一个分支语句的内容。</li>\n<li>与 if 语句中的 else 类似，switch 语句中 default 标签直接在后面加上一个冒号，看似没有条件，其实是有条件的，条件就是“表达式”的值不能与前面任何一个 case 标签后的值相等，这时才执行 default 分支中的语句。default 标签和 if 中的 else 子句一样，它不是 switch 语句中必需的，可以省略。</li>\n</ul>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora38FF1A9C7EFA102BBD2F9880DFEA35B0.jpg\" alt=\"img\"></p>\n<p>原来case还有这个讲究</p>\n","feature":true,"text":"源码： &lt;?php highlight_file(__FILE__); include(&quot;password.php&quot;); if(isset($_POST[&#39;password&#39;])) &#123; if(strcmp($_POST[&#39...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"CTF","slug":"CTF","count":3,"path":"api/categories/CTF.json"}],"tags":[{"name":"php","slug":"php","count":8,"path":"api/tags/php.json"},{"name":"writeup","slug":"writeup","count":3,"path":"api/tags/writeup.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Strcmp-%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">Strcmp()函数漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#strcmp%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">strcmp漏洞</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#php%E4%B8%ADis-numeric%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">php中is_numeric函数的绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\"><span class=\"toc-text\">方法一</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\"><span class=\"toc-text\">方法二</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%89\"><span class=\"toc-text\">方法三</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#case%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">case语法特性</span></a></li></ol>","author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://pic.kts.g.mi.com/551ced5839599747048c3c99a9d47df4203311636470612235.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"渗透测试流程总结","uid":"8926bf7f2d1f8630ce6b123f3513e9c4","slug":"渗透测试流程","date":"2023-01-12T03:28:53.132Z","updated":"2023-01-12T02:39:48.044Z","comments":true,"path":"api/articles/渗透测试流程.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-8xg1zy.jpg","text":"渗透测试流程心得总结因为渗透测试过程非常复杂且涉及到的知识点极多，为了防止自己遗忘同时方便快速查阅，将渗透测试全流程以及其中涉及到的各种知识总结下来 1.确定目标确定你要渗透的目标，这里的前提是我们得经过用户的授权，才可以对网站进行渗透。不然如果我们没有经过客户的授权而对一个网站...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":13,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":2,"path":"api/tags/渗透测试.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://pic.kts.g.mi.com/551ced5839599747048c3c99a9d47df4203311636470612235.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"CTFhub之web安全","uid":"b97648e041829a6ba4fa127fa718e3d4","slug":"CTFhub之web练习","date":"2023-01-12T02:23:01.426Z","updated":"2022-12-21T13:50:19.867Z","comments":true,"path":"api/articles/CTFhub之web练习.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-73v6e9_1920x1080.png","text":"1.文件上传之双写后缀 双写绕过原理： 服务端对黑名单中的内容进行处理，且仅处理一次，所以可以通过双写后缀绕过．如，黑名单中有＂php＂字样，上传文件名为＂1.php＂ 上传后文件变成＂1.＂． 如果直接上传111.php的话，会过滤后缀 想到用burp suite抓包改后缀 如...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"CTF","slug":"CTF","count":3,"path":"api/categories/CTF.json"}],"tags":[{"name":"writeup","slug":"writeup","count":3,"path":"api/tags/writeup.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://pic.kts.g.mi.com/551ced5839599747048c3c99a9d47df4203311636470612235.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"feature":true}}