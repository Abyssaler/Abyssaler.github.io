{"title":"php反序列化漏洞学习","uid":"27a8c82d6074b44b0feedf4a65c9f85a","slug":"php反序列化漏洞学习","date":"2023-02-11T02:27:57.686Z","updated":"2023-02-11T08:54:17.906Z","comments":true,"path":"api/articles/php反序列化漏洞学习.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/wallhaven-2y85z9.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>php反序列化漏洞一直是自己的一个弱项，想到上次ctf比赛就是因为web的最后一道题是php反序列化没有思路导致成绩不太理想，特此做个学习笔记以便自己以后查阅</p>\n<h1 id=\"php面向对象基本概念\"><a href=\"#php面向对象基本概念\" class=\"headerlink\" title=\"php面向对象基本概念\"></a>php面向对象基本概念</h1><h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>首先要明确面向对象程序开发的概念</p>\n<p><strong>面向过程：</strong></p>\n<p>面向过程是一种以“整体事件” 为中心的编程思想，编程的时候把解决问题的步骤分析出来,，然后用函数把这些步骤实现，在一步一步的具体步骤中再按顺序调用函数。</p>\n<p><strong>面向对象：</strong></p>\n<p>面向对象是一种以“对象”为中心的编程思想，把要解决的问题分解成各个“对象”;</p>\n<p>对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。</p>\n<p><strong>对象的三个特征</strong>：对象的行为，对象的形态，对象的表示</p>\n<h2 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h2><p>类是定义了一件事物的抽象特点，它将数据的形式以及这些数据上的操作封装在一起。</p>\n<p>对象是具有类类型的变量，是对类的实例。</p>\n<p><strong>内部构成：</strong>成员变量（属性）+成员函数（方法）</p>\n<p>变量定义在类里面就叫成员属性</p>\n<p>在类外面叫成员函数，在类里面叫成员方法</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211104546622.png\" alt=\"image-20230211104546622\"></p>\n<p><strong>继承：</strong>继承性是子类自动共享父类数据结构和方法的机制，是类之间的一种关系。</p>\n<p>在定义和实现一个类的时候，可以在一一个已经存在的类的基础之上来进行，把一个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p>\n<p><strong>父类：</strong>一个类被其他类继承，可将该类成为父类，或基类，超类</p>\n<p><strong>子类：</strong>一个类继承其他类称为子类，也可以称为派生类</p>\n<h1 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h1><h2 id=\"类的结构\"><a href=\"#类的结构\" class=\"headerlink\" title=\"类的结构\"></a>类的结构</h2><p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211105735767.png\" alt=\"image-20230211105735767\"></p>\n<p>其实类里面应该还有成员常量的，但因为我学这个不是搞开发，所以用到的成员常量不多，就不做了解</p>\n<h2 id=\"类的内容\"><a href=\"#类的内容\" class=\"headerlink\" title=\"类的内容\"></a>类的内容</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">class hero  &#x2F;&#x2F;定义类（类名）\n&#123;\n    &#x2F;&#x2F;声明成员变量\n\tvar $name; &#x2F;&#x2F;var为一种修饰符，先不管，默认是public\n\tvar $sex;\n    &#x2F;&#x2F;声明成员函数（方法）\n\tfunction jineng($var1)\n\t&#123;\n\t\techo $this-&gt;name;  &#x2F;&#x2F;使用预定义$this调用成员变量\n\t\techo $var1;  &#x2F;&#x2F;成员函数传参$var1可直接调用\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"实例化和赋值\"><a href=\"#实例化和赋值\" class=\"headerlink\" title=\"实例化和赋值\"></a>实例化和赋值</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\nhighlight_file(__FILE__);\nclass hero&#123;\n  var $name;\n  var $sex;\n  function jineng($var1) &#123;\n    echo $this-&gt;name.&quot;&lt;br &#x2F;&gt;&quot;;\n    echo $var1.&quot;&lt;br &#x2F;&gt;&quot;;\n    &#125;\n&#125;\n\n$cyj&#x3D; new hero();  &#x2F;&#x2F;实体化成对象\n$cyj-&gt;name&#x3D;&#39;chengyaojin&#39;;  &#x2F;&#x2F;赋值\n$cyj-&gt;sex&#x3D;&#39;man&#39;;\n$cyj-&gt;jineng(&#39;zuofan&#39;);\nprint_r($cyj); &#x2F;&#x2F;对象不能使用echo输出，要么用print_r，要么用var_dump\n\n?&gt;</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211154129927.png\" alt=\"image-20230211154129927\"></p>\n<h2 id=\"类的修饰符介绍\"><a href=\"#类的修饰符介绍\" class=\"headerlink\" title=\"类的修饰符介绍\"></a>类的修饰符介绍</h2><p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211154143382.png\" alt=\"image-20230211154143382\"></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211154347251.png\" alt=\"image-20230211154347251\"></p>\n<p>代码演示</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\nhighlight_file(__FILE__);\nclass hero&#123;\n  public  $name&#x3D;&#39;chengyaojin&#39;;  &#x2F;&#x2F;公共的\n  private  $sex&#x3D;&#39;man&#39;;  &#x2F;&#x2F;私有的，别人看不到\n  protected  $shengao&#x3D;&#39;165&#39;;  &#x2F;&#x2F;受保护的：内部，子类可用\n  function jineng($var1) &#123;\n    echo $this-&gt;name;\n    echo $var1;\n    &#125;\n&#125;\n$cyj&#x3D; new hero();\necho $cyj-&gt;name.&quot;&lt;br &#x2F;&gt;&quot;;  &#x2F;&#x2F;可以调用成功\necho $cyj-&gt;sex.&quot;&lt;br &#x2F;&gt;&quot;;  &#x2F;&#x2F;不能调用成功\necho $cyj-&gt;shengao.&quot;&lt;br &#x2F;&gt;&quot;;  &#x2F;&#x2F;不能调用成功\n?&gt;</code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211154453315.png\" alt=\"image-20230211154453315\"></p>\n<p>代码演示2</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\nhighlight_file(__FILE__);\nclass hero&#123;\n  public  $name&#x3D;&#39;chengyaojin&#39;; &#x2F;&#x2F;公共的\n  private  $sex&#x3D;&#39;man&#39;;  &#x2F;&#x2F;私有的\n  protected  $shengao&#x3D;&#39;165&#39;;  &#x2F;&#x2F;受保护的：内部，子类可用\n  function jineng($var1) &#123;\n    echo $this-&gt;name;\n    echo $var1;\n    &#125;\n&#125;\n&#x2F;&#x2F;子类\nclass hero2 extends hero&#123;\n    function test()&#123;\n    echo $this-&gt;name.&quot;&lt;br &#x2F;&gt;&quot;;  &#x2F;&#x2F;子类可用\n    echo $this-&gt;sex.&quot;&lt;br &#x2F;&gt;&quot;;  &#x2F;&#x2F;子类不可用\n    echo $this-&gt;shengao.&quot;&lt;br &#x2F;&gt;&quot;;  &#x2F;&#x2F;子类可用\n    &#125;\n&#125;\n$cyj&#x3D; new hero();\n$cyj2&#x3D;new hero2();\necho $cyj-&gt;name.&quot;&lt;br &#x2F;&gt;&quot;;  &#x2F;&#x2F;外部之可用public\necho $cyj2-&gt;test();  &#x2F;&#x2F;子类内部可用public和protected\n?&gt;</code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211154821035.png\" alt=\"image-20230211154821035\"></p>\n<h2 id=\"类的成员方法\"><a href=\"#类的成员方法\" class=\"headerlink\" title=\"类的成员方法\"></a>类的成员方法</h2><p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211155715902.png\" alt=\"image-20230211155715902\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>类是对象的抽象，而对象是类的具体实例</p>\n<p>类是想法，把类实例化（new），调用具体值后就变成了对象</p>\n<h1 id=\"序列化基础知识\"><a href=\"#序列化基础知识\" class=\"headerlink\" title=\"序列化基础知识\"></a>序列化基础知识</h1><h2 id=\"序列化的作用\"><a href=\"#序列化的作用\" class=\"headerlink\" title=\"序列化的作用\"></a>序列化的作用</h2><p>序列化(Serialization)是将对象的状态信息(属性)转换为可以存储或传输的形式的过程。</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211160302565.png\" alt=\"image-20230211160302565\"></p>\n<p>将对象或者数组转化为可储存&#x2F;传输的字符串。</p>\n<p>在php中使用函数<code>serialize()</code>来将对象或者数组进行序列化，并返回一个包含字节流的字符串来表示</p>\n<h3 id=\"表达方式\"><a href=\"#表达方式\" class=\"headerlink\" title=\"表达方式\"></a>表达方式</h3><p>代码：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\nhighlight_file(__FILE__);\nclass TEST &#123;\n    public $data;\n    public $data2 &#x3D; &quot;dazzhuang&quot;;\n    private $pass;\n\n    public function __construct($data, $pass)\n    &#123;\n        $this-&gt;data &#x3D; $data;\n        $this-&gt;pass &#x3D; $pass;\n    &#125;\n&#125;\n$number &#x3D; 34;\n$str &#x3D; &#39;user&#39;;\n$bool &#x3D; true;\n$null &#x3D; NULL;\n$arr &#x3D; array(&#39;a&#39; &#x3D;&gt; 10, &#39;b&#39; &#x3D;&gt; 200);\n$test &#x3D; new TEST(&#39;uu&#39;, true);\n$test2 &#x3D; new TEST(&#39;uu&#39;, true);\n$test2-&gt;data &#x3D; &amp;$test2-&gt;data2;\necho serialize($number).&quot;&lt;br &#x2F;&gt;&quot;;\necho serialize($str).&quot;&lt;br &#x2F;&gt;&quot;;\necho serialize($bool).&quot;&lt;br &#x2F;&gt;&quot;;\necho serialize($null).&quot;&lt;br &#x2F;&gt;&quot;;\necho serialize($arr).&quot;&lt;br &#x2F;&gt;&quot;;\necho serialize($test).&quot;&lt;br &#x2F;&gt;&quot;;\necho serialize($test2).&quot;&lt;br &#x2F;&gt;&quot;;\n?&gt;</code></pre>\n\n<p>结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">i:34;\ns:4:&quot;user&quot;;\nb:1;\nN;\na:2:&#123;s:1:&quot;a&quot;;i:10;s:1:&quot;b&quot;;i:200;&#125;\nO:4:&quot;TEST&quot;:3:&#123;s:4:&quot;data&quot;;s:2:&quot;uu&quot;;s:5:&quot;data2&quot;;s:9:&quot;dazzhuang&quot;;s:10:&quot;TESTpass&quot;;b:1;&#125;\nO:4:&quot;TEST&quot;:3:&#123;s:4:&quot;data&quot;;s:9:&quot;dazzhuang&quot;;s:5:&quot;data2&quot;;R:2;s:10:&quot;TESTpass&quot;;b:1;&#125;</code></pre>\n\n<p>说明：</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211161117179.png\" alt=\"image-20230211161117179\"></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211161345011.png\" alt=\"image-20230211161345011\"></p>\n<p><strong>对象序列化：</strong></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211162214049.png\" alt=\"image-20230211162214049\"></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211164859169.png\" alt=\"image-20230211164859169\"></p>\n<p>不同的修饰符序列化后的表达都不同，这里的%00其实是url编码过后的二进制00，事实上就是加了一个空</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\nhighlight_file(__FILE__);\nclass test&#123;\n    private $pub&#x3D;&#39;benben&#39;;\n    function jineng()&#123;\n        echo $this-&gt;pub;\n    &#125;\n&#125;\n$a &#x3D; new test();\necho serialize($a);\n?&gt;</code></pre>\n\n<p>在编译器里直接运行上段代码可以看到，属性名前面有乱码，这里其实就是加了二进制的00</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211165055745.png\" alt=\"image-20230211165055745\"></p>\n<p>url编码一下再输出，就可以直观的看到了</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211165358927.png\" alt=\"image-20230211165358927\"></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/image-20230211165414581.png\" alt=\"image-20230211165414581\"></p>\n<h2 id=\"序列化之后的表达方式-x2F-格式\"><a href=\"#序列化之后的表达方式-x2F-格式\" class=\"headerlink\" title=\"序列化之后的表达方式&#x2F;格式\"></a>序列化之后的表达方式&#x2F;格式</h2><h2 id=\"对象序列化的详细讲解\"><a href=\"#对象序列化的详细讲解\" class=\"headerlink\" title=\"对象序列化的详细讲解\"></a>对象序列化的详细讲解</h2>","feature":true,"text":"前言php反序列化漏洞一直是自己的一个弱项，想到上次ctf比赛就是因为web的最后一道题是php反序列化没有思路导致成绩不太理想，特此做个学习笔记以便自己以后查阅 php面向对象基本概念面向对象首先要明确面向对象程序开发的概念 面向过程： 面向过程是一种以“整体事件” 为中心的编...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":10,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"php","slug":"php","count":5,"path":"api/tags/php.json"},{"name":"漏洞","slug":"漏洞","count":5,"path":"api/tags/漏洞.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">php面向对象基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">面向对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">类的定义</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">类与对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">类的结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">类的内容</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%92%8C%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">实例化和赋值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">类的修饰符介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">类的成员方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">序列化基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">序列化的作用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">表达方式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%90%8E%E7%9A%84%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F-x2F-%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">序列化之后的表达方式&#x2F;格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3\"><span class=\"toc-text\">对象序列化的详细讲解</span></a></li></ol></li></ol>","author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"metasploitable2靶场渗透","uid":"0b088cb7730fbb88856526a3dd3f4899","slug":"metasploitable2靶场渗透","date":"2023-02-13T01:13:07.350Z","updated":"2023-02-13T02:54:39.737Z","comments":true,"path":"api/articles/metasploitable2靶场渗透.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/wallhaven-72qm39.jpg","text":"前言Metasploitable2 虚拟系统是一个特别制作的ubuntu操作系统，本身设计作为安全工具测试和演示常见漏洞攻击。这个版本的虚拟系统兼容VMware。当虚拟系统启动之后，使用用户名：msfadmin 和密码msfadmin登陆 适用于学习网络安全新手学习 下载地址链接...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"渗透从入门到入土","slug":"渗透从入门到入土","count":10,"path":"api/categories/渗透从入门到入土.json"}],"tags":[{"name":"vulhub","slug":"vulhub","count":2,"path":"api/tags/vulhub.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"渗透测试流程总结","uid":"8926bf7f2d1f8630ce6b123f3513e9c4","slug":"渗透测试流程","date":"2023-01-12T03:28:53.132Z","updated":"2023-02-10T04:19:35.051Z","comments":true,"path":"api/articles/渗透测试流程.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/wallhaven-l83e5l.png","text":"渗透测试流程心得总结因为渗透测试过程非常复杂且涉及到的知识点极多，为了防止自己遗忘同时方便快速查阅，将渗透测试全流程以及其中涉及到的各种知识总结下来 1.确定目标确定你要渗透的目标，这里的前提是我们得经过用户的授权，才可以对网站进行渗透。不然如果我们没有经过客户的授权而对一个网站...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":10,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"feature":true}}