{"title":"php怎么通过url传参","uid":"7ed8089baf30886b0aa7735f2db515b2","slug":"php怎么通过url传参","date":"2023-01-10T13:21:22.708Z","updated":"2023-01-06T12:46:37.820Z","comments":true,"path":"api/articles/php怎么通过url传参.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-y86g17_1280x720.png","content":"<h2 id=\"php怎么通过url传参\"><a href=\"#php怎么通过url传参\" class=\"headerlink\" title=\"php怎么通过url传参\"></a>php怎么通过url传参</h2><p>​\t目前正在学php基础,遇到一个困扰我的问题,那就是通过使用_GET[]的方式获取url中所传的参数中?的用途,如下图:</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221114000304793.png\" alt=\"123.php中的代码如下\"></p>\n<p>123.php页面代码如图</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221114000537883.png\" alt=\"image-20221114000537883\"></p>\n<p>为什么通过在127.0.0.1&#x2F;php.123后面输入?target&#x3D;import.php后var_dump函数会把target当成关联数组里面的key从而取出target被赋予的值呢?这其中?起了什么作用</p>\n<p>通过了解得知,?表示传参,拿127.0.0.1&#x2F;php.123?target&#x3D;import.php举例子,?表示对当前php.123页面进行传参,传参的内容为<strong>名为target,值为import.php</strong>的这样一个参数.这引起了我的好奇,因为?在php语法中是一个三元运算符</p>\n<h4 id=\"错误思路-三元运算符\"><a href=\"#错误思路-三元运算符\" class=\"headerlink\" title=\"错误思路:三元运算符\"></a>错误思路:三元运算符</h4><p>?作为三元运算符的的语法格式是:<strong>(expr1) ? (expr2) : (expr3)</strong>,对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3.</p>\n<p>当我顺着这个思路再看url&#x2F;?target&#x3D;import.php这串代码时,怎么看怎么抽象,于是乎,继续查</p>\n<h4 id=\"正解-url-x2F-x-x3D-是php中的一项基本技巧\"><a href=\"#正解-url-x2F-x-x3D-是php中的一项基本技巧\" class=\"headerlink\" title=\"正解:url&#x2F;?x&#x3D;是php中的一项基本技巧\"></a>正解:url&#x2F;?x&#x3D;是php中的一项基本技巧</h4><p>通过检索网上其他的文章,得知使用url传递参数是php中的一项基本技巧，一般格式为url&#x2F;?x&#x3D;,<strong>这其中?是一种url固定的格式 ，在url格式中表示传参，这里不应该用php的语法去理解它</strong>。</p>\n<p>举例，如果要通过url传递一个参数n&#x3D;5，那么url应当为url&#x2F;?n&#x3D;5，php页面中应当包含如下代码：</p>\n<p>$n &#x3D; $_GET[‘n’];</p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221114002844639.png\" alt=\"image-20221114002844639\"></p>\n<p>这就是一种固定的格式,纯粹是自己想多了…</p>\n<p>不过既然都查到这里来了,就顺便再深入一下</p>\n<p><strong>显而易见，这种方法将会把参数暴露出来，安全系数较低。因此，可以有一种 URL 的编码方式，对 URL 传递的参数进行编码。以此让参数不可见</strong></p>\n<h4 id=\"urlencode-string\"><a href=\"#urlencode-string\" class=\"headerlink\" title=\"urlencode(string)\"></a>urlencode(string)</h4><p>urlencode()函数实现将字符串 string 进行 URL 编码。应用urlencode()函数对 URL 传递的参数值进行编码，显示的字符串是URL 编码后的字符串，其实现的代码如下所示：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\n$url &#x3D; urlencode(&quot;你想传入的参数&quot;);&#x2F;&#x2F;对参数编码\necho&quot;123.php?id&#x3D;&quot;.$url;\n?&gt;</code></pre>\n\n<p>在浏览器中输入运行地址，按回车键，得到如下所示的运行结果：</p>\n<p><strong>index.php?id&#x3D;PHP%E4%B8%AD%E6%96%87%E7%BD%91</strong></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221114090030760.png\" alt=\"image-20221114090030760\"></p>\n<p>这同时说明了对于服务器而言，编码前后的字符串并没有什么区别，服务器能够自动识别.</p>\n","text":"php怎么通过url传参​ 目前正在学php基础,遇到一个困扰我的问题,那就是通过使用_GET[]的方式获取url中所传的参数中?的用途,如下图: 123.php页面代码如图 为什么通过在127.0.0.1&#x2F;php.123后面输入?target&#x3D;import....","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":24,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"php","slug":"php","count":5,"path":"api/tags/php.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#php%E6%80%8E%E4%B9%88%E9%80%9A%E8%BF%87url%E4%BC%A0%E5%8F%82\"><span class=\"toc-text\">php怎么通过url传参</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E6%80%9D%E8%B7%AF-%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">错误思路:三元运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E8%A7%A3-url-x2F-x-x3D-%E6%98%AFphp%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A1%B9%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">正解:url&#x2F;?x&#x3D;是php中的一项基本技巧</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#urlencode-string\"><span class=\"toc-text\">urlencode(string)</span></a></li></ol></li></ol></li></ol>","author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"vulhub靶场环境搭建","uid":"1fa64911bbe068fc2410b2322a01cf3e","slug":"vulhub靶场环境搭建","date":"2023-01-10T13:21:22.708Z","updated":"2022-11-24T09:00:46.255Z","comments":true,"path":"api/articles/vulhub靶场环境搭建.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora3f878fc75ad84405bffa29a309238655.jpg","text":"概述Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行一条命令即可编译、运行一个完整 的漏洞靶场镜像。 Vulhub是一个基于 docker 和 docker-compose 的漏洞环境集合，进入对应目录并执行一条语句即可启 动一个全新的漏洞环境，让漏洞复现...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"环境配置","slug":"环境配置","count":4,"path":"api/categories/环境配置.json"}],"tags":[{"name":"vulhub","slug":"vulhub","count":2,"path":"api/tags/vulhub.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}},"next_post":{"title":"MYSQL在线笔记1","uid":"fb8cab7394f8a5dac8ef147ae6234738","slug":"MYSQL","date":"2023-01-10T13:21:22.691Z","updated":"2023-01-14T13:36:57.036Z","comments":true,"path":"api/articles/MYSQL.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-3lo8q3_1920x1080.png","text":"mysql0.数据库常见概念0.1概念数据库： 英文单词DataBase，简称DB。按照一定格式存储数据的一些文件的组合。 顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了 具有特定格式的数据。 数据库管理系统： DataBaseManagement，简称DBMS。...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"在线笔记","slug":"在线笔记","count":3,"path":"api/categories/在线笔记.json"}],"tags":[{"name":"数据库安全","slug":"数据库安全","count":3,"path":"api/tags/数据库安全.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}}}