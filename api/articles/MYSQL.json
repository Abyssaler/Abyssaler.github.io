{"title":"MYSQL在线笔记1","uid":"fb8cab7394f8a5dac8ef147ae6234738","slug":"MYSQL","date":"2023-01-10T13:21:22.691Z","updated":"2023-01-14T13:36:57.036Z","comments":true,"path":"api/articles/MYSQL.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-3lo8q3_1920x1080.png","content":"<h1 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h1><h2 id=\"0-数据库常见概念\"><a href=\"#0-数据库常见概念\" class=\"headerlink\" title=\"0.数据库常见概念\"></a>0.数据库常见概念</h2><h3 id=\"0-1概念\"><a href=\"#0-1概念\" class=\"headerlink\" title=\"0.1概念\"></a>0.1概念</h3><p><strong>数据库：</strong><br>        英文单词DataBase，简称DB。按照一定格式存储数据的一些文件的组合。<br>        顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了<br>        具有特定格式的数据。</p>\n<p><strong>数据库管理系统：</strong><br>    DataBaseManagement，简称DBMS。<br>    数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以<br>    对数据库当中的数据进行增删改查。</p>\n<p><strong>常见的数据库管理系统：</strong><br>    MySQL、Oracle、MS SqlServer、DB2、sybase等….</p>\n<p><strong>SQL：结构化查询语言</strong><br>    程序员需要学习SQL语句，程序员通过编写SQL语句，然后DBMS负责执行SQL<br>    语句，最终来完成数据库中数据的增删改查操作。</p>\n<p>SQL是一套标准，程序员主要学习的就是SQL语句，这个SQL在mysql中可以使用，<br>同时在Oracle中也可以使用，在DB2中也可以使用。</p>\n<p><strong>三者之间的关系？</strong><br>    DBMS–执行–&gt; SQL –操作–&gt; DB</p>\n<p>先安装数据库管理系统MySQL，然后学习SQL语句怎么写，编写SQL语句之后，DBMS<br>对SQL语句进行执行，最终来完成数据库的数据管理。</p>\n<h3 id=\"0-2-SQL语句分类\"><a href=\"#0-2-SQL语句分类\" class=\"headerlink\" title=\"0.2 SQL语句分类\"></a>0.2 SQL语句分类</h3><p><strong>DQL：</strong><br>        数据查询语言（凡是带有select关键字的都是查询语句）<br>        select…\t\t</p>\n<p><strong>DML：</strong><br>            数据操作语言（凡是对表当中的数据进行增删改的都是DML）<br>            insert delete update<br>            insert 增<br>            delete 删<br>            update 改</p>\n<p>​\t\t这个主要是操作表中的数据data。</p>\n<p><strong>DDL：</strong><br>        数据定义语言<br>        凡是带有create、drop、alter的都是DDL。<br>        DDL主要操作的是表的结构。不是表中的数据。<br>        create：新建，等同于增<br>        drop：删除<br>        alter：修改<br>        这个增删改和DML不同，这个主要是对表结构进行操作。</p>\n<p><strong>TCL：</strong><br>    不是王牌电视。<br>    是事务控制语言<br>    包括：<br>        事务提交：commit;<br>        事务回滚：rollback;</p>\n<p><strong>DCL：</strong><br>    是数据控制语言。<br>    例如：授权grant、撤销权限revoke….</p>\n<h3 id=\"0-3MYSQL中的数据类型\"><a href=\"#0-3MYSQL中的数据类型\" class=\"headerlink\" title=\"0.3MYSQL中的数据类型\"></a>0.3MYSQL中的数据类型</h3><p><strong>varchar(最长255)</strong><br>        <strong>可变长度的字符串</strong>，比较智能，节省空间。会根据实际的数据长度动态分配空间。</p>\n<p>​\t\t优点：节省空间<br>​\t\t缺点：需要动态分配空间，速度慢。</p>\n<p><strong>char(最长255)</strong><br>        <strong>定长字符串</strong>，不管实际的数据长度是多少，分配固定长度的空间去存储数据。<br>        使用不恰当的时候，可能会导致空间的浪费。</p>\n<p>​\t\t优点：不需要动态分配空间，<strong>速度快。</strong><br>​\t\t缺点：使用不当可能会导致空间的浪费。</p>\n<p>​\t\t<strong>varchar和char我们应该怎么选择？</strong><br>​\t\t\t性别字段你选什么？因为性别是固定长度的字符串，所以选择char。<br>​\t\t\t姓名字段你选什么？每一个人的名字长度不同，所以选择varchar。</p>\n<p><strong>int(最长11)</strong></p>\n<p>​\t\t数字中的整数型。等同于java的int。</p>\n<p><strong>bigint</strong><br>        数字中的长整型。等同于java中的long。</p>\n<p><strong>float</strong><br>        单精度浮点型数据</p>\n<p><strong>double</strong><br>        双精度浮点型数据</p>\n<p><strong>date</strong><br>        短日期类型</p>\n<p><strong>datetime</strong><br>        长日期类型</p>\n<p><strong>clob</strong><br>        字符大对象<br>        最多可以存储4G的字符串。<br>        比如：存储一篇文章，存储一个说明。<br>        超过255个字符的都要采用CLOB字符大对象来存储。<br>        Character Large OBject:CLOB</p>\n<p><strong>blob</strong><br>        二进制大对象<br>        Binary Large OBject<br>        专门用来存储图片、声音、视频等流媒体数据。<br>        往BLOB类型的字段上插入数据的时候，例如插入一个图片、视频等，<br>        你需要使用IO流才行。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">t_movie 电影表（专门存储电影信息的）\n编号no(bigint)\t名字name(varchar)\t\t故事情节history(clob)\t\n上映日期playtime(date)\t\t时长time(double)\t\t海报image(blob)\n类型type(char)\t\t\t\t\t\t\t</code></pre>\n\n<h3 id=\"0-4SQL脚本的执行\"><a href=\"#0-4SQL脚本的执行\" class=\"headerlink\" title=\"0.4SQL脚本的执行\"></a>0.4SQL脚本的执行</h3><p>xxxx.sql这种文件被称为sql脚本文件。<br>        sql脚本文件中编写了大量的sql语句。<br>        我们执行sql脚本文件的时候，该文件中所有的sql语句会全部执行！<br>        批量的执行SQL语句，可以使用sql脚本文件。</p>\n<ul>\n<li>mysql&gt; source D:\\course\\03-MySQL\\document\\vip.sql<br>你在实际的工作中，第一天到了公司，项目经理会给你一个xxx.sql文件，你执行这个脚本文件，你电脑上的数据库数据就有了！</li>\n</ul>\n<h3 id=\"0-5数据库和表的导入导出\"><a href=\"#0-5数据库和表的导入导出\" class=\"headerlink\" title=\"0.5数据库和表的导入导出\"></a>0.5数据库和表的导入导出</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">数据导出？\n\t注意：在windows的dos命令窗口中：\n\t\tmysqldump bjpowernode&gt;D:\\bjpowernode.sql -uroot -p123456\n\t可以导出指定的表吗？\n\t\tmysqldump bjpowernode emp&gt;D:\\bjpowernode.sql -uroot -p123456\n\n数据导入？\n\t注意：需要先登录到mysql数据库服务器上。\n\t然后创建数据库：create database bjpowernode;\n\t使用数据库：use bjpowernode\n\t然后初始化数据库：source D:\\bjpowernode.sql</code></pre>\n\n<h2 id=\"1-数据库操作\"><a href=\"#1-数据库操作\" class=\"headerlink\" title=\"1.数据库操作\"></a>1.数据库操作</h2><p><strong>show databases;</strong> \t查看mysql中有哪些数据库</p>\n<p> <strong>use test;</strong>\t表示正在使用一个名字叫做test的数据库。</p>\n<p> <strong>create database db01;</strong>\t创建数据库</p>\n<p><strong>show tables;</strong> \t查看某个数据库下有哪些表</p>\n<p> <strong>select version();</strong>\t查看mysql数据库的版本号</p>\n<p><strong>select database();</strong>\t查看当前使用的是哪个数据库</p>\n<p><strong>\\c</strong>\t用来终止一条命令的输入。</p>\n<h2 id=\"2-建表操作\"><a href=\"#2-建表操作\" class=\"headerlink\" title=\"2.建表操作\"></a>2.建表操作</h2><h3 id=\"2-1创建一个表create\"><a href=\"#2-1创建一个表create\" class=\"headerlink\" title=\"2.1创建一个表create\"></a>2.1创建一个表create</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">学号、姓名、年龄、性别、邮箱地址\n\tcreate table t_student(\n\t\tno int,\n\t\tname varchar(32),\n\t\tsex char(1),\n\t\tage int(3),\n\t\temail varchar(255)\n\t);</code></pre>\n\n<h3 id=\"2-2删除一个表drop\"><a href=\"#2-2删除一个表drop\" class=\"headerlink\" title=\"2.2删除一个表drop\"></a>2.2删除一个表drop</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">drop table t_student; &#x2F;&#x2F; 当这张表不存在的时候会报错！\n&#x2F;&#x2F; 如果这张表存在的话，删除\ndrop table if exists t_student;</code></pre>\n\n<ul>\n<li>对表结构的修改需要使用：<strong>alter</strong>属于DDL语句</li>\n<li><strong>desc</strong> t_student    查看表结构</li>\n</ul>\n<h3 id=\"2-3插入数据insert\"><a href=\"#2-3插入数据insert\" class=\"headerlink\" title=\"2.3插入数据insert\"></a>2.3插入数据insert</h3><ul>\n<li>insert into 表名(字段名1,字段名2,字段名3…) values(值1,值2,值3);</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">insert into t_student(no,name,sex,age,email)\n\tvalues(1,&#39;zhangsan&#39;,&#39;m&#39;,20,&#39;zhangsan@123.com&#39;);\ninsert into t_student(email,name,sex,age,no)\n\tvalues(&#39;lisi@123.com&#39;,&#39;lisi&#39;,&#39;f&#39;,20,2);\ninsert into t_student(no) values(3);\n&#x2F;&#x2F;省略字段名\ninsert into t_student values(2, &#39;lisi&#39;, &#39;f&#39;, 20, &#39;lisi@123.com&#39;);</code></pre>\n\n<ul>\n<li>insert语句但凡是执行成功了，那么必然会多一条记录。没有给其它字段指定值的话，默认值是NULL。</li>\n</ul>\n<p><strong>一次插入多条数据</strong></p>\n<ul>\n<li>insert into t_user(字段名1,字段名2) values(),(),(),();</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">insert into t_user(id,name,birth,create_time) values\n\t\t(1,&#39;zs&#39;,&#39;1980-10-11&#39;,now()), \n\t\t(2,&#39;lisi&#39;,&#39;1981-10-11&#39;,now()),\n\t\t(3,&#39;wangwu&#39;,&#39;1982-10-11&#39;,now());</code></pre>\n\n\n\n<h3 id=\"2-4修改数据update\"><a href=\"#2-4修改数据update\" class=\"headerlink\" title=\"2.4修改数据update\"></a>2.4修改数据update</h3><ul>\n<li><p>update 表名 set 字段名1&#x3D;值1,字段名2&#x3D;值2,字段名3&#x3D;值3… where 条件;</p>\n</li>\n<li><p>没有条件限制会导致所有数据全部更新。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">update t_user set name &#x3D; &#39;jack&#39;, birth &#x3D; &#39;2000-10-11&#39; where id &#x3D; 2;\n\nupdate t_user set name &#x3D; &#39;jack&#39;, birth &#x3D; &#39;2000-10-11&#39;, create_time &#x3D; now() where id &#x3D; 2;</code></pre>\n\n<h3 id=\"2-5删除数据\"><a href=\"#2-5删除数据\" class=\"headerlink\" title=\"2.5删除数据\"></a>2.5删除数据</h3><p><strong>delete</strong>语句删除数据的原理？（delete属于DML语句！！！）</p>\n<ul>\n<li>表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放！！！</li>\n<li>这种删除缺点是：删除效率比较低。</li>\n<li>这种删除优点是：支持回滚，后悔了可以再恢复数据！！！</li>\n</ul>\n<p><strong>truncate</strong>语句删除数据的原理？</p>\n<ul>\n<li>这种删除效率比较高，表被一次截断，物理删除。</li>\n<li>这种删除缺点：不支持回滚。</li>\n<li>这种删除优点：快速。</li>\n</ul>\n<h4 id=\"2-5-1delete\"><a href=\"#2-5-1delete\" class=\"headerlink\" title=\"2.5.1delete\"></a>2.5.1delete</h4><ul>\n<li><p>delete from 表名 where 条件;</p>\n</li>\n<li><p>没有条件，整张表的数据会全部删除！</p>\n</li>\n<li><p>delete from t_user where id &#x3D; 2;</p>\n</li>\n</ul>\n<h4 id=\"2-5-2truncate\"><a href=\"#2-5-2truncate\" class=\"headerlink\" title=\"2.5.2truncate\"></a>2.5.2truncate</h4><ul>\n<li>truncate table dept_bak; （这种操作属于DDL操作。）</li>\n</ul>\n<p>下列演示内容所用表</p>\n<p><strong>emp 员工表</strong></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221115200021659.png\" alt=\"image-20221115200021659\"></p>\n<p><strong>salgarde 工资等级表</strong></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221115200108722.png\" alt=\"image-20221115200108722\"></p>\n<p><strong>dept 部门表</strong></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typoraimage-20221115200125958.png\" alt=\"image-20221115200125958\"></p>\n<h2 id=\"3-基础增删改\"><a href=\"#3-基础增删改\" class=\"headerlink\" title=\"3.基础增删改\"></a>3.基础增删改</h2><h2 id=\"3-单表查询\"><a href=\"#3-单表查询\" class=\"headerlink\" title=\"3.单表查询\"></a>3.单表查询</h2><h3 id=\"3-1基础条件查询\"><a href=\"#3-1基础条件查询\" class=\"headerlink\" title=\"3.1基础条件查询\"></a>3.1基础条件查询</h3><ul>\n<li>select  字段1,字段2,字段3….  from   表名  where  条件;</li>\n</ul>\n<p><strong>&#x3D; 等于</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">查询薪资等于800的员工姓名和编号？\n\t\tselect empno,ename from emp where sal &#x3D; 800;\n\t查询SMITH的编号和薪资？\n\t\tselect empno,sal from emp where ename &#x3D; &#39;SMITH&#39;; &#x2F;&#x2F;字符串使用单引号</code></pre>\n\n<p><strong>&lt;&gt;或!&#x3D; 不等于</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">查询薪资不等于800的员工姓名和编号？\n\tselect empno,ename from emp where sal !&#x3D; 800;\n\tselect empno,ename from emp where sal &lt;&gt; 800; &#x2F;&#x2F; 小于号和大于号组成的不等号</code></pre>\n\n<p><strong>&lt; 小于</strong>  <strong>&lt;&#x3D; 小于等于</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">查询薪资小于等于3000的员工姓名和编号？\n\t\tselect empno,ename,sal from emp where sal &lt;&#x3D; 3000;</code></pre>\n\n<p><strong>(&gt;)大于 **  ** (&gt;&#x3D;) 大于等于</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">查询薪资大于等于3000的员工姓名和编号？\nselect empno,ename,sal from emp where sal &gt;&#x3D; 3000;\n\nbetween … and …. 两个值之间, 等同于 &gt;&#x3D; and &lt;&#x3D;\n查询薪资在2450和3000之间的员工信息？包括2450和3000\n\t第一种方式：&gt;&#x3D; and &lt;&#x3D; （and是并且的意思。）\n\t\tselect empno,ename,sal from emp where sal &gt;&#x3D; 2450 and sal &lt;&#x3D; 3000;\t</code></pre>\n\n<p><strong>is null 为 null（is not null 不为空）</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">查询哪些员工的津贴&#x2F;补助为null？\n\t\tmysql&gt; select empno,ename,sal,comm from emp where comm &#x3D; null;\n\n查询哪些员工的津贴&#x2F;补助不为null？\n\t\tselect empno,ename,sal,comm from emp where comm is not null;</code></pre>\n\n<p><strong>and 并且    or 或者</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select  * from emp where sal &gt; 2500 and (deptno &#x3D; 10 or deptno &#x3D; 20);\n\nand和or同时出现，and优先级较高。如果想让or先执行，需要加“小括号”,以后在开发中，如果不确定优先级，就加小括号就行了。</code></pre>\n\n<p><strong>in 包含，相当于多个 or （not in 不在这个范围中）</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">查询工作岗位是MANAGER和SALESMAN的员工？\nselect empno,ename,job from emp where job &#x3D; &#39;MANAGER&#39; or job &#x3D; &#39;SALESMAN&#39;;\nselect empno,ename,job from emp where job in(&#39;MANAGER&#39;, &#39;SALESMAN&#39;);</code></pre>\n\n<p><strong>not 可以取非，主要用在 is 或 in 中</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">is null\nis not null\nin\nnot in</code></pre>\n\n<p><strong>like</strong> \t</p>\n<p>称为模糊查询，支持%或下划线匹配</p>\n<ul>\n<li>%匹配任意多个字符</li>\n<li>下划线：任意一个字符。</li>\n<li>（%是一个特殊的符号，_ 也是一个特殊符号）</li>\n</ul>\n<p>\t</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">\n找出名字中含有O的？\n\tmysql&gt; select ename from emp where ename like &#39;%O%&#39;;\n\n找出名字中有“_”的？\n\tselect name from t_student where name like &#39;%_%&#39;; &#x2F;&#x2F;这样不行。\n\n\tmysql&gt; select name from t_student where name like &#39;%\\_%&#39;; &#x2F;&#x2F; \\转义字符。</code></pre>\n\n<p><strong>distinct</strong></p>\n<ul>\n<li><p>把查询结果去除重复记录【distinct】</p>\n</li>\n<li><p>distinct只能出现在所有字段的最前方。</p>\n</li>\n<li><p>distinct出现在job,deptno两个字段之前，表示两个字段联合起来去重。</p>\n</li>\n<li><p>select distinct job from emp;</p>\n</li>\n<li><p>select distinct job,deptno from emp;</p>\n</li>\n</ul>\n<h3 id=\"3-2排序\"><a href=\"#3-2排序\" class=\"headerlink\" title=\"3.2排序\"></a>3.2排序</h3><p>查询所有员工薪资，排序？</p>\n<ul>\n<li>select  ename,sal from emp order by sal; &#x2F;&#x2F; 默认是升序！！！</li>\n</ul>\n<p>指定降序：<strong>desc</strong></p>\n<ul>\n<li>select  ename,sal from emp order by sal desc;</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话，\n\t再按照名字升序排列。\n\tselect \n\t\tename,sal\n\tfrom\n\t\temp\n\torder by\n\t\tsal asc, ename asc; &#x2F;&#x2F; sal在前，起主导，只有sal相等的时候，才会考虑启用ename排序。</code></pre>\n\n<h3 id=\"3-3分页\"><a href=\"#3-3分页\" class=\"headerlink\" title=\"3.3分页\"></a>3.3分页</h3><ul>\n<li><strong>limit</strong>作用：将查询结果集的一部分取出来。通常使用在分页查询当中。<ul>\n<li>完整用法：limit startIndex, length\t\tstartIndex是起始下标，length是长度。</li>\n<li>起始下标从0开始。</li>\n<li>缺省用法：limit 5; 这是取前5.</li>\n</ul>\n</li>\n</ul>\n<p><strong>按照薪资降序，取出排名在前5名的员工？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select \n\t\tename,sal\n\tfrom\n\t\temp\n\torder by \n\t\tsal desc\n\tlimit 5; &#x2F;&#x2F;取前5\tlimit 0,5;\nmysql当中limit在order by之后执行！！！！！！</code></pre>\n\n<p><strong>取出工资排名在[3-5]名的员工？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">\tselect \n\t\tename,sal\n\tfrom\n\t\temp\n\torder by\n\t\tsal desc\n\tlimit\n\t\t2, 3;\n2表示起始位置从下标2开始，就是第三条记录。\n3表示长度。</code></pre>\n\n<ul>\n<li><p>每页显示3条记录</p>\n<ul>\n<li>第1页：limit 0,3\t\t[0 1 2]</li>\n<li>第2页：limit 3,3\t\t[3 4 5]</li>\n<li>第3页：limit 6,3\t\t[6 7 8]</li>\n</ul>\n</li>\n<li><p>每页显示pageSize条记录</p>\n<ul>\n<li>第pageNo页：limit (pageNo - 1) * pageSize  , pageSize</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-函数\"><a href=\"#4-函数\" class=\"headerlink\" title=\"4.函数\"></a>4.函数</h2><h3 id=\"4-1单行处理函数\"><a href=\"#4-1单行处理函数\" class=\"headerlink\" title=\"4.1单行处理函数\"></a>4.1单行处理函数</h3><ul>\n<li>单行处理函数的特点：一个输入对应一个输出。<ul>\n<li>和单行处理函数相对的是：多行处理函数。（多行处理函数特点：多个输入，对应1个输出！）</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">lower 转换小写\n\tmysql&gt; select lower(ename) as ename from emp;\nupper 转换大写\n\t\tmysql&gt; select * from t_student;\nsubstr 取子串（substr( 被截取的字符串, 起始下标,截取的长度)）\n\t\tselect substr(ename, 1, 1) as ename from emp;\n\t\t注意：起始下标从1开始，没有0.\n\t\t找出员工名字第一个字母是A的员工信息？\n\t\t\t第一种方式：模糊查询\n\t\t\t\tselect ename from emp where ename like &#39;A%&#39;;\n\t\t\t第二种方式：substr函数\n\t\t\t\tselect \n\t\t\t\t\tename \n\t\t\t\tfrom \n\t\t\t\t\temp \n\t\t\t\twhere \n\t\t\t\t\tsubstr(ename,1,1) &#x3D; &#39;A&#39;;\nconcat函数进行字符串的拼接\n\t\tselect concat(empno,ename) from emp;\nlength 取长度\n\t\tselect length(ename) enamelength from emp;\ntrim 去空格\n\t\tmysql&gt; select * from emp where ename &#x3D; &#39;  KING&#39;;\nstr_to_date 将字符串转换成日期\ndate_format 格式化日期\nformat 设置千分位\nround 四舍五入\n\t\tselect 字段 from 表名;\n\t\tselect ename from emp;\n\t\tselect &#39;abc&#39; from emp; &#x2F;&#x2F; select后面直接跟“字面量&#x2F;字面值”\n\n\t\tmysql&gt; select &#39;abc&#39; as bieming from emp;\n\t\tselect round(1236.567, 1) as result from emp; &#x2F;&#x2F;保留1个小数\n\t\tselect round(1236.567, 2) as result from emp; &#x2F;&#x2F;保留2个小数\n\t\tselect round(1236.567, -1) as result from emp; &#x2F;&#x2F; 保留到十位。\nrand() 生成随机数\n\t\tmysql&gt; select round(rand()*100,0) from emp; &#x2F;&#x2F; 100以内的随机数\nifnull 可以将 null 转换成一个具体值\n\t\tifnull是空处理函数。专门处理空的。\n\t\t在所有数据库当中，只要有NULL参与的数学运算，最终结果就是NULL。\n\t\tmysql&gt; select ename, sal + comm as salcomm from emp;</code></pre>\n\n<h3 id=\"4-2分组函数\"><a href=\"#4-2分组函数\" class=\"headerlink\" title=\"4.2分组函数\"></a>4.2分组函数</h3><ul>\n<li>多行处理函数的特点：输入多行，最终输出一行。<ul>\n<li>count\t计数</li>\n<li>sum\t求和</li>\n<li>avg\t平均值</li>\n<li>max\t最大值</li>\n<li>min\t最小值</li>\n</ul>\n</li>\n<li>注意：<br>分组函数在使用的时候必须先进行分组，然后才能用。<br>如果你没有对数据进行分组，整张表默认为一组。</li>\n</ul>\n<p>\t</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">找出最高工资？\n\t\tmysql&gt; select max(sal) from emp;\n找出最低工资？\n\t\tmysql&gt; select min(sal) from emp;\n计算工资和：\n\t\tmysql&gt; select sum(sal) from emp;\n计算平均工资：\n\t\tmysql&gt; select avg(sal) from emp;\n计算员工数量？\n\t\tmysql&gt; select count(ename) from emp;</code></pre>\n\n<p><strong>分组函数在使用的时候需要注意哪些？</strong>\t</p>\n<ul>\n<li>第一点：分组函数自动忽略NULL，你不需要提前对NULL进行处理。</li>\n<li>第二点：分组函数中count(<em>)和count(具体字段)有什么区别？</em><ul>\n<li>count(具体字段)：表示统计该字段下所有不为NULL的元素的总数。</li>\n<li>count(*)：统计表当中的总行数。（只要有一行数据count则++）<br>            因为每一行记录不可能都为NULL，一行数据中有一列不为NULL，则这行数据就是有效的。</li>\n</ul>\n</li>\n<li>第三点：分组函数不能够直接使用在where子句中。<br>        找出比最低工资高的员工信息。<br>              select ename,sal from emp where sal &gt; min(sal);<br>              表面上没问题，运行一下？<br>                  ERROR 1111 (HY000): Invalid use of group function</li>\n</ul>\n<h2 id=\"5-分组查询\"><a href=\"#5-分组查询\" class=\"headerlink\" title=\"5.分组查询\"></a>5.分组查询</h2><h3 id=\"5-1-group-by\"><a href=\"#5-1-group-by\" class=\"headerlink\" title=\"5.1 group by\"></a>5.1 group by</h3><p><strong>找出每个工作岗位的工资和？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">\t实现思路：按照工作岗位分组，然后对工资求和。\n\t\tselect \n\t\t\tjob,sum(sal)\n\t\tfrom\n\t\t\temp\n\t\tgroup by\n\t\t\tjob;\n以上这个语句的执行顺序？\n先从emp表中查询数据。根据job字段进行分组。然后对每一组的数据进行sum(sal)</code></pre>\n\n<ul>\n<li>在一条select语句当中，如果有group by语句的话，select后面只能跟：<strong>参加分组的字段，以及</strong>分组函数。其它的一律不能跟。**</li>\n</ul>\n<p><strong>找出每个部门的最高薪资</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">实现思路:按照部门编号分组，求每一组的最大值。\n\tmysql&gt; select deptno,max(sal) from emp group by deptno;</code></pre>\n\n<h3 id=\"5-2-联合分组\"><a href=\"#5-2-联合分组\" class=\"headerlink\" title=\"5.2 联合分组\"></a>5.2 联合分组</h3><p><strong>找出“每个部门，不同工作岗位”的最高薪资？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">技巧：两个字段联合成1个字段看。（两个字段联合分组）\n\t\tselect \n\t\t\tdeptno, job, max(sal)\n\t\tfrom\n\t\t\temp\n\t\tgroup by\n\t\t\tdeptno, job;\n\n</code></pre>\n\n<h3 id=\"5-3having\"><a href=\"#5-3having\" class=\"headerlink\" title=\"5.3having\"></a>5.3having</h3><ul>\n<li><p>使用having可以对分完组之后的数据进一步过滤。</p>\n</li>\n<li><p>having不能单独使用，having不能代替where，having必须和group by联合使用。</p>\n</li>\n</ul>\n<p><strong>找出每个部门平均薪资，要求显示平均薪资高于2500的。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select \n\tdeptno,avg(sal) \nfrom \n\temp \ngroup by \n\tdeptno\nhaving\n\tavg(sal) &gt; 2500;</code></pre>\n\n<ul>\n<li>where和having，优先选择where，where实在完成不了了，再选择having。</li>\n</ul>\n<h3 id=\"5-4总结sql执行顺序\"><a href=\"#5-4总结sql执行顺序\" class=\"headerlink\" title=\"5.4总结sql执行顺序\"></a>5.4总结sql执行顺序</h3><ul>\n<li>select  –&gt; from –&gt; where –&gt; group by –&gt; having –&gt; order by –&gt;<br>以上关键字只能按照这个顺序来，不能颠倒。</li>\n</ul>\n<p>执行顺序？<br>    1. from –&gt; where –&gt; group by –&gt; having –&gt; select –&gt; order by</p>\n<ol>\n<li>从某张表中查询数据，</li>\n<li>先经过where条件筛选出有价值的数据。</li>\n<li>对这些有价值的数据进行分组。</li>\n<li>分组之后可以使用having继续筛选。</li>\n<li>select查询出来。</li>\n<li>最后排序输出！</li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除MANAGER岗位之外，\n要求按照平均薪资降序排。\n\tselect \n\t\tjob, avg(sal) as avgsal\n\tfrom\n\t\temp\n\twhere\n\t\tjob &lt;&gt; &#39;MANAGER&#39;\n\tgroup by\n\t\tjob\n\thaving\n\t\tavg(sal) &gt; 1500\n\torder by\n\t\tavgsal desc;</code></pre>\n\n<h2 id=\"6-连表查询\"><a href=\"#6-连表查询\" class=\"headerlink\" title=\"6.连表查询\"></a>6.连表查询</h2><ul>\n<li><p>从一张表中单独查询，称为单表查询</p>\n</li>\n<li><p>emp表和dept表联合起来查询数据，从emp表中取员工名字，从dept表中取部门名字。</p>\n</li>\n<li><p>这种跨表查询，多张表联合起来查询数据，被称为连接查询。</p>\n</li>\n</ul>\n<p>select ename,dname from emp, dept;</p>\n<ul>\n<li>当两张表进行连接查询，没有任何条件限制的时候，最终查询结果条数，是两张表条数的乘积，这种现象被称为：笛卡尔积现象。</li>\n</ul>\n<h3 id=\"6-1内连接之等值连接\"><a href=\"#6-1内连接之等值连接\" class=\"headerlink\" title=\"6.1内连接之等值连接\"></a>6.1内连接之等值连接</h3><p><strong>查询每个员工所在部门名称，显示员工名和部门名？</strong></p>\n<ul>\n<li>emp e和dept d表进行连接。条件是：e.deptno &#x3D; d.deptno</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SQL92语法：\n\tselect \n\t\te.ename,d.dname\n\tfrom\n\t\temp e, dept d\n\twhere\n\t\te.deptno &#x3D; d.deptno;\n\t\n\tsql92的缺点：结构不清晰，表的连接条件，和后期进一步筛选的条件，都放到了where后面。\n\t\nSQL99语法：\n\t&#x2F;&#x2F;inner可以省略（带着inner可读性更好！！！一眼就能看出来是内连接）\n\tselect \n\t\te.ename,d.dname\n\tfrom\n\t\temp e\n\tinner join\n\t\tdept d\n\ton\n\t\te.deptno &#x3D; d.deptno; &#x2F;&#x2F; 条件是等量关系，所以被称为等值连接。\n\tsql99优点：表连接的条件是独立的，连接之后，如果还需要进一步筛选，再往后继续添加where</code></pre>\n\n<h3 id=\"6-2内连接之非等值连接\"><a href=\"#6-2内连接之非等值连接\" class=\"headerlink\" title=\"6.2内连接之非等值连接\"></a>6.2内连接之非等值连接</h3><p><strong>找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select \n\te.ename, e.sal, s.grade\nfrom\n\temp e\njoin\n\tsalgrade s\non\n\te.sal between s.losal and s.hisal; &#x2F;&#x2F; 条件不是一个等量关系，称为非等值连接。</code></pre>\n\n<h3 id=\"6-3内连接自己连接\"><a href=\"#6-3内连接自己连接\" class=\"headerlink\" title=\"6.3内连接自己连接\"></a>6.3内连接自己连接</h3><p><strong>查询员工的上级领导，要求显示员工名和对应的领导名？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">技巧：一张表看成两张表。\nselect \n\ta.ename as &#39;员工名&#39;, b.ename as &#39;领导名&#39;\nfrom\n\temp a\njoin\n\temp b\non\n\ta.mgr &#x3D; b.empno; &#x2F;&#x2F;员工的领导编号 &#x3D; 领导的员工编号</code></pre>\n\n<h3 id=\"6-4外连接\"><a href=\"#6-4外连接\" class=\"headerlink\" title=\"6.4外连接\"></a>6.4外连接</h3><ul>\n<li><p>内连接：（A和B连接，AB两张表没有主次关系。平等的。）</p>\n</li>\n<li><p>内连接的特点：完成能够匹配上ON后面的条件的数据查询出来。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;&#x2F; outer是可以省略的，带着可读性强。\nselect \n\te.ename,d.dname\nfrom\n\temp e \nright outer join \n\tdept d\non\n\te.deptno &#x3D; d.deptno;</code></pre>\n\n<ul>\n<li>right代表什么：表示将join关键字右边的这张表看成主表，主要是为了将</li>\n<li>这张表的数据全部查询出来，捎带着关联查询左边的表。</li>\n<li>在外连接当中，两张表连接，产生了主次关系。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select \n\te.ename,d.dname\nfrom\n\tdept d \nleft outer join \n\temp e\non\n\te.deptno &#x3D; d.deptno;\n\n带有right的是右外连接，又叫做右连接。\n带有left的是左外连接，又叫做左连接。\n任何一个右连接都有左连接的写法。\n任何一个左连接都有右连接的写法。</code></pre>\n\n<h3 id=\"6-5多表连接\"><a href=\"#6-5多表连接\" class=\"headerlink\" title=\"6.5多表连接\"></a>6.5多表连接</h3><p><strong>三张表，四张表怎么连接？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">语法：\n\tselect \n\t\t...\n\tfrom\n\t\ta\n\tjoin\n\t\tb\n\ton\n\t\ta和b的连接条件\n\tjoin\n\t\tc\n\ton\n\t\ta和c的连接条件\n\tright join\n\t\td\n\ton\n\t\ta和d的连接条件</code></pre>\n\n<p><strong>找出每个员工的部门名称以及工资等级，要求显示员工名、部门名、薪资、薪资等级？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select \n\t\te.ename,e.sal,d.dname,s.grade\n\tfrom\n\t\temp e\n\tjoin\n\t\tdept d\n\ton \n\t\te.deptno &#x3D; d.deptno\n\tjoin\n\t\tsalgrade s\n\ton\n\t\te.sal between s.losal and s.hisal;</code></pre>\n\n<p><strong>找出每个员工的部门名称以及工资等级，还有上级领导，要求显示员工名、领导名、部门名、薪资、薪资等级？</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select \n\te.ename,e.sal,d.dname,s.grade,l.ename\nfrom\n\temp e\njoin\n\tdept d\non \n\te.deptno &#x3D; d.deptno\njoin\n\tsalgrade s\non\n\te.sal between s.losal and s.hisal\nleft join\n\temp l\non\n\te.mgr &#x3D; l.empno;</code></pre>\n\n<h2 id=\"7-子查询\"><a href=\"#7-子查询\" class=\"headerlink\" title=\"7.子查询\"></a>7.子查询</h2><ul>\n<li><p>select语句中嵌套select语句，被嵌套的select语句称为子查询。</p>\n</li>\n<li><p>子查询可以出现在 select后面，from 后面，where 后面。</p>\n</li>\n</ul>\n<h3 id=\"7-1where子句中的子查询\"><a href=\"#7-1where子句中的子查询\" class=\"headerlink\" title=\"7.1where子句中的子查询\"></a>7.1where子句中的子查询</h3><p><strong>找出比最低工资高的员工姓名和工资？</strong></p>\n<ul>\n<li>select ename,sal from emp where sal &gt; (select min(sal) from emp);</li>\n</ul>\n<h3 id=\"7-2from子句中的子查询\"><a href=\"#7-2from子句中的子查询\" class=\"headerlink\" title=\"7.2from子句中的子查询\"></a>7.2from子句中的子查询</h3><ul>\n<li>from后面的子查询，可以将子查询的查询结果当做一张临时表。（技巧）</li>\n</ul>\n<p><strong>找出每个岗位的平均工资的薪资等级。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select \n\t\t\tt.*, s.grade\n\t\tfrom\n\t\t\t(select job,avg(sal) as avgsal from emp group by job) t\n\t\tjoin\n\t\t\tsalgrade s\n\t\ton\n\t\t\tt.avgsal between s.losal and s.hisal;</code></pre>\n\n<h2 id=\"8-约束\"><a href=\"#8-约束\" class=\"headerlink\" title=\"8.约束\"></a>8.约束</h2><ul>\n<li>在创建表的时候，我们可以给表中的字段加上一些约束，来保证这个表中数据的完整性、有效性！！！</li>\n</ul>\n<h3 id=\"8-1约束类型\"><a href=\"#8-1约束类型\" class=\"headerlink\" title=\"8.1约束类型\"></a>8.1约束类型</h3><ul>\n<li>非空约束：not null</li>\n<li>唯一性约束: unique</li>\n<li>主键约束: primary key （简称PK）</li>\n<li>外键约束：foreign key（简称FK）</li>\n<li>检查约束：check（mysql不支持，oracle支持）</li>\n</ul>\n<p>我们这里重点学习四个约束：<strong>not null，unique，primary key，foreign key。</strong></p>\n<h3 id=\"8-2not-null\"><a href=\"#8-2not-null\" class=\"headerlink\" title=\"8.2not null\"></a>8.2not null</h3><ul>\n<li>非空约束not null约束的字段不能为NULL。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">drop table if exists t_vip;\n\tcreate table t_vip(\n\t\tid int,\n\t\tname varchar(255) not null  &#x2F;&#x2F; not null只有列级约束，没有表级约束！\n\t);\ninsert into t_vip(id,name) values(1,&#39;zhangsan&#39;);\n\ninsert into t_vip(id) values(3);\n\tERROR 1364 (HY000): Field &#39;name&#39; doesn&#39;t have a default value</code></pre>\n\n\n\n<h3 id=\"8-3unique\"><a href=\"#8-3unique\" class=\"headerlink\" title=\"8.3unique\"></a>8.3unique</h3><ul>\n<li>唯一性约束unique约束的字段不能重复，但是<strong>可以为NULL</strong>。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">drop table if exists t_vip;\ncreate table t_vip(\n\tid int,\n\tname varchar(255) unique,\n\temail varchar(255)\n);\ninsert into t_vip(id,name,email) values(2,&#39;lisi&#39;,&#39;lisi@123.com&#39;);\ninsert into t_vip(id,name,email) values(3,&#39;wangwu&#39;,&#39;wangwu@123.com&#39;);\nselect * from t_vip;\n\ninsert into t_vip(id,name,email) values(4,&#39;wangwu&#39;,&#39;wangwu@sina.com&#39;);\nERROR 1062 (23000): Duplicate entry &#39;wangwu&#39; for key &#39;name&#39;\n\ninsert into t_vip(id) values(4);\ninsert into t_vip(id) values(5);\n+------+----------+------------------+\n| id   | name     | email            |\n+------+----------+------------------+\n|    1 | zhangsan | zhangsan@123.com |\n|    2 | lisi     | lisi@123.com     |\n|    3 | wangwu   | wangwu@123.com   |\n|    4 | NULL     | NULL             |\n|    5 | NULL     | NULL             |\n+------+----------+------------------+\nname字段虽然被unique约束了，但是可以为NULL。</code></pre>\n\n<h4 id=\"8-3-1联合唯一\"><a href=\"#8-3-1联合唯一\" class=\"headerlink\" title=\"8.3.1联合唯一\"></a>8.3.1联合唯一</h4><ul>\n<li>name和email两个字段联合起来具有唯一性！！！！</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">drop table if exists t_vip;\ncreate table t_vip(\n\tid int,\n\tname varchar(255),\n\temail varchar(255),\n\tunique(name,email) &#x2F;&#x2F; 约束没有添加在列的后面，这种约束被称为表级约束。\n);\ninsert into t_vip(id,name,email) values(1,&#39;zhangsan&#39;,&#39;zhangsan@123.com&#39;);\ninsert into t_vip(id,name,email) values(2,&#39;zhangsan&#39;,&#39;zhangsan@sina.com&#39;);\n\tname和email两个字段联合起来唯一！！！\n\t\ninsert into t_vip(id,name,email) values(3,&#39;zhangsan&#39;,&#39;zhangsan@sina.com&#39;);\n\tERROR 1062 (23000): Duplicate entry &#39;zhangsan-zhangsan@sina.com&#39; for key &#39;name&#39;</code></pre>\n\n<ul>\n<li>在mysql当中，如果一个字段同时被not null和unique约束的话，该字段自动变成主键字段。（注意：oracle中不一样！）</li>\n</ul>\n<h3 id=\"8-4primary-key\"><a href=\"#8-4primary-key\" class=\"headerlink\" title=\"8.4primary key\"></a>8.4primary key</h3><ul>\n<li><p>主键值是每一行记录的唯一标识。主键值是每一行记录的身份证号！！！</p>\n</li>\n<li><p>主键的特征：not null + unique（主键值不能是NULL，同时也不能重复！）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">drop table if exists t_vip;\n\t\t&#x2F;&#x2F; 1个字段做主键，叫做：单一主键\n\t\tcreate table t_vip(\n\t\t\tid int primary key,  &#x2F;&#x2F;列级约束\n\t\t\tname varchar(255),\n            primary key(id)  &#x2F;&#x2F; 表级约束\n\t\t);\n\t\tinsert into t_vip(id,name) values(1,&#39;zhangsan&#39;);\n\t\tinsert into t_vip(id,name) values(2,&#39;lisi&#39;);\n\n\t\t&#x2F;&#x2F;错误：不能重复\n\t\tinsert into t_vip(id,name) values(2,&#39;wangwu&#39;);\n\t\tERROR 1062 (23000): Duplicate entry &#39;2&#39; for key &#39;PRIMARY&#39;\n\n\t\t&#x2F;&#x2F;错误：不能为NULL\n\t\tinsert into t_vip(name) values(&#39;zhaoliu&#39;);\n\t\tERROR 1364 (HY000): Field &#39;id&#39; doesn&#39;t have a default value</code></pre>\n\n<h4 id=\"8-4-1复合主键\"><a href=\"#8-4-1复合主键\" class=\"headerlink\" title=\"8.4.1复合主键\"></a>8.4.1复合主键</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">drop table if exists t_vip;\n\t\t&#x2F;&#x2F; id和name联合起来做主键：复合主键！！！！\n\t\tcreate table t_vip(\n\t\t\tid int,\n\t\t\tname varchar(255),\n\t\t\temail varchar(255),\n\t\t\tprimary key(id,name)\n\t\t);\ninsert into t_vip(id,name,email) values(1,&#39;zhangsan&#39;,&#39;zhangsan@123.com&#39;);\ninsert into t_vip(id,name,email) values(1,&#39;lisi&#39;,&#39;lisi@123.com&#39;);\n\n&#x2F;&#x2F;错误：不能重复\ninsert into t_vip(id,name,email) values(1,&#39;lisi&#39;,&#39;lisi@123.com&#39;);\n\tERROR 1062 (23000): Duplicate entry &#39;1-lisi&#39; for key &#39;PRIMARY&#39;</code></pre>\n\n<ul>\n<li>在实际开发中不建议使用：复合主键。建议使用单一主键！</li>\n<li>因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">一个表中主键约束能加两个吗？\n\t\tdrop table if exists t_vip;\n\t\tcreate table t_vip(\n\t\t\tid int primary key,\n\t\t\tname varchar(255) primary key\n\t\t);\n\t\tERROR 1068 (42000): Multiple primary key defined</code></pre>\n\n<ul>\n<li>结论：一张表，主键约束只能添加1个。（主键只能有1个。）</li>\n</ul>\n<p><strong>主键分类</strong></p>\n<ul>\n<li><p>自然主键：主键值是一个自然数，和业务没关系。</p>\n</li>\n<li><p>业务主键：主键值和业务紧密关联，例如拿银行卡账号做主键值。这就是业务主键！</p>\n</li>\n</ul>\n<h4 id=\"8-4-2主键自增\"><a href=\"#8-4-2主键自增\" class=\"headerlink\" title=\"8.4.2主键自增\"></a>8.4.2主键自增</h4><ul>\n<li>在mysql当中，有一种机制，可以帮助我们自动维护一个主键值</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">rop table if exists t_vip;\ncreate table t_vip(\n\tid int primary key auto_increment, &#x2F;&#x2F;auto_increment表示自增，从1开始，以1递增！\n\tname varchar(255)\n);\n\t\tinsert into t_vip(name) values(&#39;zhangsan&#39;);\n\t\tinsert into t_vip(name) values(&#39;zhangsan&#39;);\n\t\tinsert into t_vip(name) values(&#39;zhangsan&#39;);\n\t\tinsert into t_vip(name) values(&#39;zhangsan&#39;);\n\t\tinsert into t_vip(name) values(&#39;zhangsan&#39;);\n\t\tinsert into t_vip(name) values(&#39;zhangsan&#39;);\n\t\t\n\t\t+----+----------+\n\t\t| id | name     |\n\t\t+----+----------+\n\t\t|  1 | zhangsan |\n\t\t|  2 | zhangsan |\n\t\t|  3 | zhangsan |\n\t\t|  4 | zhangsan |\n\t\t|  5 | zhangsan |</code></pre>\n\n<h3 id=\"8-5foreign-key\"><a href=\"#8-5foreign-key\" class=\"headerlink\" title=\"8.5foreign key\"></a>8.5foreign key</h3><ul>\n<li>如果一个实体的某个字段指向另一个实体的主键，就称为外键</li>\n<li>被指向的实体，称之为主实体（主表），也叫父实体（父表）。</li>\n<li>负责指向的实体，称之为从实体（从表），也叫子实体（子表）</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">create table t_class(\n\tclassno int primary key,\n\tclassname varchar(255)\n);\ncreate table t_student(\n\tno int primary key auto_increment,\n\tname varchar(255),\n\tcno int,\n\tforeign key(cno) references t_class(classno)\n);\n\ninsert into t_class(classno, classname) values(100, &#39;北京市大兴区亦庄镇第二中学高三1班&#39;);\ninsert into t_class(classno, classname) values(101, &#39;北京市大兴区亦庄镇第二中学高三1班&#39;);\n\ninsert into t_student(name,cno) values(&#39;jack&#39;, 100);\ninsert into t_student(name,cno) values(&#39;lilei&#39;, 100);\ninsert into t_student(name,cno) values(&#39;hanmeimei&#39;, 100);\ninsert into t_student(name,cno) values(&#39;zhangsan&#39;, 101);\ninsert into t_student(name,cno) values(&#39;lisi&#39;, 101);</code></pre>\n\n<ul>\n<li>外键可以为空，可以理解成 一名学生肯定会关联到一个存在的班级，但来了一个转校生，还没有分班，他现在属于学生子表，但还没有关联到班级主表中的任何一条记录。</li>\n</ul>\n<p>t_class是父表，t_student是子表</p>\n<p>​\t\t<strong>删除表</strong>的顺序？\t先删子，再删父。</p>\n<p>​\t\t<strong>创建表</strong>的顺序？\t先创建父，再创建子。</p>\n<p>​\t\t<strong>删除数据</strong>的顺序？先删子，再删父。</p>\n<p>​\t\t<strong>插入数据</strong>的顺序？先插入父，再插入子</p>\n<ul>\n<li>子表中的外键引用的父表中的某个字段，被引用的这个字段不一定是主键，但至少具有unique约束。</li>\n</ul>\n<h2 id=\"9-存储引擎\"><a href=\"#9-存储引擎\" class=\"headerlink\" title=\"9.存储引擎\"></a>9.存储引擎</h2><ul>\n<li>存储引擎是MySQL中特有的一个术语，其它数据库中没有。（Oracle中有，但是不叫这个名字）</li>\n<li>实际上存储引擎是一个表存储&#x2F;组织数据的方式。</li>\n<li>不同的存储引擎，表存储数据的方式不同。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">show create table t_student;\n可以在建表的时候给表指定存储引擎。\nCREATE TABLE &#96;t_student&#96; (\n  &#96;no&#96; int(11) NOT NULL AUTO_INCREMENT,\n  &#96;name&#96; varchar(255) DEFAULT NULL,\n  &#96;cno&#96; int(11) DEFAULT NULL,\n  PRIMARY KEY (&#96;no&#96;),\n  KEY &#96;cno&#96; (&#96;cno&#96;),\n  CONSTRAINT &#96;t_student_ibfk_1&#96; FOREIGN KEY (&#96;cno&#96;) REFERENCES &#96;t_class&#96; (&#96;classno&#96;)\n) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;11 DEFAULT CHARSET&#x3D;utf8</code></pre>\n\n<p>在建表的时候可以在最后小括号的”)”的右边使用：</p>\n<ul>\n<li>ENGINE来指定存储引擎。\tmysql默认的存储引擎是：<strong>InnoDB</strong></li>\n<li>CHARSET来指定这张表的字符编码方式。mysql默认的字符编码方式是：<strong>utf8</strong></li>\n</ul>\n<h3 id=\"9-1mysql支持的存储引擎\"><a href=\"#9-1mysql支持的存储引擎\" class=\"headerlink\" title=\"9.1mysql支持的存储引擎\"></a>9.1mysql支持的存储引擎</h3><ul>\n<li>show engines \\G   查看mysql支持哪些存储引擎</li>\n<li>mysql支持九大存储引擎，当前5.5.36支持8个。版本不同支持情况不同。</li>\n</ul>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221115200404413.png\" alt=\"image-20221115200404413\"></p>\n<h3 id=\"9-2MyISAM存储引擎\"><a href=\"#9-2MyISAM存储引擎\" class=\"headerlink\" title=\"9.2MyISAM存储引擎\"></a>9.2MyISAM存储引擎</h3><ul>\n<li><p>使用三个文件表示每个表：</p>\n<ul>\n<li>格式文件 — 存储表结构的定义（mytable.frm）</li>\n<li>数据文件 — 存储表行的内容（mytable.MYD）</li>\n<li>索引文件 — 存储表上索引（mytable.MYI）：索引是一本书的目录，缩小扫描范围，提高查询效率的一种机制。</li>\n</ul>\n</li>\n<li><p>可被转换为压缩、只读表来节省空间</p>\n</li>\n<li><p>MyISAM存储引擎特点：</p>\n<ul>\n<li>可被转换为压缩、只读表来节省空间这是这种存储引擎的优势！！！！</li>\n<li>MyISAM不支持事务机制，安全性低。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"9-3InnoDB存储引擎\"><a href=\"#9-3InnoDB存储引擎\" class=\"headerlink\" title=\"9.3InnoDB存储引擎\"></a>9.3InnoDB存储引擎</h3><ul>\n<li><p>这是mysql默认的存储引擎，同时也是一个重量级的存储引擎。</p>\n</li>\n<li><p>InnoDB支持事务，支持数据库崩溃后自动恢复机制。</p>\n</li>\n<li><p>InnoDB存储引擎最主要的特点是：非常安全。</p>\n</li>\n<li><p>它管理的表具有下列主要特征：</p>\n<ul>\n<li>每个 InnoDB 表在数据库目录中以.frm 格式文件表示</li>\n<li>InnoDB 表空间 tablespace 被用于存储表的内容（表空间是一个逻辑名称。表空间存储数据+索引。）</li>\n<li>提供一组用来记录事务性活动的日志文件</li>\n<li>用 COMMIT(提交)、SAVEPOINT 及ROLLBACK(回滚)支持事务处理</li>\n<li>提供全 ACID 兼容</li>\n<li>在 MySQL 服务器崩溃后提供自动恢复</li>\n<li>多版本（MVCC）和行级锁定</li>\n<li>支持外键及引用的完整性，包括级联删除和更新</li>\n</ul>\n</li>\n<li><p>InnoDB最大的特点就是支持事务：以保证数据的安全。效率不是很高，并且也不能压缩，不能转换为只读，</p>\n</li>\n<li><p>不能很好的节省存储空间。</p>\n</li>\n</ul>\n<h3 id=\"9-4MEMORY存储引擎\"><a href=\"#9-4MEMORY存储引擎\" class=\"headerlink\" title=\"9.4MEMORY存储引擎\"></a>9.4MEMORY存储引擎</h3><ul>\n<li><p>使用 MEMORY 存储引擎的表，其数据存储在内存中，且行的长度固定，这两个特点使得 MEMORY 存储引擎非常<strong>快</strong>。</p>\n</li>\n<li><p>MEMORY 存储引擎管理的表具有下列特征：</p>\n<ul>\n<li>在数据库目录内，每个表均以.frm 格式的文件表示。</li>\n<li>表数据及索引被存储在内存中。（目的就是快，查询快！）</li>\n<li>表级锁机制。</li>\n<li>不能包含 TEXT 或 BLOB 字段。</li>\n</ul>\n</li>\n<li><p>MEMORY 存储引擎以前被称为HEAP 引擎。</p>\n</li>\n<li><p>MEMORY引擎优点：查询效率是最高的。不需要和硬盘交互。</p>\n</li>\n<li><p>MEMORY引擎缺点：不安全，关机之后数据消失。因为数据和索引都是在内存当中。</p>\n</li>\n</ul>\n<h2 id=\"10-事务\"><a href=\"#10-事务\" class=\"headerlink\" title=\"10.事务\"></a>10.事务</h2><ul>\n<li><p>一个事务其实就是一个完整的业务逻辑。是一个最小的工作单元。不可再分。</p>\n</li>\n<li><p>什么是一个完整的业务逻辑？<br>    假设转账，从A账户向B账户中转账10000.<br>      将A账户的钱减去10000（update语句）<br>      将B账户的钱加上10000（update语句）<br>      这就是一个完整的业务逻辑。</p>\n</li>\n<li><p>以上的操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。这两个update语句要求必须同时成功或者同时失败，这样才能保证钱是正确的。</p>\n</li>\n<li><p>insert   delete   update  只有以上的三个语句和事务有关系，其它都没有关系。</p>\n</li>\n<li><p>事务：就是<strong>批量的DML语句同时成功，或者同时失败！</strong></p>\n</li>\n</ul>\n<h3 id=\"10-1InnoDB实现事务\"><a href=\"#10-1InnoDB实现事务\" class=\"headerlink\" title=\"10.1InnoDB实现事务\"></a>10.1InnoDB实现事务</h3><ul>\n<li><p>InnoDB存储引擎：提供一组用来记录事务性活动的日志文件</p>\n</li>\n<li><p>在事务的执行过程中，每一条DML的操作都会记录到“事务性活动的日志文件”中。</p>\n</li>\n<li><p>在事务的执行过程中，<strong>我们可以提交事务，也可以回滚事务。</strong></p>\n</li>\n<li><p>提交事务   <strong>commit</strong>; 语句</p>\n<ul>\n<li>清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中。</li>\n<li>提交事务标志着，事务的结束。并且是一种全部成功的结束。</li>\n</ul>\n</li>\n<li><p>回滚事务  <strong>rollback</strong>; 语句（回滚永远都是只能回滚到上一次的<strong>提交点</strong>！）</p>\n<ul>\n<li>将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件</li>\n<li>回滚事务标志着，事务的结束。并且是一种全部失败的结束。</li>\n</ul>\n</li>\n<li><p>将mysql的自动提交机制<strong>关闭</strong>掉   start transaction;</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">事务回滚\n\tmysql&gt; select * from dept_bak;\n\t\tEmpty set (0.00 sec)\n\tmysql&gt; start transaction;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\tmysql&gt; insert into dept_bak values(10,&#39;abc&#39;, &#39;tj&#39;);\n\tQuery OK, 1 row affected (0.00 sec)\n\n\tmysql&gt; insert into dept_bak values(10,&#39;abc&#39;, &#39;tj&#39;);\n\tQuery OK, 1 row affected (0.00 sec)\n\n\tmysql&gt; select * from dept_bak;\n\t+--------+-------+------+\n\t| DEPTNO | DNAME | LOC  |\n\t+--------+-------+------+\n\t|     10 | abc   | tj   |\n\t|     10 | abc   | tj   |\n\t+--------+-------+------+\n\t2 rows in set (0.00 sec)\n\n\tmysql&gt; rollback;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\tmysql&gt; select * from dept_bak;\n\tEmpty set (0.00 sec)</code></pre>\n\n<h3 id=\"10-2事物的四个特性\"><a href=\"#10-2事物的四个特性\" class=\"headerlink\" title=\"10.2事物的四个特性\"></a>10.2事物的四个特性</h3><p><strong>A：原子性</strong><br>        说明事务是最小的工作单元。不可再分。</p>\n<p><strong>C：一致性</strong><br>    所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败，<br>    以保证数据的一致性。</p>\n<p><strong>I：隔离性</strong><br>    A事务和B事务之间具有一定的隔离。<br>    教室A和教室B之间有一道墙，这道墙就是隔离性。<br>    A事务在操作一张表的时候，另一个事务B也操作这张表会那样？？？</p>\n<p><strong>D：持久性</strong><br>    事务最终结束的一个保障。事务提交，就相当于将没有保存到硬盘上的数据<br>    保存到硬盘上！</p>\n<h3 id=\"10-3事务的隔离性\"><a href=\"#10-3事务的隔离性\" class=\"headerlink\" title=\"10.3事务的隔离性\"></a>10.3事务的隔离性</h3><h4 id=\"10-3-1事务和事务之间四个隔离级别\"><a href=\"#10-3-1事务和事务之间四个隔离级别\" class=\"headerlink\" title=\"10.3.1事务和事务之间四个隔离级别\"></a>10.3.1事务和事务之间四个隔离级别</h4><p><strong>读未提交：read uncommitted（最低的隔离级别）《没有提交就读到了》</strong></p>\n<ul>\n<li>事务A可以读取到事务B未提交的数据。</li>\n<li>这种隔离级别存在的问题就是：<strong>脏读现象</strong>！(Dirty Read)我们称读到了脏数据。</li>\n<li>这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步！</li>\n</ul>\n<p><strong>读已提交：read committed《提交之后才能读到》</strong></p>\n<ul>\n<li>事务A只能读取到事务B提交之后的数据。</li>\n<li>这种隔离级别解决了解决了脏读的现象。</li>\n<li>这种隔离级别不可重复读取数据。<ul>\n<li>在事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次再读取的时候，读到的数据是4条，3不等于4称为不可重复读取。</li>\n</ul>\n</li>\n<li>这种隔离级别是比较真实的数据，每一次读到的数据是绝对的真实。</li>\n<li>oracle数据库默认的隔离级别是：read committed</li>\n</ul>\n<p><strong>可重复读：repeatable read《提交之后也读不到，永远读取的都是刚开启事务时的数据》</strong></p>\n<ul>\n<li><p>事务A开启之后，不管是多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据已经修改，并且提交了，事务A读取到的数据还是没有发生改变，这就是可重复读。</p>\n</li>\n<li><p>可重复读可能会出现幻影读。每一次读取到的数据都是幻象。不够真实！</p>\n</li>\n<li><p>早晨9点开始开启了事务，只要事务不结束，到晚上9点，读到的数据还是那样！读到的是假象。不够绝对的真实。</p>\n</li>\n<li><p>mysql中默认的事务隔离级别就是这个！！！！！！！！！！！</p>\n</li>\n</ul>\n<p><strong>序列化&#x2F;串行化：serializable（最高的隔离级别）</strong></p>\n<ul>\n<li>这是最高隔离级别，效率最低。解决了所有的问题。</li>\n<li>这种隔离级别表示事务排队，不能并发！</li>\n<li>synchronized，线程同步（事务同步）每一次读取到的数据都是最真实的，并且效率是最低的。</li>\n</ul>\n<h4 id=\"10-3-2验证各种隔离级别\"><a href=\"#10-3-2验证各种隔离级别\" class=\"headerlink\" title=\"10.3.2验证各种隔离级别\"></a>10.3.2验证各种隔离级别</h4><ul>\n<li>mysql 5 查看隔离级别：SELECT @@tx_isolation</li>\n<li>mysql 8 查看隔离级别：select @@transaction_isolation;</li>\n</ul>\n<p><strong>验证：read uncommited</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql&gt; set global transaction isolation level read uncommitted;\n事务A\t\t\t\t\t\t\t\t\t\t\t\t\t事务B\n--------------------------------------------------------------------------------\nuse bjpowernode;\n\t\t\t\t\t\t\t\t\t\t\t\t\tuse bjpowernode;\nstart transaction;\nselect * from t_user;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart transaction;\n\t\t\t\t\t\t\t\t\t\t\t\t\tinsert into t_user values(&#39;zhangsan&#39;);\nselect * from t_user;</code></pre>\n\n<p><strong>验证：read commited</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql&gt; set global transaction isolation level read committed;\n事务A\t\t\t\t\t\t\t\t\t\t\t\t\t事务B\n--------------------------------------------------------------------------------\nuse bjpowernode;\n\t\t\t\t\t\t\t\t\t\t\t\t\tuse bjpowernode;\nstart transaction;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart transaction;\nselect * from t_user;\n\t\t\t\t\t\t\t\t\t\t\t\t\tinsert into t_user values(&#39;zhangsan&#39;);\nselect * from t_user;\n\t\t\t\t\t\t\t\t\t\t\t\t\tcommit;\nselect * from t_user;</code></pre>\n\n<p><strong>验证：repeatable read</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql&gt; set global transaction isolation level repeatable read;\n事务A\t\t\t\t\t\t\t\t\t\t\t\t\t事务B\n--------------------------------------------------------------------------------\nuse bjpowernode;\n\t\t\t\t\t\t\t\t\t\t\t\t\tuse bjpowernode;\nstart transaction;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart transaction;\nselect * from t_user;\n\t\t\t\t\t\t\t\t\t\t\t\t\tinsert into t_user values(&#39;lisi&#39;);\n\t\t\t\t\t\t\t\t\t\t\t\t\tinsert into t_user values(&#39;wangwu&#39;);\n\t\t\t\t\t\t\t\t\t\t\t\t\tcommit;\nselect * from t_user;</code></pre>\n\n<p><strong>验证：serializable</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql&gt; set global transaction isolation level serializable;\n事务A\t\t\t\t\t\t\t\t\t\t\t\t\t事务B\n--------------------------------------------------------------------------------\nuse bjpowernode;\n\t\t\t\t\t\t\t\t\t\t\t\t\tuse bjpowernode;\nstart transaction;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart transaction;\nselect * from t_user;\ninsert into t_user values(&#39;abc&#39;);</code></pre>\n\n<h2 id=\"11-索引\"><a href=\"#11-索引\" class=\"headerlink\" title=\"11.索引\"></a>11.索引</h2><ul>\n<li><p>索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。</p>\n</li>\n<li><p>一张表的一个字段可以添加一个索引，当然，多个字段联合起来也可以添加索引。</p>\n</li>\n<li><p>索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</p>\n</li>\n<li><p>MySQL在查询方面主要就是两种方式：全表扫描  ；根据索引检索。</p>\n</li>\n<li><p>在mysql数据库当中索引也是需要排序的，并且这个所以的排序和TreeSet</p>\n</li>\n<li><p><strong>数据结构相同。TreeSet（TreeMap）底层是一个自平衡的二叉树！在mysql当中索引是一个B-Tree数据结构。</strong></p>\n</li>\n<li><p><strong>遵循左小又大原则存放。采用中序遍历方式遍历取数据。</strong></p>\n</li>\n</ul>\n<p><strong>索引的实现原理？</strong></p>\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimage-20221115200424624.png\" alt=\"image-20221115200424624\"></p>\n<ul>\n<li>提醒1：在任何数据库当中主键上都会自动添加索引对象，id字段上自动有索引，因为id是PK。另外在mysql当中，一个字段上如果有unique约束的话，也会自动创建索引对象</li>\n<li>提醒2：在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号。</li>\n<li>提醒3：在mysql当中，索引是一个单独的对象，不同的存储引擎以不同的形式存在，在MyISAM存储引擎中，索引存储在一个.MYI文件中。在InnoDB存储引擎中索引存储在一个逻辑名称叫做tablespace的当中。在MEMORY存储引擎当中索引被存储在内存当中。不管索引存储在哪里，索引在mysql当中都是一个树的形式</li>\n</ul>\n<p><strong>什么条件下，我们会考虑给字段添加索引呢？</strong></p>\n<ol>\n<li>数据量庞大（到底有多么庞大算庞大，这个需要测试，因为每一个硬件环境不同）</li>\n<li>该字段经常出现在where的后面，以条件的形式存在，也就是说这个字段总是被扫描。</li>\n<li>该字段很少的DML(insert delete update)操作。（因为DML之后，索引需要重新排序。）</li>\n</ol>\n<ul>\n<li>建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。</li>\n<li>建议通过主键查询，建议通过unique约束的字段进行查询，效率是比较高的。</li>\n</ul>\n<h3 id=\"11-1索引的创建和删除\"><a href=\"#11-1索引的创建和删除\" class=\"headerlink\" title=\"11.1索引的创建和删除\"></a>11.1索引的创建和删除</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">创建索引：\n\tmysql&gt; create index emp_ename_index on emp(ename);\n\t给emp表的ename字段添加索引，起名：emp_ename_index\n删除索引：\n\tmysql&gt; drop index emp_ename_index on emp;\n\t将emp表上的emp_ename_index索引对象删除。\n\t\n\t\n\t查看一个SQL语句是否使用了索引进行检索？\n\tmysql&gt; explain select * from emp where ename &#x3D; &#39;KING&#39;;\n\t+----+-------------+-------+------+---------------+------+---------+--\n\t| id | select_type | table | type | possible_keys | key  | key_len | \n\t+----+-------------+-------+------+---------------+------+---------+-\n\t|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | \n\t+----+-------------+-------+------+---------------+------+---------+--\n\t扫描14条记录：说明没有使用索引。type&#x3D;ALL\n\n\tmysql&gt; create index emp_ename_index on emp(ename);\n\n\tmysql&gt; explain select * from emp where ename &#x3D; &#39;KING&#39;;\n\t+----+-------------+-------+------+-----------------+-----------------\n\t| id | select_type | table | type | possible_keys   | key             \n\t+----+-------------+-------+------+-----------------+-----------------\n\t|  1 | SIMPLE      | emp   | ref  | emp_ename_index | emp_ename_index \n\t+----+-------------+-------+------+-----------------+-----------------</code></pre>\n\n<h3 id=\"11-2索引失效\"><a href=\"#11-2索引失效\" class=\"headerlink\" title=\"11.2索引失效\"></a>11.2索引失效</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">失效的第1种情况：\n\tselect * from emp where ename like &#39;%T&#39;;\n\tename上即使添加了索引，也不会走索引，为什么？\n\t\t原因是因为模糊匹配当中以“%”开头了！\n\t\t尽量避免模糊查询的时候以“%”开始。\n\t\t这是一种优化的手段&#x2F;策略。\n\tmyql&gt; explain select * from emp where ename like &#39;%T&#39;;\n\t+----+-------------+-------+------+---------------+------+---------+--\n\t| id | select_type | table | type | possible_keys | key  | key_len | \n\t+----+-------------+-------+------+---------------+------+---------+--\n\t|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | \n\t+----+-------------+-------+------+---------------+------+---------+--\n\n失效的第2种情况：\n\t使用or的时候会失效，如果使用or那么要求or两边的条件字段都要有\n\t索引，才会走索引，如果其中一边有一个字段没有索引，那么另一个\n\t字段上的索引也会实现。所以这就是为什么不建议使用or的原因。\n\n\tmysql&gt; explain select * from emp where ename &#x3D; &#39;KING&#39; or job &#x3D; &#39;MANAGER&#39;;\n\t+----+-------------+-------+------+-----------------+------+---------\n\t| id | select_type | table | type | possible_keys   | key  | key_len | \n\t+----+-------------+-------+------+-----------------+------+---------\n\t|  1 | SIMPLE      | emp   | ALL  | emp_ename_index | NULL | NULL    | \n\t+----+-------------+-------+------+-----------------+------+---------\n\n失效的第3种情况：\n\t使用复合索引的时候，没有使用左侧的列查找，索引失效\n\t什么是复合索引？\n\t\t两个字段，或者更多的字段联合起来添加一个索引，叫做复合索引。\n\t\n\tcreate index emp_job_sal_index on emp(job,sal);\n\t\n\tmysql&gt; explain select * from emp where job &#x3D; &#39;MANAGER&#39;;\n\t+----+-------------+-------+------+-------------------+---------------\n\t| id | select_type | table | type | possible_keys     | key           \n\t+----+-------------+-------+------+-------------------+---------------\n\t|  1 | SIMPLE      | emp   | ref  | emp_job_sal_index | \n\t+----+-------------+-------+------+-------------------+---------------\n\t\n\tmysql&gt; explain select * from emp where sal &#x3D; 800;\n\t+----+-------------+-------+------+---------------+------+---------+--\n\t| id | select_type | table | type | possible_keys | key  | key_len | \n\t+----+-------------+-------+------+---------------+------+---------+--\n\t|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | \n\t+----+-------------+-------+------+---------------+------+---------+--</code></pre>\n\n<h2 id=\"12-视图\"><a href=\"#12-视图\" class=\"headerlink\" title=\"12.视图\"></a>12.视图</h2><ul>\n<li>视图view:站在不同的角度去看待同一份数据。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">表复制：\n\tmysql&gt; create table dept2 as select * from dept;\ndept2表中的数据：\n\tmysql&gt; select * from dept2;\n+--------+------------+----------+\n| DEPTNO | DNAME      | LOC      |\n+--------+------------+----------+\n|     10 | ACCOUNTING | NEW YORK |\n|     20 | RESEARCH   | DALLAS   |\n|     30 | SALES      | CHICAGO  |\n|     40 | OPERATIONS | BOSTON   |\n+--------+------------+----------+\n\n创建视图对象：\n\tcreate view dept2_view as select * from dept2;\n\n删除视图对象：\n\tdrop view dept2_view;\n\n注意：只有DQL语句才能以view的形式创建。\n\tcreate view view_name as 这里的语句必须是DQL语句;</code></pre>\n\n<h3 id=\"12-1视图的作用\"><a href=\"#12-1视图的作用\" class=\"headerlink\" title=\"12.1视图的作用\"></a>12.1视图的作用</h3><ul>\n<li>我们可以面向视图对象进行增删改查，对视图对象的增删改查，会导致原表被操作！（视图的特点：通过对视图的操作，会影响到原表数据。）</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;&#x2F;面向视图查询\nselect * from dept2_view; \n\n&#x2F;&#x2F; 面向视图插入\ninsert into dept2_view(deptno,dname,loc) values(60,&#39;SALES&#39;, &#39;BEIJING&#39;);\n\n&#x2F;&#x2F; 查询原表数据\nmysql&gt; select * from dept2;\n+--------+------------+----------+\n| DEPTNO | DNAME      | LOC      |\n+--------+------------+----------+\n|     10 | ACCOUNTING | NEW YORK |\n|     20 | RESEARCH   | DALLAS   |\n|     30 | SALES      | CHICAGO  |\n|     40 | OPERATIONS | BOSTON   |\n|     60 | SALES      | BEIJING  |\n+--------+------------+----------+\n\n&#x2F;&#x2F; 面向视图删除\nmysql&gt; delete from dept2_view;\n\n&#x2F;&#x2F; 查询原表数据\nmysql&gt; select * from dept2;\nEmpty set (0.00 sec)\n&#x2F;&#x2F; 创建视图对象\ncreate view \n\temp_dept_view\nas\n\tselect \n\t\te.ename,e.sal,d.dname\n\tfrom\n\t\temp e\n\tjoin\n\t\tdept d\n\ton\n\t\te.deptno &#x3D; d.deptno;\n\n&#x2F;&#x2F; 查询视图对象\nmysql&gt; select * from emp_dept_view;\n+--------+---------+------------+\n| ename  | sal     | dname      |\n+--------+---------+------------+\n| CLARK  | 2450.00 | ACCOUNTING |\n| KING   | 5000.00 | ACCOUNTING |\n| MILLER | 1300.00 | ACCOUNTING |\n| SMITH  |  800.00 | RESEARCH   |\n| JONES  | 2975.00 | RESEARCH   |\n| SCOTT  | 3000.00 | RESEARCH   |\n| ADAMS  | 1100.00 | RESEARCH   |\n| FORD   | 3000.00 | RESEARCH   |\n| ALLEN  | 1600.00 | SALES      |\n| WARD   | 1250.00 | SALES      |\n| MARTIN | 1250.00 | SALES      |\n| BLAKE  | 2850.00 | SALES      |\n| TURNER | 1500.00 | SALES      |\n| JAMES  |  950.00 | SALES      |\n+--------+---------+------------+\n\n&#x2F;&#x2F; 面向视图更新\nupdate emp_dept_view set sal &#x3D; 1000 where dname &#x3D; &#39;ACCOUNTING&#39;;\n\n&#x2F;&#x2F; 原表数据被更新\nmysql&gt; select * from emp;\n+-------+--------+-----------+------+------------+---------+---------+----\n| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | \n+-------+--------+-----------+------+------------+---------+---------+----\n|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     \n|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     \n|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     \n|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     \n|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     \n|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     \n|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 1000.00 |    NULL |     \n|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     \n|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 1000.00 |    NULL |     \n|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     \n|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     \n|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     \n|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     \n|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1000.00 |    NULL |     \n+-------+--------+-----------+------+------------+---------+---------+----</code></pre>\n\n<h3 id=\"12-2视图在开发中的作用\"><a href=\"#12-2视图在开发中的作用\" class=\"headerlink\" title=\"12.2视图在开发中的作用\"></a>12.2视图在开发中的作用</h3><ul>\n<li><p>假设有一条非常复杂的SQL语句，而这条SQL语句需要在不同的位置上反复使用。<br>每一次使用这个sql语句的时候都需要重新编写，很长，很麻烦，怎么办？<br>    可以把这条复杂的SQL语句以视图对象的形式新建。<br>    在需要编写这条SQL语句的位置直接使用视图对象，可以大大简化开发。<br>    并且利于后期的维护，因为修改的时候也只需要修改一个位置就行，只需要<br>    修改视图对象所映射的SQL语句。</p>\n</li>\n<li><p>我们以后面向视图开发的时候，使用视图的时候可以像使用table一样。</p>\n</li>\n<li><p>可以对视图进行增删改查等操作。*<em><strong>视图不是在内存当中，视图对象也是</strong>存储在硬盘上的，不会消失。</em>*</p>\n</li>\n</ul>\n<h2 id=\"13-数据库三范式\"><a href=\"#13-数据库三范式\" class=\"headerlink\" title=\"13.数据库三范式\"></a>13.数据库三范式</h2><p><strong>第一范式</strong>：要求任何一张表必须有主键，每一个字段原子性不可再分。</p>\n<p><strong>第二范式</strong>：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，<br>不要产生部分依赖。</p>\n<p><strong>第三范式</strong>：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，<br>不要产生传递依赖。</p>\n<ul>\n<li>声明：三范式是面试官经常问的，所以一定要熟记在心！</li>\n</ul>\n<p>设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</p>\n<h3 id=\"13-1第一范式\"><a href=\"#13-1第一范式\" class=\"headerlink\" title=\"13.1第一范式\"></a>13.1第一范式</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">学生编号 学生姓名 联系方式\n\t------------------------------------------\n\t1001\t\t张三\t\tzs@gmail.com,1359999999\n\t1002\t\t李四\t\tls@gmail.com,13699999999\n\t1001\t\t王五\t\tww@163.net,13488888888\n\t\n以上是学生表，满足第一范式吗？\n\t不满足，第一：没有主键。第二：联系方式可以分为邮箱地址和电话\n\n学生编号(pk) 学生姓名\t邮箱地址\t\t\t联系电话\n----------------------------------------------------\n1001\t\t\t\t张三\t\tzs@gmail.com\t1359999999\n1002\t\t\t\t李四\t\tls@gmail.com\t13699999999\n1003\t\t\t\t王五\t\tww@163.net\t\t13488888888</code></pre>\n\n<h3 id=\"13-2第二范式\"><a href=\"#13-2第二范式\" class=\"headerlink\" title=\"13.2第二范式\"></a>13.2第二范式</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">\t学生编号 \t\t学生姓名 \t教师编号 教师姓名\n\t----------------------------------------------------\n\t1001\t\t\t张三\t\t001\t\t王老师\n\t1002\t\t\t李四\t\t002\t\t赵老师\n\t1003\t\t\t王五\t\t001\t\t王老师\n\t1001\t\t\t张三\t\t002\t\t赵老师\n这张表描述了学生和老师的关系：（1个学生可能有多个老师，1个老师有多个学生）\n这是非常典型的：多对多关系！\n\n分析以上的表是否满足第一范式？\n\t不满足第一范式。\n\n怎么满足第一范式呢？修改\n\n学生编号+教师编号(pk)\t\t学生姓名  教师姓名\n----------------------------------------------------\n1001\t\t\t001\t\t\t\t张三\t\t\t王老师\n1002\t\t\t002\t\t\t\t李四\t\t\t赵老师\n1003\t\t\t001\t\t\t\t王五\t\t\t王老师\n1001\t\t\t002\t\t\t\t张三\t\t\t赵老师\n\n学生编号 教师编号，两个字段联合做主键，复合主键（PK: 学生编号+教师编号）\n经过修改之后，以上的表满足了第一范式。但是满足第二范式吗？\n\t不满足，“张三”依赖1001，“王老师”依赖001，显然产生了部分依赖。\n\t产生部分依赖有什么缺点？\n\t\t数据冗余了。空间浪费了。“张三”重复了，“王老师”重复了。\n\n为了让以上的表满足第二范式，你需要这样设计：\n\t使用三张表来表示多对多的关系！！！！\n\t学生表\n\t学生编号(pk)\t\t学生名字\n\t------------------------------------\n\t1001\t\t\t\t\t张三\n\t1002\t\t\t\t\t李四\n\t1003\t\t\t\t\t王五\n\t\n\t教师表\n\t教师编号(pk)\t\t教师姓名\n\t--------------------------------------\n\t001\t\t\t\t\t王老师\n\t002\t\t\t\t\t赵老师\n\n\t学生教师关系表\n\tid(pk)\t\t\t学生编号(fk)\t\t\t教师编号(fk)\n\t------------------------------------------------------\n\t1\t\t\t\t\t\t1001\t\t\t\t\t\t001\n\t2\t\t\t\t\t\t1002\t\t\t\t\t\t002\n\t3\t\t\t\t\t\t1003\t\t\t\t\t\t001\n\t4\t\t\t\t\t\t1001\t\t\t\t\t\t002</code></pre>\n\n<ul>\n<li>多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</li>\n</ul>\n<h3 id=\"13-3第三范式\"><a href=\"#13-3第三范式\" class=\"headerlink\" title=\"13.3第三范式\"></a>13.3第三范式</h3><p>​\t</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">\t学生编号（PK） \t\t\t学生姓名  班级编号  \t班级名称\n---------------------------------------------------------\n\n​\t\t1001\t\t\t\t张三\t\t01\t\t\t一年一班\n​\t\t1002\t\t\t\t李四\t\t02\t\t\t一年二班\n​\t\t1003\t\t\t\t王五\t\t03\t\t\t一年三班\n​\t\t1004\t\t\t\t赵六\t\t03\t\t\t一年三班\n\n以上表的设计是描述：班级和学生的关系。很显然是1对多关系！\n一个教室中有多个学生。\n\n分析以上表是否满足第一范式？\n\t满足第一范式，有主键。\n\n分析以上表是否满足第二范式？\n\t满足第二范式，因为主键不是复合主键，没有产生部分依赖。主键是单一主键。\n\n分析以上表是否满足第三范式？\n\t第三范式要求：不要产生传递依赖！\n\t一年一班依赖01，01依赖1001，产生了传递依赖。\n\t不符合第三范式的要求。产生了数据的冗余。\n\n那么应该怎么设计一对多呢？\n\n\t班级表：一\n\t班级编号(pk)\t\t\t\t班级名称\n\t----------------------------------------\n\t01\t\t\t\t\t\t\t\t一年一班\n\t02\t\t\t\t\t\t\t\t一年二班\n\t03\t\t\t\t\t\t\t\t一年三班\n\n\t学生表：多\n\n\t学生编号（PK） 学生姓名 班级编号(fk)\n\t-------------------------------------------\n\t1001\t\t\t\t张三\t\t\t01\t\t\t\n\t1002\t\t\t\t李四\t\t\t02\t\t\t\n\t1003\t\t\t\t王五\t\t\t03\t\t\t\n\t1004\t\t\t\t赵六\t\t\t03\t\t</code></pre>\n\n<ul>\n<li>一对多，两张表，多的表加外键！！！！！！！！！！！！</li>\n</ul>\n<p><strong>关于三范式的实际使用</strong></p>\n<p>数据库设计三范式是理论上的，实践和理论有的时候有偏差。</p>\n<p>最终的目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。</p>\n<p>因为在sql当中，表和表之间连接次数越多，效率越低。（笛卡尔积）</p>\n<p>有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，并且对于开发人员来说，sql语句的编写难度也会降低。</p>\n<p>面试的时候把这句话说上：他就不会认为你是初级程序员了！</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>在线笔记都是引用别人的笔记，保存下来方便自己学习，如有侵权请联系我删除</strong></p>\n<p>原文：<a href=\"https://gitee.com/yueliu2345/mysql\">https://gitee.com/yueliu2345/mysql</a></p></blockquote>\n","text":"mysql0.数据库常见概念0.1概念数据库： 英文单词DataBase，简称DB。按照一定格式存储数据的一些文件的组合。 顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了 具有特定格式的数据。 数据库管理系统： DataBaseManagement，简称DBMS。...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"在线笔记","slug":"在线笔记","count":3,"path":"api/categories/在线笔记.json"}],"tags":[{"name":"数据库安全","slug":"数据库安全","count":3,"path":"api/tags/数据库安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#mysql\"><span class=\"toc-text\">mysql</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E8%A7%81%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">0.数据库常见概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0-1%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">0.1概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0-2-SQL%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">0.2 SQL语句分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0-3MYSQL%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">0.3MYSQL中的数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0-4SQL%E8%84%9A%E6%9C%AC%E7%9A%84%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">0.4SQL脚本的执行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0-5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">0.5数据库和表的导入导出</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">1.数据库操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BB%BA%E8%A1%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.建表操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A1%A8create\"><span class=\"toc-text\">2.1创建一个表create</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E8%A1%A8drop\"><span class=\"toc-text\">2.2删除一个表drop</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AEinsert\"><span class=\"toc-text\">2.3插入数据insert</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AEupdate\"><span class=\"toc-text\">2.4修改数据update</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">2.5删除数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-1delete\"><span class=\"toc-text\">2.5.1delete</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-2truncate\"><span class=\"toc-text\">2.5.2truncate</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%9F%BA%E7%A1%80%E5%A2%9E%E5%88%A0%E6%94%B9\"><span class=\"toc-text\">3.基础增删改</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.单表查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1%E5%9F%BA%E7%A1%80%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.1基础条件查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">3.2排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">3.3分页</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.1单行处理函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.2分组函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">5.分组查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-group-by\"><span class=\"toc-text\">5.1 group by</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E8%81%94%E5%90%88%E5%88%86%E7%BB%84\"><span class=\"toc-text\">5.2 联合分组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3having\"><span class=\"toc-text\">5.3having</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4%E6%80%BB%E7%BB%93sql%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">5.4总结sql执行顺序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">6.连表查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1%E5%86%85%E8%BF%9E%E6%8E%A5%E4%B9%8B%E7%AD%89%E5%80%BC%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">6.1内连接之等值连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2%E5%86%85%E8%BF%9E%E6%8E%A5%E4%B9%8B%E9%9D%9E%E7%AD%89%E5%80%BC%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">6.2内连接之非等值连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3%E5%86%85%E8%BF%9E%E6%8E%A5%E8%87%AA%E5%B7%B1%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">6.3内连接自己连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4%E5%A4%96%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">6.4外连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-5%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">6.5多表连接</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">7.子查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1where%E5%AD%90%E5%8F%A5%E4%B8%AD%E7%9A%84%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">7.1where子句中的子查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2from%E5%AD%90%E5%8F%A5%E4%B8%AD%E7%9A%84%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">7.2from子句中的子查询</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">8.约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">8.1约束类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2not-null\"><span class=\"toc-text\">8.2not null</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3unique\"><span class=\"toc-text\">8.3unique</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-1%E8%81%94%E5%90%88%E5%94%AF%E4%B8%80\"><span class=\"toc-text\">8.3.1联合唯一</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-4primary-key\"><span class=\"toc-text\">8.4primary key</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-1%E5%A4%8D%E5%90%88%E4%B8%BB%E9%94%AE\"><span class=\"toc-text\">8.4.1复合主键</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-2%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E\"><span class=\"toc-text\">8.4.2主键自增</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-5foreign-key\"><span class=\"toc-text\">8.5foreign key</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">9.存储引擎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-1mysql%E6%94%AF%E6%8C%81%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">9.1mysql支持的存储引擎</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-2MyISAM%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">9.2MyISAM存储引擎</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-3InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">9.3InnoDB存储引擎</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-4MEMORY%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">9.4MEMORY存储引擎</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">10.事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1InnoDB%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">10.1InnoDB实现事务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2%E4%BA%8B%E7%89%A9%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">10.2事物的四个特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-3%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E6%80%A7\"><span class=\"toc-text\">10.3事务的隔离性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-3-1%E4%BA%8B%E5%8A%A1%E5%92%8C%E4%BA%8B%E5%8A%A1%E4%B9%8B%E9%97%B4%E5%9B%9B%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">10.3.1事务和事务之间四个隔离级别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-3-2%E9%AA%8C%E8%AF%81%E5%90%84%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">10.3.2验证各种隔离级别</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">11.索引</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-1%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">11.1索引的创建和删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-2%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">11.2索引失效</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">12.视图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-1%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">12.1视图的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-2%E8%A7%86%E5%9B%BE%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">12.2视图在开发中的作用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">13.数据库三范式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-1%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">13.1第一范式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-2%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">13.2第二范式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-3%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">13.3第三范式</span></a></li></ol></li></ol></li></ol>","author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"php弱类型比较以及绕过","uid":"ce536701181d097db34a6f82f02496a3","slug":"php弱类型比较及绕过","date":"2023-01-10T13:21:22.708Z","updated":"2022-11-20T05:14:15.887Z","comments":true,"path":"api/articles/php弱类型比较及绕过.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora0432a40b6ab749f8ae473d5c7e9ce12a.jpg","text":"PHP中的弱类型比较php是一种弱类型语言，对数据的类型要求并不严格，可以让数据类型互相转换 0.强类型与弱类型强类型 •所谓强类型(Strongly typed)，顾名思义就是强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":28,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"php","slug":"php","count":5,"path":"api/tags/php.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}},"next_post":{"title":"MYSQL在线笔记2","uid":"ed24fbd407825b2a3a3f1a7f074c200e","slug":"MySQL2","date":"2023-01-10T13:21:22.691Z","updated":"2023-01-14T13:37:03.349Z","comments":true,"path":"api/articles/MySQL2.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorab39772daca5448d7a16eb2f2b554030a.png","text":"基础篇通用语法及分类 DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段） DML: 数据操作语言，用来对数据库表中的数据进行增删改 DQL: 数据查询语言，用来查询数据库中表的记录 DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限 DDL（数据定义语言...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"在线笔记","slug":"在线笔记","count":3,"path":"api/categories/在线笔记.json"}],"tags":[{"name":"数据库安全","slug":"数据库安全","count":3,"path":"api/tags/数据库安全.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}}}