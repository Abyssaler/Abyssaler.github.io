{"title":"浅析命令执行漏洞","uid":"266dd7a9ffe02e836b26a1bdfda91c39","slug":"命令执行漏洞","date":"2023-01-10T13:21:22.723Z","updated":"2023-02-08T02:02:04.335Z","comments":true,"path":"api/articles/命令执行漏洞.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-vgd6lm_1920x1080.png","content":"<h2 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h2><p>命令执行漏洞是指服务器没有对执行的命令进行过滤，用户可以随意执行系统命令，命令执行漏洞属于高危漏洞之一<br>如PHP的命令执行漏洞主要是基于一些函数的参数过滤不足导致，可以执行命令的函数有**system( )、exec( )、shell_exec( )、passthru( )、pcntl_execl( )、popen( )、proc_open( )**等，当攻击者可以控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击<br><strong>PHP执行命令是继承WebServer用户的权限，这个用户一般都有权限向Web目录写文件，可见该漏洞的危害性相当大</strong></p>\n<h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>应用程序有时需要调用一些执行系统命令的函数,如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_popen等函数可以执行系统命令，当黑客能控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行漏洞</p>\n<h2 id=\"常见危险函数\"><a href=\"#常见危险函数\" class=\"headerlink\" title=\"常见危险函数\"></a>常见危险函数</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">php代码相关\neval()\nassert()\npreg_replace\ncall_user_func()\ncall_user_func_array()\ncreate_function\narray_map()\n\n系统命令执行相关\nsystem()\npassthru()\nexec()\npcntl_exec()\nshell_exec()\npopen()\nproc_open()\n&#96;(反单引号)\nob_start()\n\n特殊函数\nphpinfo()\n#这个文件里面包含了PHP的编译选项，启动的扩展、版本、服务器配置信息、环境变量、操作系统信息、path变量等非常重要的敏感配置信息\nsymlink()：\n#一般是在linux服务器上使用的，为一个目标建立一个连接，在读取这个链接所连接的文件的内容，并返回内容\ngetenv\n#获取一个环境变量的值\nputenv($a)\n#添加$a到服务器环境变量，但环境变量仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态</code></pre>\n\n\n\n<h2 id=\"危险函数\"><a href=\"#危险函数\" class=\"headerlink\" title=\"危险函数:\"></a>危险函数:</h2><h3 id=\"system\"><a href=\"#system\" class=\"headerlink\" title=\"system\"></a>system</h3><p>system — 执行外部程序，并且显示输出</p>\n<p>该函数会把执行结果输出<br>并把输出结果的最后一行作为字符串返回<br>如果执行失败则返回false<br>这个也最为常用</p>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">system(string $command, int &amp;$result_code &#x3D; null): string|false</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">同 C 版本的 system() 函数一样，本函数执行 command 参数所指定的命令，并且输出执行结果。\n如果 PHP 运行在服务器模块中，system() 函数还会尝试在每行输出完毕之后，自动刷新 web 服务器的输出缓存。\n如果要获取一个命令未经任何处理的原始输出，请使用 passthru() 函数。</code></pre>\n\n<p><strong>参数</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">command\n要执行的命令。\n\nresult_code\n如果提供 result_code 参数，则外部命令执行后的返回状态将会被设置到此变量中</code></pre>\n\n<p><strong>返回值</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">成功则返回命令输出的最后一行，失败则返回 false</code></pre>\n\n<p><strong>例子</strong></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\necho &#39;&lt;pre&gt;&#39;;\n\n&#x2F;&#x2F; 输出 shell 命令 &quot;ls&quot; 的返回结果\n&#x2F;&#x2F; 并且将输出的最后一样内容返回到 $last_line。\n&#x2F;&#x2F; 将命令的返回值保存到 $retval。\n$last_line &#x3D; system(&#39;ls&#39;, $retval);\n\n&#x2F;&#x2F; 打印更多信息\necho &#39;\n&lt;&#x2F;pre&gt;\n&lt;hr &#x2F;&gt;Last line of the output: &#39; . $last_line . &#39;\n&lt;hr &#x2F;&gt;Return value: &#39; . $retval;\n?&gt;</code></pre>\n\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h3><p>exec — 执行一个外部程序</p>\n<p>不输出结果<br>返回执行结果的最后一行<br>可以使用output进行输出</p>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">exec(string $command, array &amp;$output &#x3D; null, int &amp;$result_code &#x3D; null): string|false\n&#x2F;&#x2F;exec() 执行 command 参数所指定的命令。    </code></pre>\n\n<p><strong>参数</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">command\n要执行的命令。\n\noutput\n如果提供了 output 参数， 那么会用命令执行的输出填充此数组， 每行输出填充数组中的一个元素。 数组中的数据不包含行尾的空白字符，例如 \\n 字符。 请注意，如果数组中已经包含了部分元素，exec() 函数会在数组末尾追加内容。如果你不想在数组末尾进行追加， 请在传入 exec() 函数之前 对数组使用 unset() 函数进行重置。\n\nresult_code\n如果同时提供 output 和 result_code 参数，命令执行后的返回状态会被写入到此变量。</code></pre>\n\n<p><strong>返回值</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">命令执行结果的最后一行内容。 如果你需要获取未经处理的全部输出数据， 请使用 passthru() 函数。\n\n失败时返回 false。\n\n如果想要获取命令的输出内容， 请确保使用 output 参数。</code></pre>\n\n<p><strong>例子</strong></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\n&#x2F;&#x2F; 输出运行中的 php&#x2F;httpd 进程的创建者用户名\n&#x2F;&#x2F; （在可以执行 &quot;whoami&quot; 命令的系统上）\n$output&#x3D;null;\n$retval&#x3D;null;\nexec(&#39;whoami&#39;, $output, $retval);\necho &quot;Returned with status $retval and output:\\n&quot;;\nprint_r($output);\n?&gt;\n    \n输出:\nReturned with status 0 and output:\nArray\n(\n    [0] &#x3D;&gt; cmb\n)</code></pre>\n\n<h3 id=\"passthru\"><a href=\"#passthru\" class=\"headerlink\" title=\"passthru\"></a>passthru</h3><p>passthru — 执行外部程序并且显示原始输出</p>\n<p>此函数只调用命令<br>并把运行结果原样地直接输出<br>没有返回值。</p>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">passthru(string $command, int &amp;$result_code &#x3D; null): ?bool</code></pre>\n\n<p>同 <a href=\"https://www.php.net/manual/zh/function.exec.php\">exec()</a> 函数类似， <strong>passthru()</strong> 函数 也是用来执行外部命令（<code>command</code>）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 <a href=\"https://www.php.net/manual/zh/function.exec.php\">exec()</a> 或 <a href=\"https://www.php.net/manual/zh/function.system.php\">system()</a> 函数。 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 <code>image/gif</code>， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。</p>\n<p><strong>参数</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">command\n要执行的命令。\n\nresult_code\n如果提供 result_code 参数， Unix 命令的返回状态会被记录到此参数</code></pre>\n\n<p><strong>返回值</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">成功时返回 null， 或者在失败时返回 false。</code></pre>\n\n<p><strong>例子</strong></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\nhighlight_file(__FILE__);\npassthru(&#39;ls&#39;);\n?&gt;</code></pre>\n\n<h3 id=\"shell-exec\"><a href=\"#shell-exec\" class=\"headerlink\" title=\"shell_exec\"></a>shell_exec</h3><p>shell_exec — 通过 shell 执行命令并将完整的输出以字符串的方式返回</p>\n<p>不输出结果，返回执行结果<br>使用反引号(&#96;&#96;)时调用的就是此函数</p>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">shell_exec(string $command): string|false|null</code></pre>\n\n<p><strong>参数</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">command\n要执行的命令。</code></pre>\n\n<p><strong>返回值</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">string 包含已执行命令的输出，如果无法建立管道，则为 false，如果发生错误或者命令不产生输出则为 null\n\n注意:当进程执行过程中发生错误，或者进程不产生输出的情况下，都会返回 null。使用本函数无法检测执行是否成功。当需要访问程序退出代码时，应使用 exec()。</code></pre>\n\n<p><strong>例子</strong></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\n$output &#x3D; shell_exec(&#39;ls -lart&#39;);\necho &quot;&lt;pre&gt;$output&lt;&#x2F;pre&gt;&quot;;\n?&gt;</code></pre>\n\n\n\n<h2 id=\"命令连接符\"><a href=\"#命令连接符\" class=\"headerlink\" title=\"命令连接符\"></a>命令连接符</h2><h3 id=\"windows系统\"><a href=\"#windows系统\" class=\"headerlink\" title=\"windows系统\"></a>windows系统</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">“|”：直接执行后面的语句\n例如：ping www.baidu.com|whoami</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typora20210528082504931.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">“||”：如果前面执行的语句执行出错，则执行后面的语句\n例如：png www.baidu.com||whoami</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typora20210528082607434.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">“&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假\n例如：png www.baidu.com&amp;whoami或者ping www.baidu.com&amp;whoami</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typoraimage-20221201002944212.png\" alt=\"image-20221201002944212\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">“&amp;&amp;”：如果前面的语句为真先执行第一个命令后执行第二个命令；为假则直接出错，也不执行后面的语句\n例如：ping www.baidu.com&amp;&amp;whoami png www.baidu.com&amp;&amp;whoami</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typoraimage-20221201003001512.png\" alt=\"image-20221201003001512\"></p>\n<h3 id=\"Linux系统\"><a href=\"#Linux系统\" class=\"headerlink\" title=\"Linux系统\"></a>Linux系统</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">“；”执行完前面的命令执行后面的</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typoraimage-20221201003033493.png\" alt=\"image-20221201003033493\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">“|”：在linux中，管道符是“|”，主要用于将两个或者多个命令连接到一起，把一个命令的输出作为下一个命令的输入；语法“command1 | command2 [ | commandN... ]”，“|”符左边命令的输出会作为“|”符右边命令的输入。</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typoraimage-20221201003055218.png\" alt=\"image-20221201003055218\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">“||”：当前面的语句执行出错时，执行后面的语句</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typoraimage-20221201003110978.png\" alt=\"image-20221201003110978\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">“&amp;”：如果前面的语句为假，则直接指向后面的语句，前面的语句可真可假</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typoraimage-20221201003140444.png\" alt=\"image-20221201003140444\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句</code></pre>\n\n<p><img src=\"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typoraimg_for_typoraimage-20221201003158699.png\" alt=\"image-20221201003158699\"></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p><code>netstat -ano</code>：查看所有进程<br>（1）netstat –ano|findstr [指定端口号]：该命令查看哪个程序或进程占用了端口</p>\n<p><code>tasklist</code>：列出所有任务及进程号<br>（1）tasklist|findstr [进程名称]：找到进程名称对应的详细信息，例如PID</p>\n<p><code>taskkill</code>：杀进程<br>（1）强制结束进程，按名称：taskkill &#x2F;f &#x2F;im notepad.exe（关闭记事本）<br>（2）强制结束进程，按 PID：taskkill &#x2F;f &#x2F;pid 1234（关闭 PID 为 1234 的进程）</p>\n<p><code>--help或/?</code>：查看帮助信息</p>\n<p><code>cd</code>：切换目录</p>\n<p><code>D:</code>：跳转到其他硬盘</p>\n<p><code>ping</code>：测试IP</p>\n<p><code>ipconfig</code>：查看网络详情，类似于linux的ifconfig</p>\n<p><code>dir</code>：显示目录中的文件内容，类似于linux的ls</p>\n<p><code>type</code>：查看文件，类似于linux的cat、less、more；用法：type 文件名</p>\n<p><code>md</code>：创建文件夹，类似于linux的mkdir；用法：md 目录名</p>\n<p><code>tree</code>：查看目录结构</p>\n<p><code>tracert</code>：路由跟踪，确定IP数据包访问目标时所选择的路径；用法：tracert 域名或IP</p>\n<p><code>copy</code>：复制文本文件；用法：copy 文件1 文件2<br>注：<br>参数&#x2F;b指定以二进制格式复制、合并文件，用于图像类&#x2F;声音类文件<br>参数&#x2F;a指定以ASCII格式复制、合并文件，用于txt等文档类文件<br>图片马制作：copy x.jpg&#x2F;b + x.php&#x2F;a xx.jpg</p>\n<p><code>net start</code> 服务名；net stop 服务名</p>\n<p><code>cls</code>：清空cmd命令行，类似于linux的clear</p>\n<p><code>ctrl+C</code>：结束或退出cmd正在执行的脚本</p>\n<p><code>find</code>：查找<br>find &#x2F;c “所要搜索的文件所包含的字符串” 文件的绝对路径</p>\n<p><code>for</code>：对一个或一组文件，字符串或命令结果中的每一个对象执行特定命令<br>（1）找出C盘下的所有文件，并将所有文件名都输出出来<br><code>for /r C: %i in (*) do @echo %i</code><br>（2）找出C盘下所有后缀是.txt的文件，并将其输出<br><code>for /r C: %i in (*.txt) do @echo %i</code><br>（3）找出C盘下所有后缀是.txt和.jpg的文件，并将其输出<br><code>for /r C: %i in (*.txt,*.jpg) do @echo %i</code></p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><p><code>cd</code>：切换当前工作目录；用法：cd后面加目录<br>（1）cd &#x2F;root：进入&#x2F;root 目录<br>（2）cd …&#x2F;：返回上一级目录<br>（3）cd .&#x2F;：进入当前目录</p>\n<p><code>ls</code>：显示指定工作目录下的内容；用法：ls 文件或目录<br>（1）ls：.&#x2F; 查看当前目录所有的文件和目录<br>（2）ls -l：以长格式显示目录下的内容列表<br>（3）ls -a：查看所有的文件，包括隐藏文件，以.开头的文件</p>\n<p><code>cp</code>：拷贝文件；用法：cp 要复制的文件 目标路径<br>（1）cp xx.txt &#x2F;home&#x2F;backup.txt ，拷贝文件至&#x2F;home目录下并且重命名为bak.txt<br>（2） cp xx –r &#x2F;home：拷贝xx目录到&#x2F;home目录下</p>\n<p><code>cat</code>：查看文件内容；用法：cat 文件绝对路径<br>（1）cat test.txt：查看test.txt文件内容</p>\n<p><code>echo</code>：回显；用法：输入什么就打印什么<br>（1）echo hello</p>\n<p><code>&gt;</code>：表示追加覆盖；常见用法echo world &gt; test.txt</p>\n<p><code>&gt;&gt;</code>：表示追加；常见用法echo world &gt;&gt; test.txt</p>\n<p><code>find</code>：查找指定文件；用法：find 目录 -name 文件<br>（1）find &#x2F;home -name “*.txt” ：查找&#x2F;home目录下，所有以.txt 结尾的文件或者目录。</p>\n<p><code>groupadd</code>：创建组；用法：groupadd 组名；注：在&#x2F;etc&#x2F;group中查看组名；注：将某用户加入root用户组：usermod –g root 用户名</p>\n<p><code>groupdel</code>：删除组；用法：groupdel 组名</p>\n<p><code>grep</code>：用于查找文件里符合条件的字符串；用法：grep 参数 目标<br>-r：指定要查找目标的是目录而非文件时使用<br>-n：显示具体行数<br>–include：指定后缀文件<br>（1）grep -rn “eval“ target：搜索target目标(目录&#x2F;文件)中是否含有eval的文件，并且确定在所含有的文件中是第几行<br>（2）grep -rn –include&#x3D;‘*.php’ ‘eval(’ target：搜索target目标(目录&#x2F;文件)中是否含有eval的文件(注：这里是指定只搜索.php后缀的文件)，并<br>且确定在所含有的文件中是第几行</p>\n<p><code>head</code>：默认查看文件前10行内容；用法：head 文件名；如果查看前20行，用法：head -20 文件名</p>\n<p><code>tail</code>：默认查看文件后10行内容；用法：tail 文件名，如果查看后20行，用法：tail -20 文件名</p>\n<p><code>more或less</code>：分页查看文件内容；用法：more 文件名或less 文件名<br>注：cat 和 more 同时使用例如： cat test.txt |more 分页显示 text 内容，|符号是管道符，用于把|前的输出作为后面命令的输入</p>\n<p><code>useradd</code>：创建用户；用法：useradd 用户名，注：在&#x2F;etc&#x2F;passwd中可查看<br>（1）将用户添加到指定组中： useradd -g 组名 用户</p>\n<p><code>userdel</code>：删除用户；用法：userdel 用户名</p>\n<p><code>passwd</code>： 设置密码；passwd 用户名，不加用户名默认修改当前用户</p>\n<p><code>vi</code>：修改文件（命令行模式、文本输入模式、末行模式），vi或vim打开一个文件，首先是命令行模式，然后按 i 进入文本输入模式，可以<br>在文件里写入字符等信息。写完后，按 esc 进入命令模式，然后输入:进入末行模式，例如输入 :wq 表示保存退出。如果想直接退出，不<br>保存，可以执行 :q ， 如果无法退出可以使用 q! 强制退出。</p>\n<p><code>id</code>：显示用户的ID，以及所属群组的ID</p>\n<p><code>ifconfig</code>：显示网络详情</p>\n<p><code>netstat</code>：显示网络状态<br>netstat –anplt：查看所有tcp端口<br>netstat –anplu：查看所有udp端口</p>\n<p><code>kill</code>：删除执行中的程序或工作<br>kill -9：强制执行</p>\n<p><code>ping</code>：检测主机；用法：ping ip</p>\n<p><code>ps</code>：显示当前进程的状态，类似于 windows 的任务管理器</p>\n<p><code>reboot</code>：重启；用法：reboot -f（强制重启）</p>\n<p><code>su</code>：切换用户；用法：su 用户名</p>\n<p><code>sudo</code>：使用root用户执行命令；用法：sudo 命令</p>\n<p><code>uname</code>：显示系统信息；用法：uname –a（显示系统详细信息）</p>\n<p><code>whoami</code>：显示自身用户名称</p>\n<p><code>--help</code>：命令使用详情查询；用法：命令 –help</p>\n<p><code>clear</code>：清空命令行</p>\n<p><code>pwd</code>：显示当前所在的目录</p>\n<p><code>mkdir</code>：创建目录；用法：mkdir 目录名</p>\n<p><code>rmdir</code>：删除空目录，非空不可删除；用法：rmdir 空目录名称</p>\n<p><code>rm</code>：删除文件或者目录，用法：rm –rf 文件名或目录 (-r 表示递归，-f 表示强制)</p>\n<p><code>touch</code>：创建文件；用法：touch 文件名，如果文件存在，则修改当前文件时间，文件内容不变</p>\n<p><code>mv</code>：重命名或者移动文件&#x2F;目录；用法： mv 原文件名 新文件名 或 mv 原文件位置 新文件位置</p>\n<p><code>chmod</code>：修改文件或目录的权限<br>chmod u+x 目录&#x2F;文件：给该目录&#x2F;文件所有者赋予执行权限<br>chmod ug-x 目录&#x2F;文件：给该目录&#x2F;文件所有者和组用户减去执行权限<br>chmod 777 目录&#x2F;文件：给该目录&#x2F;文件所有者、组用户、其他用户赋予所有权限<br>chmod 764 目录&#x2F;文件：给该目录&#x2F;文件所有者赋予全部权限，组用户赋予读写权限，其他用户赋予读权限</p>\n<p><code>scp</code>：复制文件和目录<br>（1）从本地复制到远程<br>scp local_file remote_username@remote_ip:remote_folder<br>或者<br>scp local_file remote_username@remote_ip:remote_file<br>（2）从远程复制到本地<br>scp remote_username@remote_ip:remote_folder local_file<br>或者<br>scp remote_username@remote_ip:remote_file local_file</p>\n<p>部分文章内容和图片应用自:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://blog.csdn.net/weixin_44604541/article/details/109558036\">https://blog.csdn.net/weixin_44604541/article/details/109558036</a></p>\n<p><a href=\"https://blog.csdn.net/LYJ20010728/article/details/117349106\">https://blog.csdn.net/LYJ20010728/article/details/117349106</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41617034/article/details/115583211\">https://blog.csdn.net/qq_41617034/article/details/115583211</a><br>感谢这几位师傅了</p></blockquote>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","text":"漏洞描述命令执行漏洞是指服务器没有对执行的命令进行过滤，用户可以随意执行系统命令，命令执行漏洞属于高危漏洞之一如PHP的命令执行漏洞主要是基于一些函数的参数过滤不足导致，可以执行命令的函数有**system( )、exec( )、shell_exec( )、passthru( )...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":28,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"漏洞","slug":"漏洞","count":5,"path":"api/tags/漏洞.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">漏洞描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">漏洞原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常见危险函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">危险函数:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#system\"><span class=\"toc-text\">system</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#exec\"><span class=\"toc-text\">exec</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#passthru\"><span class=\"toc-text\">passthru</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#shell-exec\"><span class=\"toc-text\">shell_exec</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E8%BF%9E%E6%8E%A5%E7%AC%A6\"><span class=\"toc-text\">命令连接符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#windows%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">windows系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Linux%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">Linux系统</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">常用命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Windows\"><span class=\"toc-text\">Windows</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Linux\"><span class=\"toc-text\">Linux</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol>","author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"中间件漏洞","uid":"9ca6f9d849950348e5ffe49b9724c767","slug":"中间件漏洞","date":"2023-01-10T13:21:22.723Z","updated":"2022-11-30T16:57:58.862Z","comments":true,"path":"api/articles/中间件漏洞.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora1289175.jpg","text":"IIS简介IIS（Internet Information Services），互联网信息服务，由微软公司提供的可扩展web服务器，支 持HTTP、HTTP&#x2F;2、HTTPS等。起初用于Windows NT系列，随后内置在Windows 2000、Windows XP和后...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":28,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"漏洞","slug":"漏洞","count":5,"path":"api/tags/漏洞.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}},"next_post":{"title":"如何为浏览器配置Burp Suite代理","uid":"d689efbf93d434acdbec39ba18988ad9","slug":"如何为各浏览器配置Burp Suite代理","date":"2023-01-10T13:21:22.723Z","updated":"2022-12-01T05:32:15.383Z","comments":true,"path":"api/articles/如何为各浏览器配置Burp Suite代理.json","keywords":null,"cover":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typorawallhaven-zyggly_1920x1080.png","text":"如何为各浏览器配置Burp Suite代理首先需要确定你的burp suite是否配置好了代理 如图，这里我是配置好了 Google配置安装Proxy SwitchyOmega插件 插件配置新建一个burp suite模式 配置参数，注意这里要与你burp suite配置中的一致...","link":"","photos":[],"count_time":{"symbolsCount":315,"symbolsTime":"1 mins."},"categories":[{"name":"环境配置","slug":"环境配置","count":4,"path":"api/categories/环境配置.json"}],"tags":[{"name":"工具","slug":"工具","count":3,"path":"api/tags/工具.json"}],"author":{"name":"Abyssaler","slug":"blog-author","avatar":"https://abyssaler-typora-photobank.oss-cn-chengdu.aliyuncs.com/img_for_typora/Face.jpg","link":"/","description":"道阻且长，行则将至","socials":{"github":"https://github.com/Abyssaler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}}}o":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_45349299","juejin":"","customs":{}}}}}