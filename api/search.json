[{"id":"1a613abcdf9c626b905ba0d768be1622","title":"ctf笔记之wake_php","content":"源码：\n&lt;?php\nhighlight_file(__FILE__);\n    include(&quot;password.php&quot;);\n    if(isset($_POST[&#39;password&#39;]))\n    &#123;\n        if(strcmp($_POST[&#39;password&#39;],$password) &#x3D;&#x3D; 0)\n        &#123;\n            $a &#x3D; $_REQUEST[&#39;a&#39;];\n            if(is_numeric($a))&#123;\n                die(&quot;Oh No&quot;);\n            &#125;\n            switch($a)&#123;\n                case 0:\n                    echo &quot;NONONO&quot;;\n                    break;\n                case 1:\n                    echo &quot;You are hacker&quot;;\n                    break;\n                case 2:\n                    echo file_get_contents(&quot;&#x2F;flag&quot;);\n                    break;\n                default:\n                    echo &quot;123&quot;;\n            &#125;\n        &#125;\n        else\n        &#123;\n            die(&quot;what&#39;s a shame&quot;);\n        &#125;\n    &#125;\n?&gt;\n\n\n\n思路​\t首先分析源码得知:\n\n我们要从password.php页面中得到password和a的值\n把通过post传参过来的password值和$password变量做比较,让strcmp函数的值&#x3D;0,进入下一步\n要让is_numeric($a)判为false\n要让case判断$a为2\n\n思路分析完了,来看看具体的实现\nStrcmp()函数漏洞这个漏洞要php5.3之前的版本才有\nstrcmp漏洞\n首先来看一下函数\nint strcmp ( string $str1 , string $str2 )\n\n\n\n这个函数是用于比较字符串的函数\nnt strcmp ( string $str1 , string $str2 )参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0；如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。\n例子1:\n&lt;?php\necho strcmp(&quot;Hello world!&quot;,&quot;Hello world!&quot;); &#x2F;&#x2F; 两字符串相等  &#x2F;&#x2F;0\necho strcmp(&quot;Hello world!&quot;,&quot;Hello&quot;); &#x2F;&#x2F; string1 大于 string2  &#x2F;&#x2F;7\necho strcmp(&quot;Hello world!&quot;,&quot;Hello world! Hello!&quot;); &#x2F;&#x2F; string1 小于 string2  &#x2F;&#x2F;-7\n?&gt;\n\n\n\n例子2:\n证明这个函数区分大小写\n&lt;?php\necho strcmp(&quot;Hello&quot;,&quot;Hello&quot;); &#x2F;&#x2F;0\necho &quot;&lt;br&gt;&quot;;\necho strcmp(&quot;Hello&quot;,&quot;hELLo&quot;); &#x2F;&#x2F;-1\n?&gt;\n\n\n\n​\t可以看出这个函数传入的期望类型是字符串类型的数据，但是如果我们传入非字符串类型的数据的时候，这个函数将会有怎么样的行为呢？实际上，当这个函数接受到了不符合的类型，这个函数将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，将return 0 !!!! 也就是虽然报了错，但却判定其相等了。这对于使用这个函数来做选择语句中的判断的代码来说简直是一个致命的漏洞，当然，php官方在后面的版本中修复了这个漏洞，使得报错的时候函数不返回任何值。但是我们仍然可以使用这个漏洞对使用老版本php的网站进行渗透测试。\n解题思路if(strcmp($_POST[&#39;password&#39;],$password) &#x3D;&#x3D; 0)\n\n\n\n对于这段代码，我们能用什么办法绕过验证呢， 只要我们$_POST[‘password’]是一个数组或者一个object即可，但是上一个问题的时候说到过，只能上传字符串类型，那我们又该如何做呢\n其实php为了可以上传一个数组，会把结尾带一对中括号的变量，例如 xxx[]的name（就是$_POST中的key)\n要想这条语句判为真,我们需要在password.php页面构造password为一个数组数组传值为1，而strcmp要求我们传入字符串 strcmp函数判断不是字符串会报错，但是会return0 所以我们的目的达到了\n因为初学,一开始以为数组要这样构建,怎么都拿不到flag..\n\n经过询问朋友得知正确构造方式\n\n\n最后终于成功\n但是还是遇到了几个不解的地方,后来都解决了,这里写出来方便自己以后回忆\nphp中is_numeric函数的绕过$a &#x3D; $_REQUEST[&#39;a&#39;];\n            if(is_numeric($a))&#123;\n                die(&quot;Oh No&quot;);\n            &#125;\n            switch($a)&#123;\n                case 0:\n                    echo &quot;NONONO&quot;;\n                    break;\n                case 1:\n                    echo &quot;You are hacker&quot;;\n                    break;\n                case 2:\n                    echo file_get_contents(&quot;&#x2F;flag&quot;);\n                    break;\n                default:\n                    echo &quot;123&quot;;\n            &#125;\n\n\n\n看到这段代码我思考了很久(因为php基础不好),这里需要让 if(is_numeric($a))这个函数判false才能继续执行,而 is_numeric() 函数会判断如果是数字和数字字符串则返回 TRUE，否则返回 FALSE,所以这里出现了一个矛盾点**,$a不能等于2,不然无法执行,但是下面的条件语句又需要case $a为case 2**,基础不好的我陷入混乱\n查找资料的过程中发现了is_numeric()这个函数的绕过;\n$j &#x3D; $_POST[j];\nis_numeric($j)?die(&quot;&lt;br&#x2F;&gt;not is numeric &lt;br&#x2F;&gt;fail 10&quot;):NULL; \nif($j &gt; 1314)&#123;\necho &quot;&lt;br&#x2F;&gt;pass 10&quot;;&#125;\n\n\n\n方法一利用数组+十六进制来进行绕过\nj[]&#x3D;58B\n\n方法二is_ numeric() 判断变量是否为数字或数字字符串,不仅检查10进制，16进制是可以。is_ numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值,而%20空格字符只能放在数值后。所以,查看函数发现该函数对对于第-个空格字符会跳过空格字符判断,接着后面的判断!\nj&#x3D;1315%20\nj&#x3D;1315%00\n\n方法三php中当一个其他数据类型和数值类型的数据比较大小时，会先将其他数据类型转换成数值类型，这里输入类似9999a数据也可绕过\nj&#x3D;9999a\n\n\n\ncase语法特性讲到这里就还有最后一个问题了\n为什么$a&#x3D;2a但是在switch中case 2是true?\n在使用 switch 语句时应该注意以下几点：\n\n和 if 语句不同的是，switch 语句后面表达式的数据类型只能是整型或字符串，不能是 bool 型。通常这个表达式是一个变量名称，虽然 PHP 是弱类型语言，在 switch 后面表达式的变量可以是任意类型数据，但为了保证匹配执行的准确性，最好只使用整型或字符串中的一种类型。\n和 if 语句不同的是，switch 语句后面的花括号是必须有的。\ncase 语句的个数没有规定，可以无限增加。但 case 标签和 case 标签后面的值之间应该有一个空格，值后面必须有一个冒号，这是语法的一部分。\nswitch 匹配完成以后，将依次逐条执行匹配的分支模块中的语句，直到 switch 结构结束或者遇到了 break 语句才停止执行。所以，如果一个分支语句的后面没有写上 break 语句，程序将会继续执行下一个分支语句的内容。\n与 if 语句中的 else 类似，switch 语句中 default 标签直接在后面加上一个冒号，看似没有条件，其实是有条件的，条件就是“表达式”的值不能与前面任何一个 case 标签后的值相等，这时才执行 default 分支中的语句。default 标签和 if 中的 else 子句一样，它不是 switch 语句中必需的，可以省略。\n\n\n原来case还有这个讲究\n","slug":"ctf之wake_php","date":"2023-01-12T02:23:01.428Z","categories_index":"CTF","tags_index":"php,writeup","author_index":"Abyssaler"},{"id":"b97648e041829a6ba4fa127fa718e3d4","title":"CTFhub之web安全","content":"1.文件上传之双写后缀\n双写绕过原理：\n服务端对黑名单中的内容进行处理，且仅处理一次，所以可以通过双写后缀绕过．如，黑名单中有＂php＂字样，上传文件名为＂1.php＂ 上传后文件变成＂1.＂．\n如果直接上传111.php的话，会过滤后缀\n\n想到用burp suite抓包改后缀\n\n如图，一开始我想改成111.phpphp，想只过滤一次的话还剩一个php就成功了，结果被无情打脸\n\n后来得知服务端会对后缀名中所有的php进行过滤，所以修改思路\n\n改成这个样子\n服务端就只会过滤.pphphp中间的php，剩下的就是111.php了\n\n最后用蚁剑连接\n\n找到flag\n\n2.文件上传之00截断前置知识:\n\n\n\n\n\n\n\n\n文件上传漏洞“%00截断”绕过讲解”:https://www.fujieace.com/penetration-test/file-upload-00.html\n原理：如果是白名单检测的话，我们可以采用00截断绕过。00截断利用的是php的一个漏洞。在 php&lt;5.3.4 版本中，存储文件时处理文件名的函数认为0x00是终止符。于是在存储文件的时候，当函数读到 0x00(%00) 时，会认为文件已经结束。\n例如：我们上传 1.php%00.jpg 时，首先后缀名是合法的jpg格式，可以绕过前端的检测。上传到后端后，后端判断文件名后缀的函数会认为其是一个.jpg格式的文件，可以躲过白名单检测。但是在保存文件时，保存文件时处理文件名的函数在遇到%00字符认为这是终止符，于是丢弃后面的 .jpg，于是我们上传的 1.php%00.jpg 文件最终会被写入 1.php 文件中并存储在服务端。\n直接看题\n这里直接上传一句话木马文件会显示文件类型不匹配\n\n按F12打开开发者工具查看源代码，发现白名单\n分析源代码\nif (!empty($_POST[&#39;submit&#39;])) &#123;\n    $name &#x3D; basename($_FILES[&#39;file&#39;][&#39;name&#39;]);\n    $info &#x3D; pathinfo($name);\n    $ext &#x3D; $info[&#39;extension&#39;];\n    $whitelist &#x3D; array(&quot;jpg&quot;, &quot;png&quot;, &quot;gif&quot;);\n    if (in_array($ext, $whitelist)) &#123;\n        $des &#x3D; $_GET[&#39;road&#39;] . &quot;&#x2F;&quot; . rand(10, 99) . date(&quot;YmdHis&quot;) . &quot;.&quot; . $ext;\n        if (move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], $des)) &#123;\n            echo &quot;&lt;script&gt;alert(&#39;上传成功&#39;)&lt;&#x2F;script&gt;&quot;;\n        &#125; else &#123;\n            echo &quot;&lt;script&gt;alert(&#39;上传失败&#39;)&lt;&#x2F;script&gt;&quot;;\n        &#125;\n    &#125; else &#123;\n        echo &quot;文件类型不匹配&quot;;\n    &#125;\n&#125;\n\n\n$_FILES 解释（搬自php手册）\n$_FILES 数组内容如下:\n\n$_FILES[‘myFile’][‘name’] 客户端文件的原名称。\n\n$_FILES[‘myFile’][‘type’] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如&quot;image&#x2F;gif&quot;。\n\n$_FILES[‘myFile’][‘size’] 已上传文件的大小，单位为字节。\n\n$_FILES[‘myFile’][‘tmp_name’] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在 php.ini 的 upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。\n\n$_FILES[‘myFile’][‘error’] 和该文件上传相关的错误代码。[‘error’] 是在 PHP 4.2.0 版本中增加的。下面是它的说明：(它们在 PHP 4.3.0 之后变成了 PHP 常量。)\n\nbasename() 函数：返回路径中的文件名部分。\n$_name 是上传的文件名加后缀\n$_ext 得到的就是后缀名\n重点就在 $des这个变量\n得到的完整路径是 GET[‘road’]+随机数+日期加前面获得的后缀名\n————————————————\n版权声明：本文为CSDN博主「林一不是01」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_45785288&#x2F;article&#x2F;details&#x2F;108412899\n\nburp抓包后我们可以看见\n\n通过题目提示，此题可以用00截断来实现绕过上传验证，所以直接上传一个PHP一句话木马文件，在请求的时候开启抓包，修改\n\n根据之前的题目。我们可以判断出我们上传的文件摆放在upload目录下面。我们直接用蚁剑连接就行\n\n\n3.文件上传之MIME绕过前置知识:MIME概述：​\tMIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n​\t它是一个互联网标准，扩展了电子邮件标准，使其能够支持：\n​\t非ASCII字符文本；非文本格式附件（二进制、声音、图像等）；由多部分（multiple parts）组成的消息体；包含非ASCII字符的头信息（Header information）。\n\n\n\n\n\n\n\n\n\nMIME详解:\nhttps://www.runoob.com/http/mime-types.html\n什么是MIME类型校验​\tMIME类型校验就是我们在上传文件到服务端的时候，服务端会对客户端也就是我们上传的文件的Content-Type类型进行检测，如果是白名单所允许的，则可以正常上传，否则上传失败。\n开始做题:\n还是直接上传一个一句话木马,发现文件不匹配\n\n通过开发者工具也没找到白名单\n\n试着上传一个jpg文件,提示上传成功,证明白名单中有jpg\n\n将木马伪装成jpg上传再通过bp改文件后缀\n\n上传成功了\n还有第二种办法\n既然题目提示了是MIME绕过,那就用修改Content-Type类型的方法来试试\n\n首先通过查询得知jpeg文件的MIME类型是image&#x2F;jpeg\n\n如图,上传的是php文件,通过在bp中修改Content-Type为image&#x2F;jpeg来绕过\n\n接下来就是常规操作了\n\n\n4.文件上传漏洞之.htaccess前置知识:\n\n\n\n\n\n\n\n\n.htaccess详解\nhttps://cloud.tencent.com/developer/article/1824057\n什么是.htaccess？​\t.htaccess（超文本访问）是许多Web服务器根据目录应用设置的有用文件，允许在运行时覆盖Apache服务器的默认配置。使用.htaccess，我们可以在运行时轻松启用或禁用任何功能。通过htaccess文件，可以帮助我们实现：网页301重定向，自定义404错误页面，改变文件扩展名，允许或组织特定的用户或者，目录的访问，禁止目录列表，配置默认文档等功能。\n​\t.htaccess是一个完整的文件名，不仅仅是文件的扩展名。\n​\t使用.htaccess配置时要注意，任何小错误都可能会阻止整个网站。很可能我们在.htaccess文件中会遇到状态码为500的错误。\n.htaccess的用途？我们可以使用.htaccess在运行时完成各种任务，下面列出了.htaccess的一些最常用的用法。\n1、重定向或重写URL\n使用.htaccess，我们可以轻松地将用户从一个URL重定向到另一个URL。此外，我们还可以在浏览器窗口中不更改URL的情况下将URL指向其他URL。\n2、启用密码保护\n使用.htaccess，我们可以在整个站点或特定目录访问上启用基本的HTTP身份验证。它可以防止未经授权访问数据。\n3、定义自定义错误页面\n当我们的网站在后端遇到任何错误时，Web服务器会显示每个错误的预定义错误页面。我们可以重新设计自己的错误页面，并在网站发生错误时向最终用户显示。\n4、允许或拒绝用户\n我们可以简单地限制任何用户访问基于该IP地址的特定网页的整个网站。可以简单地允许我们的安全页面仅从特定的ips访问。在这种情况下，如果任何用户试图从未经授权的页面访问安全页面都将获得错误页面。\n5、更改网址\n.htaccess广泛用于更改网站的URL，使其简单易用。我们可以轻松转换在网络浏览器中显示的网址。\n具体实现：\n1、上传.htaccess文件至服务器上传目录，此时apache在解析该目录下的php时将按照文件要求。只要文件名匹配到所定义的字符串，就会将该文件当作php解析。\n\n&lt;FilesMatch &quot;shana&quot;&gt;\nSetHandler application&#x2F;x-httpd-php\n&lt;&#x2F;FilesMatch&gt;\n\n2、上传.htaccess文件设置的关键字的文件名，即上传一个黑名单没有过滤的随意后缀名文件，但文件名中一定要包含shana，如&quot;shana.jpg&quot;，内容为一句话木马。此时&quot;shana.jpg&quot;会被Apache当作php解析。\n————————————————\n版权声明：本文为CSDN博主「欧阳大仙萌萌哒」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;shana_8&#x2F;article&#x2F;details&#x2F;104827642\n\n\n\n开始做题思路1\n根据htaccess文件的特性，这道题可以重写文件的解析规则进行绕过。先上传一个名为.htaccess文件，将原有的文件替换掉。其内容如上\n\n上传.htaccess,此时有111的文件当作php文件解析。\n\n试着上传111.php\n\n发现不匹配\n将111.php改为不在黑名单中的后缀名\n\n上传成功\n\n蚁剑连接\n\n思路2\nAddType application&#x2F;x-httpd-php .txt\n\n意思是将.txt后缀的文件当成php解析\n上传该文件\n再上传111.txt\n\n连接蚁剑\n\n5.文件上传漏洞之文件头检查前置知识\n文件头检查是指当浏览器上传到服务器的时候，白名单进行的文件头检测，符合，则允许上传，否则不允许上传。\n\t我们都知道，文件的扩展名是用来识别文件类型的。通过给他指定扩展名，我们可以告诉自己，也告诉操作系统我们想用什么方式打开这个文件。比如我么会把.jpg的文件默认用图片显示软件打开，.zip 文件会默认用解压软件打开等等。\n  然而，扩展名完全是可以随便改改的。我们可以给文件设置一个任意的扩展名，当然也可以不设置扩展名。这样一来我们就不能了解到这个文件究竟是做什么的，究竟是个什么样的文件。我们或许也会疑惑，为什么一个软件，比如视频播放器，就能用正确的方式打开.mp4 .rmvb .wmv 等等的视频？\n  事实上，所有的文件都是以二进制的形式进行存储的，本质上没有差别。之所以使用的方法不同，只是因为我们理解他的方式不同。**在每一个文件（包括图片，视频或其他的非ASCII文件）的开头（十六进制表示）实际上都有一片区域来显示这个文件的实际用法，这就是文件头标志。**\n  文件签名一般都在文件的头部，如果你用十六进制方式查看文件，你就可以看到文件的一些签名信息。如用uestudio工具以十六进制方式查看zip格式的文件，其文件内容头部有50 4B 03 04这样的十六进制信息。同理jpg文件状况有FF D8 FF E0 xx xx 4A 46这样的十六进制信息，其实这此十六进制都是表示一些特殊字条。\n  Linux下我们可以用file命令直接查看文件的实际格式，但是他本质上也是利用文件头标志来进行文件类型判断的。下面就简要介绍下手动判断文件真实类型的方法。\n————————————————\n版权声明：本文为CSDN博主「剑客 getshell」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_45588247&#x2F;article&#x2F;details&#x2F;119592213\n\n\n\n直接做题按照惯例直接上传\n\n根据题目，应该是要做一个图片马，因为检测的是文件头，而不是后缀名\n我们先创造一个名为1.png的图片，然后写一个名为1.php的一句话代码，把他们放到同一目录下，用cmd生成一个名为2.php的图片马\ncopy 1.png&#x2F;b + 1.php&#x2F;a 2.php\n\n命令解释:\n使用CMD制作一句话木马。\n参数&#x2F;b指定以二进制格式复制、合并文件; 用于图像类&#x2F;声音类文件\n参数&#x2F;a指定以ASCII格式复制、合并文件。用于txt等文档类文件\ncopy 1.jpg&#x2F;b+1.php 2.jpg \n&#x2F;&#x2F;意思是将1.jpg以二进制与1.php合并成2.jpg\n那么2.jpg就是图片木马了。\n\n\n\n\n\n修改格式\n\n\n再用蚁剑连接\n\n方法二\n制作一个图片马\n\n上传,抓包,改后缀\n\n成功\n\n蚁剑连接成功\n\n6.文件上传之前端验证前置知识漏洞原理​\tWeb应用系统虽然对用户上传的文件进行了校验，但是校验是通过前端javascript代码完成的。由于恶意用户可以对前端javascript进行修改或者是通过抓包软件篡改上传的文件，就会导致基于js的校验很容易被绕过。\n判断是否存在前端js绕过漏洞：​\t按F12(或者:在网页空白处”右击”–&gt;选择:”检查”)打开调试面板，选择网络，然后上传图片文件和非图片文件，然后对这两个文件的变化进行对比，如果网络中没有数据变化，说明存在js前端验证漏洞，如果有变化说明不存在。(有变化说明，前端没有做验证，是把文件传输到后台，在后台进行验证的，所以才会有网络请求。)\n直接做题方法一:国际惯例\n\n查看网页源码,得知白名单\n\n直接抓包改后缀\n\n上传成功\n\n蚁剑连接成功\n\n方法二:分析前端代码得知它是用js代码实现的过滤,可以考虑直接禁用浏览器的js代码使用来绕过\n\n直接在chrome浏览器中禁用js(其他浏览器可通过插件实现)\n\n此时就能直接上传php木马了\n\n7.文件上传漏洞之无验证这题是文件上传，无验证，也就是说不会对我们上传的文件进行检测过滤，于是可以直接上传一句话木马文件\n&lt;?php\n\t$a&#x3D;$_REQUEST[1];\n\teval($a);\n?&gt;\n\n直接上传一句话木马\n\n\n蚁剑连接成功\n\n拿到flag\n\n8.签到题欢迎来到CTFhub大家庭！\n\n9.密码口令之弱口令常用的字典就是top100弱口令、top1000弱口令之类的字典\n解题思路打开看到管理后台几个大字，猜测用户名可能是admin，密码可能是password之类的\n\n先试试admin，password\n\n发现错误。。于是用bp的狙击手模式进行爆破，具体操作可以在本站找到\n\n\n\n\n\n\n\n\n\nbp攻击模式介绍\nhttps://abyssaler.github.io/post/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3\n\n简单爆破了一下，居然没有找到\n\n扩大字典范围，再次爆破\n\n爆了1w个弱口令了没爆出来，时间用完了。。。直接下一个题目吧\n10.密码口令之默认口令\n首先收集网页信息，发现是北京亿中邮公司产品，再结合题目默认口令，于是去网上搜索\n北京亿中邮信息技术有限公司邮件网关的默认口令\n\n成功破解\n\n11.信息泄露之目录遍历题目考点由于配置错误导致网站的目录可被遍历，一般该类漏洞可以为后续利用提供一些信息上的帮助\n解题思路\n直接点击开始寻找，出现这个界面\n\n挨个遍历就找到flag了\n\n\n","slug":"CTFhub之web练习","date":"2023-01-12T02:23:01.426Z","categories_index":"CTF","tags_index":"writeup","author_index":"Abyssaler"},{"id":"47fc5eb1db81ba54d8cb43c79f27163b","title":"ctfhub之RCE","content":"eval执行题目:\n所需知识:eval():把字符串 code 作为PHP代码执行。函数eval()语言结构是 非常危险的， 因为它允许执行任意 PHP 代码。 它这样用是很危险的。 如果您仔细的确认过，除了使用此结构以外 别无方法, 请多加注意，不要允许传入任何由用户 提供的、未经完整验证过的数据 。\n\n解题过程:这题根据源码其实有两种解题思路,下面挨个讲解\n解法一直接在url地址后面输入?cmd=system(&quot;ls /&quot;);切记输入；\n这里的意思就是查看根目录\n\n可以看到个flag_30217这个文件\n再用?cmd=system(&quot;cat /flag_30217&quot;);就能查看文件内容了\n\n解法二这种解法更为简单粗暴\n分析源码,这其实就是php的一句话木马,所以这里我们直接用蚁剑连接就好了,密码为cmd\n\n剩下的过程就不必我多说了\n文件包含题目：\n解题思路if (isset($_GET[&#39;file&#39;])) &#123;\n    if (!strpos($_GET[&quot;file&quot;], &quot;flag&quot;)) &#123;\n        include $_GET[&quot;file&quot;];\n\n重点是这段代码\n这里有一个strpos(string,find,start)函数\n这里意思在string字符串中找find的位置,start是查找的开始位置\n那么这句代码的意思就是如果file中没有flag字符串就执行下面的include $_GET[&quot;file&quot;]\n否则就输出Hacker。\nstrpos()函数strpos() f函数查找字符串在另一字符串中第一次出现的位置（区分大小写）。\n语法\nstrpos(string,find,start)\n\n参数\nstring\t必需。规定被搜索的字符串。\n\nfind\t必需。规定要查找的字符。\n\nstart\t可选。规定开始搜索的位置。\n\n返回值\n返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。注释： 字符串位置从 0 开始，不是从 1 开始。\n\n\n\n再看一下shell\n&lt;?php eval($_REQUEST[&#39;ctfhub&#39;]);?&gt;\n\n是将ctfhub传的参数用php执行\ninclude()&#x2F;require()&#x2F;include_once()&#x2F;require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。\n输入一个文件的名字，可以直接将文件include到php文件中,这里显然是让我们把shell引入\n在hackbar中这样输入\nctfhub=system(&#39;ls /&#39;);\n\n可以看到flag\n再输入ctfhub=system(&#39;cat /flag&#39;);\n\n找到flag\nphp:&#x2F;&#x2F;input题目:\n解题思路这道题要做的事情就是，找到flag文件存储的存储的位置，然后，读取。这样的话，应该是需要命令执行的漏洞。此时php:&#x2F;&#x2F;input有一个知识点：\nphp:&#x2F;&#x2F;input\n所以我们需要使用php://input来构造发送的指令\n查看phpinfo，找到条件\n\n说明可以用php:&#x2F;&#x2F;input\n使用burp suite抓包\n方法：POST\n目标：&#x2F;?file&#x3D;php:&#x2F;&#x2F;input\nBody：&lt;?php system(&quot;ls &#x2F;&quot;); ?&gt;\n\n\n这里我写错了,应该是php://input\n\n接下来就是查看了&lt;?php system(&#39;cat /flag_10874&#39;); ?&gt;\n\n读取源代码题目:\n解题思路:试了试 php:&#x2F;&#x2F;input 发现用不了,应该是条件不允许了\n这里引入另一个php伪协议:php://filter\nphp:&#x2F;&#x2F;filter 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。\n\nPHP.ini：\nphp:&#x2F;&#x2F;filter在双off的情况下也可以正常使用；\nallow_url_fopen ：off&#x2F;on\nallow_url_include：off&#x2F;on\n\n\n告诉flag的位置在&#x2F;flag里，接下来就直接用php:&#x2F;&#x2F;filter提取就可以了。\n?file=php://filter/resource=/flag\n\n远程包含题目:\n解题思路:思路和前面几题基本一致\n在PHP的配置文件php.ini里将allow_url_fopen和allow_url_include设置为ON，include&#x2F;require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。\n直接用php:&#x2F;&#x2F;input进行命令执行\n\n查看flag\n\n命令注入题目：\n\n\n所需知识：如果你是大佬这段可以不看,我写出来主要是自己代码知识薄弱,方便我理解代码的意思\nexec（）函数：PHP中提供了几个调用linux命令的函数，exec、system、passthru；\n其中exec()函数用来执行一个外部程序。\nphp中的exec()函数的用法：exec()函数用于执行一个外部程序，语法为：【exec(string $command[,array &amp;$output[,int &amp;$return_var ]]);】。\n\n开启exec()函数：\nexec()函数是被禁用的，要使用这个函数必须先开启。首先是 要关掉 安全模式 safe_mode &#x3D; off。然后在看看 禁用函数列表\ndisable_ functions &#x3D; proc_ open,popen,exec,system,shell_ exec,passthru\n\n这里要把 exec 去掉，重启 apache 就OK了。\nexec()函数基本用法：\nexec(string $command [,array &amp;$output[, int &amp;$return_var]]);\n\n$command：表示要执行的命令。\n$output: 如果提供了 output 参数， 那么会用命令执行的输出填充此数组， 每行输出填充数组中的一个元素。 数组中的数据不包含行尾的空白字符，例如  \\n 字符。 请注意，如果数组中已经包含了部分元素，exec() 函数会在数组末尾追加内容。如果你不想在数组末尾进行追加， 请在传入  exec() 函数之前 对数组使用 unset() 函数进行重置。\n$return_var:如果同时提供 output 和 return_var 参数， 命令执行后的返回状态会被写入到此变量。\n一般来说，我们只要写第一个参数，也就是$command。\n例子:\n&lt;?php\n$command &#x3D; &quot;ls &#x2F;tmp&#x2F;test&quot;; &#x2F;&#x2F;ls是linux下的查目录，文件的命令\nexec($command,$array); &#x2F;&#x2F;执行命令\nprint_r($array);\n?&gt;\n\n返回结果:\n[root@krlcgcms01 shell]# php .&#x2F;exec.php\nArray\n(\n[0] &#x3D;&gt; 1001.log\n[1] &#x3D;&gt; 10.log\n[2] &#x3D;&gt; 10.tar.gz\n[3] &#x3D;&gt; aaa.tar.gz\n[4] &#x3D;&gt; mytest\n[5] &#x3D;&gt; test1101\n[6] &#x3D;&gt; test1102\n[7] &#x3D;&gt; weblog_2010_09\n)\n\nPHP print_r() 函数:print_r() 函数用于打印变量，以更容易理解的形式展示。\n语法:\nbool print_r ( mixed $expression [, bool $return ] )\n\n参数说明：\n\n$expression: 要打印的变量，如果给出的是 string、integer 或 float 类型变量，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。\n$return: 可选，如果为 true 则不输出结果，而是将结果赋值给一个变量，false 则直接输出结果。\n\n返回值:\n$return 如果设为 true 才有返回值，为一个易于理解的字符串信息。\n解题过程：直接尝试ping百度\n\n构造payload\n127.0.0.1|ls\n\n\n可以看到疑似flag的文件\n127.0.0.1|cat 278433166717673.php\n\n没有任何结果\n\n再次构造:\n127.0.0.1|cat 278433166717673.php|base64\n\n\n再把这串代码拿去base64解码\n\n得到flag\n也可以直接用cat查看\n127.0.0.1|cat 278433166717673.php\n\n","slug":"ctfhub之RCE","date":"2023-01-12T02:23:01.424Z","categories_index":"CTF","tags_index":"writeup","author_index":"Abyssaler"},{"id":"e635c3e685c2a214ead8e396e5b6c265","title":"PHP文件","content":"文件处理fopen() 函数用于在 PHP 中打开文件。\n打开文件fopen() 函数用于在 PHP 中打开文件。\n此函数的第一个参数含有要打开的文件的名称，第二个参数规定了使用哪种模式来打开文件：\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$file&#x3D;fopen(&quot;welcome.txt&quot;,&quot;r&quot;);\n?&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n文件可能通过下列模式来打开：\n\n\n\n模式\n描述\n\n\n\nr\n只读。在文件的开头开始。\n\n\nr+\n读&#x2F;写。在文件的开头开始。\n\n\nw\n只写。打开并清空文件的内容；如果文件不存在，则创建新文件。\n\n\nw+\n读&#x2F;写。打开并清空文件的内容；如果文件不存在，则创建新文件。\n\n\na\n追加。打开并向文件末尾进行写操作，如果文件不存在，则创建新文件。\n\n\na+\n读&#x2F;追加。通过向文件末尾写内容，来保持文件内容。\n\n\nx\n只写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误。\n\n\nx+\n读&#x2F;写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误。\n\n\n注释：如果 fopen() 函数无法打开指定文件，则返回 0 (false)\n如果 fopen() 函数不能打开指定的文件，下面的实例会生成一段消息\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$file&#x3D;fopen(&quot;welcome.txt&quot;,&quot;r&quot;) or exit(&quot;Unable to open file!&quot;);\n?&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\n关闭文件fclose() 函数用于关闭打开的文件\n&lt;?php\n$file &#x3D; fopen(&quot;test.txt&quot;,&quot;r&quot;);\n\n&#x2F;&#x2F;执行一些代码\n\nfclose($file);\n?&gt;\n\n\n\n逐行读取文件fgets() 函数用于从文件中逐行读取文件。\n注释：在调用该函数之后，文件指针会移动到下一行。\n&lt;?php\n$file &#x3D; fopen(&quot;welcome.txt&quot;, &quot;r&quot;) or exit(&quot;无法打开文件!&quot;);\n&#x2F;&#x2F; 读取文件每一行，直到文件结尾\nwhile(!feof($file))\n&#123;\n    echo fgets($file). &quot;&lt;br&gt;&quot;;\n&#125;\nfclose($file);\n?&gt;\n\n\n\n逐字符读取文件fgetc() 函数用于从文件中逐字符地读取文件。\n注释：在调用该函数之后，文件指针会移动到下一个字符。\n实例下面的实例逐字符地读取文件，直到文件末尾为止\n&lt;?php\n$file&#x3D;fopen(&quot;welcome.txt&quot;,&quot;r&quot;) or exit(&quot;无法打开文件!&quot;);\nwhile (!feof($file))\n&#123;\n    echo fgetc($file);\n&#125;\nfclose($file);\n?&gt;\n\n\n\n\n\n\n\n文件上传表单通过 PHP，可以把文件上传到服务器\ntest 项目下完成，目录结构为：\ntest\n|-----upload             # 文件上传的目录\n|-----form.html          # 表单文件\n|-----upload_file.php    # php 上传代码\n\n\n\n创建一个文件上传表单form.html\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n&lt;title&gt;表单&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n&lt;form action&#x3D;&quot;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n    &lt;label for&#x3D;&quot;file&quot;&gt;文件名：&lt;&#x2F;label&gt;\n    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt;\n    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\n创建上传脚本“upload_file.php” 文件含有供上传文件的代码\n&lt;?php\nif ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)\n&#123;\n    echo &quot;错误：&quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;;\n&#125;\nelse\n&#123;\n    echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;;\n    echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;;\n    echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] &#x2F; 1024) . &quot; kB&lt;br&gt;&quot;;\n    echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];\n&#125;\n?&gt;\n\n\n\n通过使用 PHP 的全局数组 $_FILES，你可以从客户计算机向远程服务器上传文件。\n第一个参数是表单的 input name，第二个下标可以是 “name”、”type”、”size”、”tmp_name” 或 “error”。如下所示：\n\n$_FILES[“file”][“name”] - 上传文件的名称\n$_FILES[“file”][“type”] - 上传文件的类型\n$_FILES[“file”][“size”] - 上传文件的大小，以字节计\n$_FILES[“file”][“tmp_name”] - 存储在服务器的文件的临时副本的名称\n$_FILES[“file”][“error”] - 由文件上传导致的错误代码\n\n这是一种非常简单文件上传方式。基于安全方面的考虑，您应当增加有关允许哪些用户上传文件的限制。\n","slug":"03PHP文件","date":"2023-01-10T13:21:22.644Z","categories_index":"学习笔记","tags_index":"php","author_index":"Abyssaler"},{"id":"bd6f30a22217917d2172ab3a5accd3dc","title":"PHP正则表达式","content":"正则表达式正则表达式存在的意义：过滤和检索。\n正则表达式，又称规则表达式（Regular Expression ）常简写为regex，regexp，RE;\n作用正则表达式通常被用来检索、替换符合规则的文本\n特点\n灵活性、逻辑性和功能性强\n可以快速地用极简单的方式达到支付出的复杂控制\n\n用途\n判断字符串是否符合某规则\n从一个字符串中找出符合规则的所以子字符串\n\n常用字符\n\n\n说明\n符号\n\n\n\n数字\n\\d\n\n\n非字符\n\\D\n\n\n空白字符（空格、制表符、换页符等）\n\\s\n\n\n非空白字符\n\\S\n\n\n制表符\n\\t\n\n\n回车符\n\\r\n\n\n换行符\n\\n\n\n\n单词字符（26个英文字母+数字+下划线）\n\\w\n\n\n非单词字符\n\\W\n\n\n字符集合字符集合：[ 单个字符或字符区间] ，用于匹配集合内字符\n\n如：\n\n[a-z]    表示a-z   26个小写字母\n[ 0-9a-h] 表示0-9 10个数字和a-z 8个字母\n[134a-h] 表示包含数字1，3，5和字母a-h 8个字母\n\n注意：两个不同字符段间请勿使用逗号，隔开\n反选字符非集：[\\^单个字符或区间]，用于匹配非集合内字符]\n\n\n反选字符：^\t\n\n[^]  注意：中括号内^ 才是反选\n\n[^0-9]  表示匹配所有非数字字符\n\n[^a-zA-Z] 表示匹配所有非字母字符\n\n\n关键字\n\n\n关键字\n描述\n\n\n\n^\n匹配输入字符串的开始位置\n\n\n$\n匹配输入字符串的结尾位置\n\n\n（）\n标记一个子表达式的开始和结束位置\n\n\n*\n匹配前面的子表达式零次或多次\n\n\n+\n匹配前面的子表达式一次或多次\n\n\n.\n匹配除换行符\\n之外的任意单个字符\n\n\n[\n标记一个中括号表达式的开始\n\n\n？\n匹配前面的子表达式零次或一次\n\n\n\\\n将下一个字符标记为特殊字符原来的本意\n\n\n{\n标记限定符表达式的开始\n\n\n|\n指明两项之间的一项\n\n\n限定符\n\n\n字符\n描述\n\n\n\n{n}\nn为非负数，匹配连续的字符n次\n\n\n{n,}\nn为非负数，匹配连续的字符n次及以上\n\n\n{n，m}\nn、m均为非负数，n &lt;&#x3D;m,匹配连续的字符 至少n次，至多m次\n\n\n修饰符​\t\n\n\n\n修饰符\n描述\n\n\n\n&#x2F;i\n不区分大小写\n\n\n&#x2F;A\n匹配规则必须从头开始匹配\n\n\n&#x2F;s\n将匹配一切字符\n\n\n&#x2F;X\n正则表达式中的空白字符将会被忽略\n\n\n注意：写在正则表达式的“外面“    &#x2F;a&#x2F;i\n函数PHP中使用正则表达式一定要加&#x2F; 正则表达式内容  &#x2F;\n\npreg_match(正则表达式，匹配的字符串)\n匹配第一个匹配正则的子字符串，未找到返回0.找到返回1\n\npreg_grep()\n匹配第一个匹配正则的字符串数组，包含匹配的字符串和匹配的单元\n\npreg_match_all(正则表达式，匹配的字符串，输出的二维数组)\n能匹配所有的子字符串，返回子字符串匹配的数量\n\npre_replace(正则表达式，替换的字符串，匹配的字符串)\n将所有匹配正则表达式的字符串进行替换\n\n\n","slug":"06PHP正则表达式","date":"2023-01-10T13:21:22.644Z","categories_index":"学习笔记","tags_index":"php","author_index":"Abyssaler"},{"id":"e8eeb095a66f2218f43f6c5e63475a56","title":"PHP连接mysql数据库","content":"通过 PHP，您可以连接和操作数据库。\n连接 MySQL在我们访问 MySQL 数据库前，我们需要先连接到数据库服务器\n(MySQLi - 面向对象）&lt;?php\n$servername &#x3D; &quot;localhost&quot;;\n$username &#x3D; &quot;username&quot;;\n$password &#x3D; &quot;password&quot;;\n \n&#x2F;&#x2F; 创建连接\n$conn &#x3D; new mysqli($servername, $username, $password);\n \n&#x2F;&#x2F; 检测连接\nif ($conn-&gt;connect_error) &#123;\n    die(&quot;连接失败: &quot; . $conn-&gt;connect_error);\n&#125; \necho &quot;连接成功&quot;;\n?&gt;\n\n注意： 注意在以上面向对象的实例中 $connect_error 是在 PHP 5.2.9 和 5.3.0 中添加的。如果你需要兼容更早版本 请使用以下代码替换:  &#x2F;&#x2F; 检测连接 if (mysqli_connect_error()) {   die(“数据库连接失败: “ . mysqli_connect_error()); }\nMySQLi - 面向过程&lt;?php\n$servername &#x3D; &quot;localhost&quot;;\n$username &#x3D; &quot;username&quot;;\n$password &#x3D; &quot;password&quot;;\n \n&#x2F;&#x2F; 创建连接\n$conn &#x3D; mysqli_connect($servername, $username, $password);\n \n&#x2F;&#x2F; 检测连接\nif (!$conn) &#123;\n    die(&quot;Connection failed: &quot; . mysqli_connect_error());\n&#125;\necho &quot;连接成功&quot;;\n?&gt;\n\n\n\nPDO&lt;?php\n$servername &#x3D; &quot;localhost&quot;;\n$username &#x3D; &quot;username&quot;;\n$password &#x3D; &quot;password&quot;;\n \ntry &#123;\n    $conn &#x3D; new PDO(&quot;mysql:host&#x3D;$servername;&quot;, $username, $password);\n    echo &quot;连接成功&quot;; \n&#125;\ncatch(PDOException $e)\n&#123;\n    echo $e-&gt;getMessage();\n&#125;\n?&gt;\n\n\n\n\n\nMySQL基础知识链接\n连接数据库\n实例：&lt;?php\n    &#x2F;&#x2F; 创建连接\n&#x2F;&#x2F; $conn &#x3D; mysqli_connect($servername, $username, $password);\n    $conn &#x3D; mysqli_connect(&#39;localhost&#39;, &#39;root&#39;,&#39;root&#39;);\n\n    &#x2F;&#x2F; 检测连接\n    if(!$conn)&#123;\n        die(mysqli_connect_error());\n    &#125;\n    echo &quot;连接成功&quot;;\n\n    &#x2F;&#x2F;关闭连接\n    mysqli_close($conn); \n?&gt;\n\n创建数据库\n数据库存有一个或者多个表\n需要create 权限来创建或删除MySQL数据库\n创建数据库语句：create database name\n实例：&lt;?php\n    &#x2F;&#x2F; 创建连接\n&#x2F;&#x2F; $conn &#x3D; mysqli_connect($servername, $username, $password);\n    $conn &#x3D; mysqli_connect(&#39;localhost&#39;, &#39;root&#39;,&#39;root&#39;);\n\n    &#x2F;&#x2F; 检测连接\n    if(!$conn)&#123;\n        die(mysqli_connect_error());\n    &#125;\n    echo &quot;连接成功&quot;;\n    echo &quot;&lt;br&gt;&quot;;\n\n    &#x2F;&#x2F; 创建数据库语句\n    $sql &#x3D; &quot;CREATE DATABASE PHP&quot;; &#x2F;&#x2F; 创建一个PHP数据库\n\n    &#x2F;&#x2F; mysqli_query() 向MySQL数据库执行一条语句\n    if(mysqli_query($conn,$sql))&#123;\n        echo &quot;创建数据库 PHP成功&quot;;\n        &#125;\n    else&#123;\n        echo mysqli_error($conn);\n    &#125;\n\n    &#x2F;&#x2F;关闭连接\n    mysqli_close($conn); \n?&gt;\n运行后查看数据库是否添加\n\n创建数据表\n创建表的语句：create table \n实例：&lt;?php\n    &#x2F;&#x2F; 创建连接\n&#x2F;&#x2F; $conn &#x3D; mysqli_connect($servername, $username, $password);\n    $conn &#x3D; mysqli_connect(&#39;localhost&#39;, &#39;root&#39;,&#39;root&#39;,&#39;PHP&#39;);\n\n    &#x2F;&#x2F; 检测连接\n    if(!$conn)&#123;\n        die(mysqli_connect_error());\n    &#125;\n    else&#123;\n        echo &quot;连接成功&quot;;\n        echo &quot;&lt;br&gt;&quot;;\n    &#125;\n\n    &#x2F;&#x2F; 创建数据表语句\n    $sql &#x3D; &quot;create table MyGuests (\n        id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n        firstname VARCHAR(30) NOT NULL,\n        lastname VARCHAR(30) NOT NULL,\n        email VARCHAR(50),\n        reg_date TIMESTAMP\n        )&quot;;\n     \n     &#x2F;&#x2F;向数据库执行sql语句\n     if(mysqli_query($conn,$sql))&#123;\n        echo &quot;创建数据表成功&quot;;\n        echo &quot;&lt;br&gt;&quot;;\n     &#125; \n     else&#123;echo mysqli_error($conn);&#125;\n\n\n    &#x2F;&#x2F;关闭连接\n    mysqli_close($conn); \n?&gt;\n运行截图数据库中的信息\n\n插入数据\n语法：insert into\n实例：&lt;?php\n    &#x2F;&#x2F; 创建连接\n&#x2F;&#x2F; $conn &#x3D; mysqli_connect($servername, $username, $password);\n    $conn &#x3D; mysqli_connect(&#39;localhost&#39;, &#39;root&#39;,&#39;root&#39;,&#39;PHP&#39;);\n\n    &#x2F;&#x2F; 检测连接\n    if(!$conn)&#123;\n        die(mysqli_connect_error());\n    &#125;\n    else&#123;\n        echo &quot;连接成功&quot;;\n        echo &quot;&lt;br&gt;&quot;;\n    &#125;\n\n    &#x2F;&#x2F; 创建插入语句\n    $sql &#x3D; &quot;INSERT INTO MyGuests (firstname, lastname, email) VALUES (&#39;John&#39;, &#39;Doe&#39;, &#39;john@example.com&#39;)&quot;;\n\n    &#x2F;&#x2F; 执行语句\n    if(mysqli_query($conn,$sql))&#123;\n        echo &quot;数据插入成功&quot;;\n    &#125;\n    else&#123;echo mysqli_error($conn);&#125;\n\n    &#x2F;&#x2F;关闭连接\n    mysqli_close($conn); \n?&gt;\n运行截图数据库中的信息\n\n插入多条数据\nmysqli_multi_query() 函数可用来执行多条SQL语句\n实例：&lt;?php\n    &#x2F;&#x2F; 创建连接\n&#x2F;&#x2F; $conn &#x3D; mysqli_connect($servername, $username, $password);\n    $conn &#x3D; mysqli_connect(&#39;localhost&#39;, &#39;root&#39;,&#39;root&#39;,&#39;PHP&#39;);\n\n    &#x2F;&#x2F; 检测连接\n    if(!$conn)&#123;\n        die(mysqli_connect_error());\n    &#125;\n    else&#123;\n        echo &quot;连接成功&quot;;\n        echo &quot;&lt;br&gt;&quot;;\n    &#125;\n\n    &#x2F;&#x2F; 创建插入语句\n    $sql &#x3D; &quot;INSERT INTO MyGuests (firstname, lastname, email) VALUES (&#39;pual&#39;, &#39;bei&#39;, &#39;pual@example.com&#39;);&quot;;\n    $sql .&#x3D; &quot;INSERT INTO MyGuests (firstname, lastname, email) VALUES (&#39;Mary&#39;, &#39;Moe&#39;, &#39;mary@example.com&#39;);&quot;;\n    $sql .&#x3D; &quot;INSERT INTO MyGuests (firstname, lastname, email) VALUES (&#39;Julie&#39;, &#39;Dooley&#39;, &#39;julie@example.com&#39;)&quot;;\n\n    &#x2F;&#x2F; 一次性插入多条语句\n    if(mysqli_multi_query($conn,$sql))&#123;\n        echo &quot;添加记录成功&quot;;\n    &#125;\n    else&#123;echo mysqli_connect_error;&#125;\n\n    &#x2F;&#x2F;关闭连接\n    mysqli_close($conn); \n?&gt;\n运行截图数据库中的信息\n\n读取数据\nmysqli_num_rows() ：返回sql语句查询到的总行数\n\nmysqli_fetch_assoc() 函数从结果集中取得一行作为关联数组\n\n实例：\n&lt;?php\n    &#x2F;&#x2F; 创建连接\n&#x2F;&#x2F; $conn &#x3D; mysqli_connect($servername, $username, $password);\n    $conn &#x3D; mysqli_connect(&#39;localhost&#39;, &#39;root&#39;,&#39;root&#39;,&#39;PHP&#39;);\n\n    &#x2F;&#x2F; 检测连接\n    if(!$conn)&#123;\n        die(mysqli_connect_error());\n    &#125;\n    else&#123;\n        echo &quot;连接成功&quot;;\n        echo &quot;&lt;br&gt;&quot;;\n    &#125;\n\n    &#x2F;&#x2F; 创建查询语句\n    $sql &#x3D; &quot;select id, firstname, lastname from MyGuests&quot;;\n    \n    $res &#x3D; mysqli_query($conn,$sql);\n\n    &#x2F;&#x2F; 返回sql语句查询到的总行数\n    &#x2F;&#x2F; mysqli_num_rows($res)\n\n    if(mysqli_num_rows($res) &gt; 0)&#123;\n        while($row &#x3D; mysqli_fetch_assoc($res))&#123;\n            echo &quot;id:&quot; . $row[&quot;id&quot;] . &quot;-name:&quot; . $row[&quot;firstname&quot;] . &quot; &quot; .$row[&#39;lastname&#39;].&quot;&lt;br&gt;&quot;;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;关闭连接\n    mysqli_close($conn); \n?&gt;\n运行截图\n\nmysqli_fetch_assoc()函数和mysqli_num_rows()函数的测试代码\n&lt;?php\n    &#x2F;&#x2F; 创建连接\n&#x2F;&#x2F; $conn &#x3D; mysqli_connect($servername, $username, $password);\n    $conn &#x3D; mysqli_connect(&#39;localhost&#39;, &#39;root&#39;,&#39;root&#39;,&#39;PHP&#39;);\n\n    &#x2F;&#x2F; 检测连接\n    if(!$conn)&#123;\n        die(mysqli_connect_error());\n    &#125;\n    else&#123;\n        echo &quot;连接成功&quot;;\n        echo &quot;&lt;br&gt;&quot;;\n    &#125;\n\n    &#x2F;&#x2F; 创建查询语句\n    $sql &#x3D; &quot;select id, firstname, lastname from MyGuests&quot;;\n    \n    $res &#x3D; mysqli_query($conn,$sql);\n\n    &#x2F;&#x2F; 返回sql语句查询到的总行数\n    $row &#x3D; mysqli_num_rows($res) . &quot;&lt;br&gt;&quot;;\n\n    &#x2F;&#x2F; mysqli_fetch_assoc() 函数从结果集中取得一行作为关联数组\n\n    if($row &gt; 0)&#123;\n        while($i &#x3D; mysqli_fetch_assoc($res))&#123;\n            var_dump($i);\n            echo &quot;&lt;br&gt;&quot;;\n            \n            echo &quot;序列号为：&quot; . $i[&#39;id&#39;] . &quot;, firstname为：&quot; . $i[&#39;firstname&#39;] . &quot;, lastname为：&quot; . $i[&#39;lastname&#39;];\n            echo &quot;&lt;hr&gt;&quot;;\n        &#125;\n    &#125;\n\n\n    &#x2F;&#x2F;关闭连接\n    mysqli_close($conn); \n?&gt;\n\n","slug":"04PHP连接MySQL数据库","date":"2023-01-10T13:21:22.644Z","categories_index":"学习笔记","tags_index":"php","author_index":"Abyssaler"},{"id":"befd9437c19ef7fdb68a823928ac2872","title":"PHP表单","content":"PHP 中的 $_GET 和 $_POST 变量用于检索表单中的信息，比如用户输入\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n \n&lt;form action&#x3D;&quot;welcome.php&quot; method&#x3D;&quot;post&quot;&gt;\n名字: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;\n年龄: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;age&quot;&gt;\n&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;\n \n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\n用户填写完上面的表单并点击提交按钮时，表单的数据会被送往名为 “welcome.php” 的 PHP 文件\n欢迎&lt;?php echo $_POST[&quot;fname&quot;]; ?&gt;!&lt;br&gt;\n你的年龄是 &lt;?php echo $_POST[&quot;age&quot;]; ?&gt;  岁。\n\n","slug":"02PHP表单","date":"2023-01-10T13:21:22.628Z","categories_index":"学习笔记","tags_index":"php","author_index":"Abyssaler"},{"id":"e2beb8c86086697d45d0d68d245fa991","title":"PHP基础","content":"PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言\nPHP 是什么？\nPHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。\nPHP 脚本在服务器上执行。\nPHP 可免费下载使用。\n\nPHP 文件是什么？\nPHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码\nPHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器\nPHP 文件的默认文件扩展名是 “.php”\n\nPHP 能做什么？\nPHP 可以生成动态页面内容\nPHP 可以创建、打开、读取、写入、关闭服务器上的文件\nPHP 可以收集表单数据\nPHP 可以发送和接收 cookies\nPHP 可以添加、删除、修改您的数据库中的数据\nPHP 可以限制用户访问您的网站上的一些页面\nPHP 可以加密数据\n\n为什么使用 PHP？\nPHP 可在不同的平台上运行（Windows、Linux、Unix、Mac OS X 等）\nPHP 与目前几乎所有的正在被使用的服务器相兼容（Apache、IIS 等）\nPHP 提供了广泛的数据库支持\nPHP 易于学习，并可高效地运行在服务器端\n\nPHP语法PHP 脚本可以放在文档中的任何位置。\nPHP 脚本以  结束：\nPHP 文件的默认文件扩展名是 “.php”。\nPHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My first PHP page&lt;&#x2F;h1&gt;\n\n&lt;?php\necho &quot;Hello World!&quot;;\n?&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\nPHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。\n通过 PHP，有两种在浏览器输出文本的基础指令：echo 和 print。\nPHP 注释\n&#x2F;&#x2F;      单行注释\n&#x2F;*  *&#x2F;   多行注释\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n&#x2F;&#x2F; 这是 PHP 单行注释\n\n&#x2F;*\n这是\nPHP 多行\n注释\n*&#x2F;\n?&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\n变量变量是用于存储信息的”容器”\n&lt;?php\n$x&#x3D;5;\n$y&#x3D;6;\n$z&#x3D;$x+$y;\necho $z;\n?&gt;\n\n\n\nPHP 变量规则\n\n变量以 $ 符号开始，后面跟着变量的名称\n变量名必须以字母或者下划线字符开始\n变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ）\n变量名不能包含空格\n变量名是区分大小写的（$y 和 $Y 是两个不同的变量）\n\n创建PHP变量PHP 没有声明变量的命令。\n变量在您第一次赋值给它的时候被创建\n&lt;?php\n$txt&#x3D;&quot;Hello world!&quot;;\n$x&#x3D;5;\n$y&#x3D;10.5;\n?&gt;\n\n在上面的语句执行中，变量 txt 将保存值 **Hello world!**，且变量 x 将保存值 5。\n注释：当您赋一个文本值给变量时，请在文本值两侧加上引号。\nPHP 是一门弱类型语言PHP 会根据变量的值，自动把变量转换为正确的数据类型。\n在强类型的编程语言中，我们必须在使用变量前先声明（定义）变量的类型和名称。\necho 和 print 语句echo 和 print 区别:\n\necho - 可以输出一个或多个字符串\nprint - 只允许输出一个字符串，返回值总为 1\n\n提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。\necho 是一个语言结构，使用的时候可以不用加括号，也可以加上括号： echo 或 echo()。\n显示字符串\n&lt;?php\necho &quot;&lt;h2&gt;PHP 很有趣!&lt;&#x2F;h2&gt;&quot;;\necho &quot;Hello world!&lt;br&gt;&quot;;\necho &quot;我要学 PHP!&lt;br&gt;&quot;;\necho &quot;这是一个&quot;, &quot;字符串，&quot;, &quot;使用了&quot;, &quot;多个&quot;, &quot;参数。&quot;;\n?&gt;\n\n\n\n显示变量\n&lt;?php\n$txt1&#x3D;&quot;学习 PHP&quot;;\n$txt2&#x3D;&quot;xbxaq.com&quot;;\n$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\n \necho $txt1;\necho &quot;&lt;br&gt;&quot;;\necho &quot;在 $txt2 学习 PHP &quot;;\necho &quot;&lt;br&gt;&quot;;\necho &quot;我车的品牌是 &#123;$cars[0]&#125;&quot;;\n?&gt;\n\n\n\nprint 同样是一个语言结构，可以使用括号，也可以不使用括号： print 或 print()。\n显示字符串\n&lt;?php\nprint &quot;&lt;h2&gt;PHP 很有趣!&lt;&#x2F;h2&gt;&quot;;\nprint &quot;Hello world!&lt;br&gt;&quot;;\nprint &quot;我要学习 PHP!&quot;;\n?&gt;\n\n\n\n显示变量\n&lt;?php\n$txt1&#x3D;&quot;学习 PHP&quot;;\n$txt2&#x3D;&quot;xbxaq.COM&quot;;\n$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\n \nprint $txt1;\nprint &quot;&lt;br&gt;&quot;;\nprint &quot;在 $txt2 学习 PHP &quot;;\nprint &quot;&lt;br&gt;&quot;;\nprint &quot;我车的品牌是 &#123;$cars[0]&#125;&quot;;\n?&gt;\n\n\n\n数据类型PHP 变量存储不同的类型的数据，不同的数据类型可以做不一样的事情。\nPHP 支持以下几种数据类型:\n\nString（字符串）\nInteger（整型）\nFloat（浮点型）\nBoolean（布尔型）\nArray（数组）\nObject（对象）\nNULL（空值）\nResource（资源类型）\n\n字符串一个字符串是一串字符的序列，就像 “Hello world!”。\n你可以将任何文本放在单引号和双引号中\n&lt;?php \n$x &#x3D; &quot;Hello world!&quot;;\necho $x;\necho &quot;&lt;br&gt;&quot;; \n$x &#x3D; &#39;Hello world!&#39;;\necho $x;\n?&gt;\n\n\n\n整型整数是一个没有小数的数字。\n整数规则:\n\n整数必须至少有一个数字 (0-9)\n整数不能包含逗号或空格\n整数是没有小数点的\n整数可以是正数或负数\n整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。\n\nPHP var_dump() 函数返回变量的数据类型和值\n&lt;?php \n$x &#x3D; 5985;\nvar_dump($x);\necho &quot;&lt;br&gt;&quot;; \n$x &#x3D; -345; &#x2F;&#x2F; 负数 \nvar_dump($x);\necho &quot;&lt;br&gt;&quot;; \n$x &#x3D; 0x8C; &#x2F;&#x2F; 十六进制数\nvar_dump($x);\necho &quot;&lt;br&gt;&quot;;\n$x &#x3D; 047; &#x2F;&#x2F; 八进制数\nvar_dump($x);\n?&gt;\n\n\n\n浮点型浮点数是带小数部分的数字，或是指数形式\n&lt;?php \n$x &#x3D; 10.365;\nvar_dump($x);\necho &quot;&lt;br&gt;&quot;; \n$x &#x3D; 2.4e3;\nvar_dump($x);\necho &quot;&lt;br&gt;&quot;; \n$x &#x3D; 8E-5;\nvar_dump($x);\n?&gt;\n\n\n\n布尔型布尔型可以是 TRUE 或 FALSE\n布尔型通常用于条件判断\n数组数组可以在一个变量中存储多个值\n&lt;?php \n$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\nvar_dump($cars);\n?&gt;\n\n\n\n对象对象数据类型也可以用于存储数据。\n在 PHP 中，对象必须声明。\n首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构。\n然后我们在类中定义数据类型，然后在实例化的类中使用数据类型\n&lt;?php\nclass Car\n&#123;\n  var $color;\n  function __construct($color&#x3D;&quot;green&quot;) &#123;\n    $this-&gt;color &#x3D; $color;\n  &#125;\n  function what_color() &#123;\n    return $this-&gt;color;\n  &#125;\n&#125;\n?&gt;\n\n\n\nNULL 值NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值。\nNULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。\n可以通过设置变量值为 NULL 来清空变量数据\n&lt;?php\n$x&#x3D;&quot;Hello world!&quot;;\n$x&#x3D;null;\nvar_dump($x);\n?&gt;\n\n\n\n类型比较虽然 PHP 是弱类型语言，但也需要明白变量类型及它们的意义，因为我们经常需要对 PHP 变量进行比较，包含松散和严格比较。\n\n松散比较：使用两个等号 &#x3D;&#x3D; 比较，只比较值，不比较类型。\n严格比较：用三个等号 &#x3D;&#x3D;&#x3D; 比较，除了比较值，也比较类型。\n\n例如，”42” 是一个字符串而 42 是一个整数。FALSE 是一个布尔值而 “FALSE” 是一个字符串。\n&lt;?php\nif(42 &#x3D;&#x3D; &quot;42&quot;) &#123;\n    echo &#39;1、值相等&#39;;\n&#125;\n \necho PHP_EOL; &#x2F;&#x2F; 换行符\n \nif(42 &#x3D;&#x3D;&#x3D; &quot;42&quot;) &#123;\n    echo &#39;2、类型相等&#39;;\n&#125; else &#123;\n    echo &#39;3、类型不相等&#39;;\n&#125;\n?&gt;\n\n\n\nPHP中 比较 0、false、null&lt;?php\necho &#39;0 &#x3D;&#x3D; false: &#39;;\nvar_dump(0 &#x3D;&#x3D; false);\necho &#39;0 &#x3D;&#x3D;&#x3D; false: &#39;;\nvar_dump(0 &#x3D;&#x3D;&#x3D; false);\necho PHP_EOL;\necho &#39;0 &#x3D;&#x3D; null: &#39;;\nvar_dump(0 &#x3D;&#x3D; null);\necho &#39;0 &#x3D;&#x3D;&#x3D; null: &#39;;\nvar_dump(0 &#x3D;&#x3D;&#x3D; null);\necho PHP_EOL;\necho &#39;false &#x3D;&#x3D; null: &#39;;\nvar_dump(false &#x3D;&#x3D; null);\necho &#39;false &#x3D;&#x3D;&#x3D; null: &#39;;\nvar_dump(false &#x3D;&#x3D;&#x3D; null);\necho PHP_EOL;\necho &#39;&quot;0&quot; &#x3D;&#x3D; false: &#39;;\nvar_dump(&quot;0&quot; &#x3D;&#x3D; false);\necho &#39;&quot;0&quot; &#x3D;&#x3D;&#x3D; false: &#39;;\nvar_dump(&quot;0&quot; &#x3D;&#x3D;&#x3D; false);\necho PHP_EOL;\necho &#39;&quot;0&quot; &#x3D;&#x3D; null: &#39;;\nvar_dump(&quot;0&quot; &#x3D;&#x3D; null);\necho &#39;&quot;0&quot; &#x3D;&#x3D;&#x3D; null: &#39;;\nvar_dump(&quot;0&quot; &#x3D;&#x3D;&#x3D; null);\necho PHP_EOL;\necho &#39;&quot;&quot; &#x3D;&#x3D; false: &#39;;\nvar_dump(&quot;&quot; &#x3D;&#x3D; false);\necho &#39;&quot;&quot; &#x3D;&#x3D;&#x3D; false: &#39;;\nvar_dump(&quot;&quot; &#x3D;&#x3D;&#x3D; false);\necho PHP_EOL;\necho &#39;&quot;&quot; &#x3D;&#x3D; null: &#39;;\nvar_dump(&quot;&quot; &#x3D;&#x3D; null);\necho &#39;&quot;&quot; &#x3D;&#x3D;&#x3D; null: &#39;;\nvar_dump(&quot;&quot; &#x3D;&#x3D;&#x3D; null);\n\n\n\n常量常量值被定义后，在脚本的其他任何地方都不能被改变\n常量是一个简单值的标识符。该值在脚本中不能改变。\n一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。\n注意： 常量在整个脚本中都可以使用。\n设置常量，使用 define() 函数，函数语法如下\nbool define ( string $name , mixed $value [, bool $case_insensitive &#x3D; false ] )\n\n该函数有三个参数:\n\nname：必选参数，常量名称，即标志符。\nvalue：必选参数，常量的值。\ncase_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。\n\n创建一个 区分大小写的常量, 常量值为 “欢迎访问 xbxaq.com”\n&lt;?php\n&#x2F;&#x2F; 区分大小写的常量名\ndefine(&quot;GREETING&quot;, &quot;欢迎访问 xbxaq.com&quot;);\necho GREETING;    &#x2F;&#x2F; 输出 \necho &#39;&lt;br&gt;&#39;;\necho greeting;   &#x2F;&#x2F; 输出 &quot;greeting&quot;，但是有警告信息，表示该常量未定义\n?&gt;\n\n\n\n运算符 PHP 中，赋值运算符 &#x3D; 用于给变量赋值。\n在 PHP 中，算术运算符 + 用于把值加在一起。\n算术运算符&lt;?php \n$x&#x3D;10; \n$y&#x3D;6;\necho ($x + $y); &#x2F;&#x2F; 输出16\necho &#39;&lt;br&gt;&#39;;  &#x2F;&#x2F; 换行\n \necho ($x - $y); &#x2F;&#x2F; 输出4\necho &#39;&lt;br&gt;&#39;;  &#x2F;&#x2F; 换行\n \necho ($x * $y); &#x2F;&#x2F; 输出60\necho &#39;&lt;br&gt;&#39;;  &#x2F;&#x2F; 换行\n \necho ($x &#x2F; $y); &#x2F;&#x2F; 输出1.6666666666667\necho &#39;&lt;br&gt;&#39;;  &#x2F;&#x2F; 换行\n \necho ($x % $y); &#x2F;&#x2F; 输出4\necho &#39;&lt;br&gt;&#39;;  &#x2F;&#x2F; 换行\n \necho -$x;\n?&gt;\n\n\n\n赋值运算符&lt;?php \n$x&#x3D;10; \necho $x; &#x2F;&#x2F; 输出10\n \n$y&#x3D;20; \n$y +&#x3D; 100;\necho $y; &#x2F;&#x2F; 输出120\n \n$z&#x3D;50;\n$z -&#x3D; 25;\necho $z; &#x2F;&#x2F; 输出25\n \n$i&#x3D;5;\n$i *&#x3D; 6;\necho $i; &#x2F;&#x2F; 输出30\n \n$j&#x3D;10;\n$j &#x2F;&#x3D; 5;\necho $j; &#x2F;&#x2F; 输出2\n \n$k&#x3D;15;\n$k %&#x3D; 4;\necho $k; &#x2F;&#x2F; 输出3\n?&gt;\n\n\n\n递增&#x2F;递减运算符&lt;?php\n$x&#x3D;10; \necho ++$x; &#x2F;&#x2F; 输出11\n \n$y&#x3D;10; \necho $y++; &#x2F;&#x2F; 输出10\n \n$z&#x3D;5;\necho --$z; &#x2F;&#x2F; 输出4\n \n$i&#x3D;5;\necho $i--; &#x2F;&#x2F; 输出5\n?&gt;\n\n\n\n比较运算符&lt;?php\n$x&#x3D;100; \n$y&#x3D;&quot;100&quot;;\n \nvar_dump($x &#x3D;&#x3D; $y);\necho &quot;&lt;br&gt;&quot;;\nvar_dump($x &#x3D;&#x3D;&#x3D; $y);\necho &quot;&lt;br&gt;&quot;;\nvar_dump($x !&#x3D; $y);\necho &quot;&lt;br&gt;&quot;;\nvar_dump($x !&#x3D;&#x3D; $y);\necho &quot;&lt;br&gt;&quot;;\n \n$a&#x3D;50;\n$b&#x3D;90;\n \nvar_dump($a &gt; $b);\necho &quot;&lt;br&gt;&quot;;\nvar_dump($a &lt; $b);\n?&gt;\n\n\n\n三元运算符语法格式(expr1) ? (expr2) : (expr3) \n\n对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。\n条件语句您编写代码时，您常常需要为不同的判断执行不同的动作。您可以在代码中使用条件语句来完成此任务。\n在 PHP 中，提供了下列条件语句：\n\nif 语句 - 在条件成立时执行代码\nif…else 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码\nif…elseif….else 语句 - 在若干条件之一成立时执行一个代码块\nswitch 语句 - 在若干条件之一成立时执行一个代码块\n\nif 语句用于仅当指定条件成立时执行代码\n语法if (条件)\n&#123;\n    条件成立时要执行的代码;\n&#125;\n\n&lt;?php\n$t&#x3D;date(&quot;H&quot;);\nif ($t&lt;&quot;20&quot;)\n&#123;\n    echo &quot;Have a good day!&quot;;\n&#125;\n?&gt;\n\n\n\nif…else 语句在条件成立时执行一块代码，条件不成立时执行另一块代码，请使用 if….else 语句。\n语法if (条件)\n&#123;\n条件成立时执行的代码;\n&#125;\nelse\n&#123;\n条件不成立时执行的代码;\n&#125;\n\n\n\n&lt;?php\n$t&#x3D;date(&quot;H&quot;);\nif ($t&lt;&quot;20&quot;)\n&#123;\n    echo &quot;Have a good day!&quot;;\n&#125;\nelse\n&#123;\n    echo &quot;Have a good night!&quot;;\n&#125;\n?&gt;\n\n\n\nif…elseif….else 语句在若干条件之一成立时执行一个代码块，请使用 if….elseif…else 语句。.\n语法if (条件)\n&#123;\n    if 条件成立时执行的代码;\n&#125;\nelseif (条件)\n&#123;\n    elseif 条件成立时执行的代码;\n&#125;\nelse\n&#123;\n    条件不成立时执行的代码;\n&#125;\n\n\n\n&lt;?php\n$t&#x3D;date(&quot;H&quot;);\nif ($t&lt;&quot;10&quot;)\n&#123;\n    echo &quot;Have a good morning!&quot;;\n&#125;\nelseif ($t&lt;&quot;20&quot;)\n&#123;\n    echo &quot;Have a good day!&quot;;\n&#125;\nelse\n&#123;\n    echo &quot;Have a good night!&quot;;\n&#125;\n?&gt;\n\n\n\nSwitch 语句switch 语句用于根据多个不同条件执行不同动作。\n如果您希望有选择地执行若干代码块之一，请使用 switch 语句。\n&lt;?php\n$favcolor&#x3D;&quot;red&quot;;\nswitch ($favcolor)\n&#123;\ncase &quot;red&quot;:\n    echo &quot;你喜欢的颜色是红色!&quot;;\n    break;\ncase &quot;blue&quot;:\n    echo &quot;你喜欢的颜色是蓝色!&quot;;\n    break;\ncase &quot;green&quot;:\n    echo &quot;你喜欢的颜色是绿色!&quot;;\n    break;\ndefault:\n    echo &quot;你喜欢的颜色不是 红, 蓝, 或绿色!&quot;;\n&#125;\n?&gt;\n\n\n\n数组数组能够在单个变量中存储多个值\n数组可以在单个变量中存储多个值，并且您可以根据键访问其中的值。\n&lt;?php\n$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\necho &quot;I like &quot; . $cars[0] . &quot;, &quot; . $cars[1] . &quot; and &quot; . $cars[2] . &quot;.&quot;;\n?&gt;\n\n\n\n创建数组在 PHP 中，array() 函数用于创建数组：\narray();\n\n\n\n在 PHP 中，有三种类型的数组：\n\n数值数组 - 带有数字 ID 键的数组\n关联数组 - 带有指定的键的数组，每个键关联一个值\n多维数组 - 包含一个或多个数组的数组\n\n数值数组这里有两种创建数值数组的方法：\n自动分配 ID 键（ID 键总是从 0 开始）：\n$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\n\n&lt;?php\n$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\necho &quot;I like &quot; . $cars[0] . &quot;, &quot; . $cars[1] . &quot; and &quot; . $cars[2] . &quot;.&quot;;\n?&gt;\n\n\n\n获取数组的长度 - count() 函数count() 函数用于返回数组的长度（元素的数量）\n&lt;?php\n$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\necho count($cars);\n?&gt;\n\n\n\n遍历数值数组遍历并打印数值数组中的所有值，您可以使用 for 循环\n&lt;?php\n$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\n$arrlength&#x3D;count($cars);\n \nfor($x&#x3D;0;$x&lt;$arrlength;$x++)\n&#123;\n    echo $cars[$x];\n    echo &quot;&lt;br&gt;&quot;;\n&#125;\n?&gt;\n\n\n\n关联数组关联数组是使用您分配给数组的指定的键的数组。\n这里有两种创建关联数组的方法\n$age&#x3D;array(&quot;Peter&quot;&#x3D;&gt;&quot;35&quot;,&quot;Ben&quot;&#x3D;&gt;&quot;37&quot;,&quot;Joe&quot;&#x3D;&gt;&quot;43&quot;);\n\nor\n\n$age[&#39;Peter&#39;]&#x3D;&quot;35&quot;;\n$age[&#39;Ben&#39;]&#x3D;&quot;37&quot;;\n$age[&#39;Joe&#39;]&#x3D;&quot;43&quot;;\n\n\n\n&lt;?php\n$age&#x3D;array(&quot;Peter&quot;&#x3D;&gt;&quot;35&quot;,&quot;Ben&quot;&#x3D;&gt;&quot;37&quot;,&quot;Joe&quot;&#x3D;&gt;&quot;43&quot;);\necho &quot;Peter is &quot; . $age[&#39;Peter&#39;] . &quot; years old.&quot;;\n?&gt;\n\n\n\n遍历关联数组遍历并打印关联数组中的所有值，您可以使用 foreach 循环\n&lt;?php\n$age&#x3D;array(&quot;Peter&quot;&#x3D;&gt;&quot;35&quot;,&quot;Ben&quot;&#x3D;&gt;&quot;37&quot;,&quot;Joe&quot;&#x3D;&gt;&quot;43&quot;);\n \nforeach($age as $x&#x3D;&gt;$x_value)\n&#123;\n    echo &quot;Key&#x3D;&quot; . $x . &quot;, Value&#x3D;&quot; . $x_value;\n    echo &quot;&lt;br&gt;&quot;;\n&#125;\n?&gt;\n\n\n\n循环循环执行代码块指定的次数，或者当指定的条件为真时循环执行代码块。\n在 PHP 中，提供了下列循环语句：\n\nwhile - 只要指定的条件成立，则循环执行代码块\ndo…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环\nfor - 循环执行代码块指定的次数\nforeach - 根据数组中每个元素来循环代码块\n\nwhile 循环while 循环将重复执行代码块，直到指定的条件不成立。\n语法while (条件)\n&#123;\n    要执行的代码;\n&#125;\n\n\n\n实例首先设置变量 i 的值为 1 ($i&#x3D;1;)。\n然后，只要 i 小于或者等于 5，while 循环将继续运行。循环每运行一次，i 就会递增 1：\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$i&#x3D;1;\nwhile($i&lt;&#x3D;5)\n&#123;\n    echo &quot;The number is &quot; . $i . &quot;&lt;br&gt;&quot;;\n    $i++;\n&#125;\n?&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\ndo…while 语句do…while 语句会至少执行一次代码，然后检查条件，只要条件成立，就会重复进行循环。\n语法do\n&#123;\n    要执行的代码;\n&#125;\nwhile (条件);\n\n\n\n实例首先设置变量 i 的值为 1 ($i&#x3D;1;)。\n然后，开始 do…while 循环。循环将变量 i 的值递增 1，然后输出。先检查条件（i 小于或者等于 5），只要 i 小于或者等于 5，循环将继续运行\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$i&#x3D;1;\ndo\n&#123;\n    $i++;\n    echo &quot;The number is &quot; . $i . &quot;&lt;br&gt;&quot;;\n&#125;\nwhile ($i&lt;&#x3D;5);\n?&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\nFor 循环for 循环用于您预先知道脚本需要运行的次数的情况。\n语法for (初始值; 条件; 增量)\n&#123;\n    要执行的代码;\n&#125;\n\n参数：\n\n初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。\n条件：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束。\n增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）。\n\n注释：上面的初始值和增量参数可为空，或者有多个表达式（用逗号分隔）。\n实例下面的实例定义一个初始值为 i&#x3D;1 的循环。只要变量 i 小于或者等于 5，循环将继续运行。循环每运行一次，变量 i 就会递增 1\n&lt;?php\nfor ($i&#x3D;1; $i&lt;&#x3D;5; $i++)\n&#123;\n    echo &quot;数字为 &quot; . $i;\n&#125;\n?&gt;\n\n\n\nforeach 循环foreach 循环用于遍历数组。\n语法foreach ($array as $value)\n&#123;\n    要执行代码;\n&#125;\n\n每进行一次循环，当前数组元素的值就会被赋值给 $value 变量（数组指针会逐一地移动），在进行下一次循环时，您将看到数组中的下一个值。\nforeach ($array as $key &#x3D;&gt; $value)\n&#123;\n    要执行代码;\n&#125;\n\n每一次循环，当前数组元素的键与值就都会被赋值给 $key 和 $value 变量（数字指针会逐一地移动），在进行下一次循环时，你将看到数组中的下一个键与值。\n&lt;?php\n$x&#x3D;array(&quot;Google&quot;,&quot;Runoob&quot;,&quot;Taobao&quot;);\nforeach ($x as $value)\n&#123;\n    echo $value . PHP_EOL;\n&#125;\n?&gt;\n\n\n\n&lt;?php\n$x&#x3D;array(1&#x3D;&gt;&quot;Google&quot;, 2&#x3D;&gt;&quot;Runoob&quot;, 3&#x3D;&gt;&quot;Taobao&quot;);\nforeach ($x as $key &#x3D;&gt; $value)\n&#123;\n    echo &quot;key  为 &quot; . $key . &quot;，对应的 value 为 &quot;. $value . PHP_EOL;\n&#125;\n?&gt;\n\n\n\n函数创建 PHP 函数函数是通过调用函数来执行的。\n&lt;?php\nfunction functionName()\n&#123;\n    &#x2F;&#x2F; 要执行的代码\n&#125;\n?&gt;\n\n函数准则：\n\n函数的名称应该提示出它的功能\n函数名称以字母或下划线开头（不能以数字开头）\n\n&lt;?php\nfunction writeName()\n&#123;\n    echo &quot;Kai Jim Refsnes&quot;;\n&#125;\n \necho &quot;My name is &quot;;\nwriteName();\n?&gt;\n\n\n\n函数 - 添加参数为了给函数添加更多的功能，我们可以添加参数，参数类似变量。\n参数就在函数名称后面的一个括号内指定。\n&lt;?php\nfunction writeName($fname)\n&#123;\n    echo $fname . &quot; Refsnes.&lt;br&gt;&quot;;\n&#125;\n \necho &quot;My name is &quot;;\nwriteName(&quot;Kai Jim&quot;);\necho &quot;My sister&#39;s name is &quot;;\nwriteName(&quot;Hege&quot;);\necho &quot;My brother&#39;s name is &quot;;\nwriteName(&quot;Stale&quot;);\n?&gt;\n\n\n\n&lt;?php\nfunction writeName($fname,$punctuation)\n&#123;\n    echo $fname . &quot; Refsnes&quot; . $punctuation . &quot;&lt;br&gt;&quot;;\n&#125;\n \necho &quot;My name is &quot;;\nwriteName(&quot;Kai Jim&quot;,&quot;.&quot;);\necho &quot;My sister&#39;s name is &quot;;\nwriteName(&quot;Hege&quot;,&quot;!&quot;);\necho &quot;My brother&#39;s name is &quot;;\nwriteName(&quot;Ståle&quot;,&quot;?&quot;);\n?&gt;\n\n\n\n函数 - 返回值如需让函数返回一个值，请使用 return 语句\n&lt;?php\nfunction add($x,$y)\n&#123;\n    $total&#x3D;$x+$y;\n    return $total;\n&#125;\n \necho &quot;1 + 16 &#x3D; &quot; . add(1,16);\n?&gt;\n\n\n\n","slug":"01PHP基础","date":"2023-01-10T13:21:22.628Z","categories_index":"学习笔记","tags_index":"php","author_index":"Abyssaler"}]